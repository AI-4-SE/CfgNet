[
    {
        "full_name": "sklearn.base.BaseEstimator",
        "name": "BaseEstimator",
        "params": []
    },
    {
        "full_name": "sklearn.base.BiclusterMixin",
        "name": "BiclusterMixin",
        "params": []
    },
    {
        "full_name": "sklearn.base.ClassifierMixin",
        "name": "ClassifierMixin",
        "params": []
    },
    {
        "full_name": "sklearn.base.ClusterMixin",
        "name": "ClusterMixin",
        "params": []
    },
    {
        "full_name": "sklearn.base.DensityMixin",
        "name": "DensityMixin",
        "params": []
    },
    {
        "full_name": "sklearn.base.RegressorMixin",
        "name": "RegressorMixin",
        "params": []
    },
    {
        "full_name": "sklearn.base.TransformerMixin",
        "name": "TransformerMixin",
        "params": []
    },
    {
        "full_name": "sklearn.feature_selection.SelectorMixin",
        "name": "SelectorMixin",
        "params": []
    },
    {
        "full_name": "sklearn.base.clone",
        "name": "clone",
        "params": [
            "estimator",
            "safe"
        ]
    },
    {
        "full_name": "sklearn.base.is_classifier",
        "name": "is_classifier",
        "params": [
            "estimator"
        ]
    },
    {
        "full_name": "sklearn.base.is_regressor",
        "name": "is_regressor",
        "params": [
            "estimator"
        ]
    },
    {
        "full_name": "sklearn.config_context",
        "name": "config_context",
        "params": [
            "assume_finite",
            "working_memory",
            "print_changed_only",
            "display",
            "pairwise_dist_chunk_size",
            "enable_cython_pairwise_dist"
        ]
    },
    {
        "full_name": "sklearn.get_config",
        "name": "get_config",
        "params": []
    },
    {
        "full_name": "sklearn.set_config",
        "name": "set_config",
        "params": [
            "assume_finite",
            "working_memory",
            "print_changed_only",
            "display",
            "pairwise_dist_chunk_size",
            "enable_cython_pairwise_dist"
        ]
    },
    {
        "full_name": "sklearn.show_versions",
        "name": "show_versions",
        "params": []
    },
    {
        "full_name": "sklearn.calibration.CalibratedClassifierCV",
        "name": "CalibratedClassifierCV",
        "params": [
            "base_estimator",
            "method",
            "cv",
            "n_jobs",
            "ensemble"
        ]
    },
    {
        "full_name": "sklearn.calibration.calibration_curve",
        "name": "calibration_curve",
        "params": [
            "y_true",
            "y_prob",
            "pos_label",
            "normalize",
            "n_bins",
            "strategy"
        ]
    },
    {
        "full_name": "sklearn.cluster.AffinityPropagation",
        "name": "AffinityPropagation",
        "params": [
            "damping",
            "max_iter",
            "convergence_iter",
            "copy",
            "preference",
            "affinity",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.cluster.AgglomerativeClustering",
        "name": "AgglomerativeClustering",
        "params": [
            "n_clusters",
            "affinity",
            "memory",
            "connectivity",
            "compute_full_tree",
            "linkage",
            "distance_threshold",
            "compute_distances"
        ]
    },
    {
        "full_name": "sklearn.cluster.Birch",
        "name": "Birch",
        "params": [
            "threshold",
            "branching_factor",
            "n_clusters",
            "compute_labels",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.cluster.DBSCAN",
        "name": "DBSCAN",
        "params": [
            "eps",
            "min_samples",
            "metric",
            "metric_params",
            "algorithm",
            "leaf_size",
            "p",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.cluster.FeatureAgglomeration",
        "name": "FeatureAgglomeration",
        "params": [
            "n_clusters",
            "affinity",
            "memory",
            "connectivity",
            "compute_full_tree",
            "linkage",
            "pooling_func",
            "distance_threshold",
            "compute_distances"
        ]
    },
    {
        "full_name": "sklearn.cluster.KMeans",
        "name": "KMeans",
        "params": [
            "n_clusters",
            "init",
            "n_init",
            "max_iter",
            "tol",
            "verbose",
            "random_state",
            "copy_x",
            "algorithm"
        ]
    },
    {
        "full_name": "sklearn.cluster.BisectingKMeans",
        "name": "BisectingKMeans",
        "params": [
            "n_clusters",
            "init",
            "n_init",
            "random_state",
            "max_iter",
            "verbose",
            "tol",
            "copy_x",
            "algorithm",
            "bisecting_strategy"
        ]
    },
    {
        "full_name": "sklearn.cluster.MiniBatchKMeans",
        "name": "MiniBatchKMeans",
        "params": [
            "n_clusters",
            "init",
            "max_iter",
            "batch_size",
            "verbose",
            "compute_labels",
            "random_state",
            "tol",
            "max_no_improvement",
            "init_size",
            "n_init",
            "reassignment_ratio"
        ]
    },
    {
        "full_name": "sklearn.cluster.MeanShift",
        "name": "MeanShift",
        "params": [
            "bandwidth",
            "seeds",
            "bin_seeding",
            "min_bin_freq",
            "cluster_all",
            "n_jobs",
            "max_iter"
        ]
    },
    {
        "full_name": "sklearn.cluster.OPTICS",
        "name": "OPTICS",
        "params": [
            "min_samples",
            "max_eps",
            "metric",
            "p",
            "metric_params",
            "cluster_method",
            "eps",
            "xi",
            "predecessor_correction",
            "min_cluster_size",
            "algorithm",
            "leaf_size",
            "memory",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.cluster.SpectralClustering",
        "name": "SpectralClustering",
        "params": [
            "n_clusters",
            "eigen_solver",
            "n_components",
            "random_state",
            "n_init",
            "gamma",
            "affinity",
            "n_neighbors",
            "eigen_tol",
            "assign_labels",
            "degree",
            "coef0",
            "kernel_params",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.cluster.SpectralBiclustering",
        "name": "SpectralBiclustering",
        "params": [
            "n_clusters",
            "method",
            "n_components",
            "n_best",
            "svd_method",
            "n_svd_vecs",
            "mini_batch",
            "init",
            "n_init",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.cluster.SpectralCoclustering",
        "name": "SpectralCoclustering",
        "params": [
            "n_clusters",
            "svd_method",
            "n_svd_vecs",
            "mini_batch",
            "init",
            "n_init",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.cluster.affinity_propagation",
        "name": "affinity_propagation",
        "params": [
            "S",
            "preference",
            "convergence_iter",
            "max_iter",
            "damping",
            "copy",
            "verbose",
            "return_n_iter",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.cluster.cluster_optics_dbscan",
        "name": "cluster_optics_dbscan",
        "params": [
            "reachability",
            "core_distances",
            "ordering",
            "eps"
        ]
    },
    {
        "full_name": "sklearn.cluster.cluster_optics_xi",
        "name": "cluster_optics_xi",
        "params": [
            "reachability",
            "predecessor",
            "ordering",
            "min_samples",
            "min_cluster_size",
            "xi",
            "predecessor_correction"
        ]
    },
    {
        "full_name": "sklearn.cluster.compute_optics_graph",
        "name": "compute_optics_graph",
        "params": [
            "X",
            "min_samples",
            "max_eps",
            "metric",
            "p",
            "metric_params",
            "algorithm",
            "leaf_size",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.cluster.dbscan",
        "name": "dbscan",
        "params": [
            "X",
            "eps",
            "min_samples",
            "metric",
            "metric_params",
            "algorithm",
            "leaf_size",
            "p",
            "sample_weight",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.cluster.estimate_bandwidth",
        "name": "estimate_bandwidth",
        "params": [
            "X",
            "quantile",
            "n_samples",
            "random_state",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.cluster.k_means",
        "name": "k_means",
        "params": [
            "X",
            "n_clusters",
            "sample_weight",
            "init",
            "n_init",
            "max_iter",
            "verbose",
            "tol",
            "random_state",
            "copy_x",
            "algorithm",
            "return_n_iter"
        ]
    },
    {
        "full_name": "sklearn.cluster.kmeans_plusplus",
        "name": "kmeans_plusplus",
        "params": [
            "X",
            "n_clusters",
            "x_squared_norms",
            "random_state",
            "n_local_trials"
        ]
    },
    {
        "full_name": "sklearn.cluster.mean_shift",
        "name": "mean_shift",
        "params": [
            "X",
            "bandwidth",
            "seeds",
            "bin_seeding",
            "min_bin_freq",
            "cluster_all",
            "max_iter",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.cluster.spectral_clustering",
        "name": "spectral_clustering",
        "params": [
            "affinity",
            "n_clusters",
            "n_components",
            "eigen_solver",
            "random_state",
            "n_init",
            "eigen_tol",
            "assign_labels",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.cluster.ward_tree",
        "name": "ward_tree",
        "params": [
            "X",
            "connectivity",
            "n_clusters",
            "return_distance"
        ]
    },
    {
        "full_name": "sklearn.compose.ColumnTransformer",
        "name": "ColumnTransformer",
        "params": [
            "transformers",
            "remainder",
            "sparse_threshold",
            "n_jobs",
            "transformer_weights",
            "verbose",
            "verbose_feature_names_out"
        ]
    },
    {
        "full_name": "sklearn.compose.TransformedTargetRegressor",
        "name": "TransformedTargetRegressor",
        "params": [
            "regressor",
            "transformer",
            "func",
            "inverse_func",
            "check_inverse"
        ]
    },
    {
        "full_name": "sklearn.compose.make_column_transformer",
        "name": "make_column_transformer",
        "params": [
            "*transformers",
            "remainder",
            "sparse_threshold",
            "n_jobs",
            "verbose",
            "verbose_feature_names_out"
        ]
    },
    {
        "full_name": "sklearn.compose.make_column_selector",
        "name": "make_column_selector",
        "params": [
            "pattern",
            "dtype_include",
            "dtype_exclude"
        ]
    },
    {
        "full_name": "sklearn.covariance.EmpiricalCovariance",
        "name": "EmpiricalCovariance",
        "params": [
            "store_precision",
            "assume_centered"
        ]
    },
    {
        "full_name": "sklearn.covariance.EllipticEnvelope",
        "name": "EllipticEnvelope",
        "params": [
            "store_precision",
            "assume_centered",
            "support_fraction",
            "contamination",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.covariance.GraphicalLasso",
        "name": "GraphicalLasso",
        "params": [
            "alpha",
            "mode",
            "tol",
            "enet_tol",
            "max_iter",
            "verbose",
            "assume_centered"
        ]
    },
    {
        "full_name": "sklearn.covariance.GraphicalLassoCV",
        "name": "GraphicalLassoCV",
        "params": [
            "alphas",
            "n_refinements",
            "cv",
            "tol",
            "enet_tol",
            "max_iter",
            "mode",
            "n_jobs",
            "verbose",
            "assume_centered"
        ]
    },
    {
        "full_name": "sklearn.covariance.LedoitWolf",
        "name": "LedoitWolf",
        "params": [
            "store_precision",
            "assume_centered",
            "block_size"
        ]
    },
    {
        "full_name": "sklearn.covariance.MinCovDet",
        "name": "MinCovDet",
        "params": [
            "store_precision",
            "assume_centered",
            "support_fraction",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.covariance.OAS",
        "name": "OAS",
        "params": [
            "store_precision",
            "assume_centered"
        ]
    },
    {
        "full_name": "sklearn.covariance.ShrunkCovariance",
        "name": "ShrunkCovariance",
        "params": [
            "store_precision",
            "assume_centered",
            "shrinkage"
        ]
    },
    {
        "full_name": "sklearn.covariance.empirical_covariance",
        "name": "empirical_covariance",
        "params": [
            "X",
            "assume_centered"
        ]
    },
    {
        "full_name": "sklearn.covariance.graphical_lasso",
        "name": "graphical_lasso",
        "params": [
            "emp_cov",
            "alpha",
            "cov_init",
            "mode",
            "tol",
            "enet_tol",
            "max_iter",
            "verbose",
            "return_costs",
            "eps",
            "return_n_iter"
        ]
    },
    {
        "full_name": "sklearn.covariance.ledoit_wolf",
        "name": "ledoit_wolf",
        "params": [
            "X",
            "assume_centered",
            "block_size"
        ]
    },
    {
        "full_name": "sklearn.covariance.oas",
        "name": "oas",
        "params": [
            "X",
            "assume_centered"
        ]
    },
    {
        "full_name": "sklearn.covariance.shrunk_covariance",
        "name": "shrunk_covariance",
        "params": [
            "emp_cov",
            "shrinkage"
        ]
    },
    {
        "full_name": "sklearn.cross_decomposition.CCA",
        "name": "CCA",
        "params": [
            "n_components",
            "scale",
            "max_iter",
            "tol",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.cross_decomposition.PLSCanonical",
        "name": "PLSCanonical",
        "params": [
            "n_components",
            "scale",
            "algorithm",
            "max_iter",
            "tol",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.cross_decomposition.PLSRegression",
        "name": "PLSRegression",
        "params": [
            "n_components",
            "scale",
            "max_iter",
            "tol",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.cross_decomposition.PLSSVD",
        "name": "PLSSVD",
        "params": [
            "n_components",
            "scale",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.datasets.clear_data_home",
        "name": "clear_data_home",
        "params": [
            "data_home"
        ]
    },
    {
        "full_name": "sklearn.datasets.dump_svmlight_file",
        "name": "dump_svmlight_file",
        "params": [
            "X",
            "y",
            "f",
            "zero_based",
            "comment",
            "query_id",
            "multilabel"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_20newsgroups",
        "name": "fetch_20newsgroups",
        "params": [
            "data_home",
            "subset",
            "categories",
            "shuffle",
            "random_state",
            "remove",
            "download_if_missing",
            "return_X_y"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_20newsgroups_vectorized",
        "name": "fetch_20newsgroups_vectorized",
        "params": [
            "subset",
            "remove",
            "data_home",
            "download_if_missing",
            "return_X_y",
            "normalize",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_california_housing",
        "name": "fetch_california_housing",
        "params": [
            "data_home",
            "download_if_missing",
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_covtype",
        "name": "fetch_covtype",
        "params": [
            "data_home",
            "download_if_missing",
            "random_state",
            "shuffle",
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_kddcup99",
        "name": "fetch_kddcup99",
        "params": [
            "subset",
            "data_home",
            "shuffle",
            "random_state",
            "percent10",
            "download_if_missing",
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_lfw_pairs",
        "name": "fetch_lfw_pairs",
        "params": [
            "subset",
            "data_home",
            "funneled",
            "resize",
            "color",
            "slice_",
            "download_if_missing"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_lfw_people",
        "name": "fetch_lfw_people",
        "params": [
            "data_home",
            "funneled",
            "resize",
            "min_faces_per_person",
            "color",
            "slice_",
            "download_if_missing",
            "return_X_y"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_olivetti_faces",
        "name": "fetch_olivetti_faces",
        "params": [
            "data_home",
            "shuffle",
            "random_state",
            "download_if_missing",
            "return_X_y"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_openml",
        "name": "fetch_openml",
        "params": [
            "name",
            "version",
            "data_id",
            "data_home",
            "target_column",
            "cache",
            "return_X_y",
            "as_frame",
            "n_retries",
            "delay"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_rcv1",
        "name": "fetch_rcv1",
        "params": [
            "data_home",
            "subset",
            "download_if_missing",
            "random_state",
            "shuffle",
            "return_X_y"
        ]
    },
    {
        "full_name": "sklearn.datasets.fetch_species_distributions",
        "name": "fetch_species_distributions",
        "params": [
            "data_home",
            "download_if_missing"
        ]
    },
    {
        "full_name": "sklearn.datasets.get_data_home",
        "name": "get_data_home",
        "params": [
            "data_home"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_boston",
        "name": "load_boston",
        "params": [
            "return_X_y"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_breast_cancer",
        "name": "load_breast_cancer",
        "params": [
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_diabetes",
        "name": "load_diabetes",
        "params": [
            "return_X_y",
            "as_frame",
            "scaled"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_digits",
        "name": "load_digits",
        "params": [
            "n_class",
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_files",
        "name": "load_files",
        "params": [
            "container_path",
            "description",
            "categories",
            "load_content",
            "shuffle",
            "encoding",
            "decode_error",
            "random_state",
            "allowed_extensions"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_iris",
        "name": "load_iris",
        "params": [
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_linnerud",
        "name": "load_linnerud",
        "params": [
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_sample_image",
        "name": "load_sample_image",
        "params": [
            "image_name"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_sample_images",
        "name": "load_sample_images",
        "params": []
    },
    {
        "full_name": "sklearn.datasets.load_svmlight_file",
        "name": "load_svmlight_file",
        "params": [
            "f",
            "n_features",
            "dtype",
            "multilabel",
            "zero_based",
            "query_id",
            "offset",
            "length"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_svmlight_files",
        "name": "load_svmlight_files",
        "params": [
            "files",
            "n_features",
            "dtype",
            "multilabel",
            "zero_based",
            "query_id",
            "offset",
            "length"
        ]
    },
    {
        "full_name": "sklearn.datasets.load_wine",
        "name": "load_wine",
        "params": [
            "return_X_y",
            "as_frame"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_biclusters",
        "name": "make_biclusters",
        "params": [
            "shape",
            "n_clusters",
            "noise",
            "minval",
            "maxval",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_blobs",
        "name": "make_blobs",
        "params": [
            "n_samples",
            "n_features",
            "centers",
            "cluster_std",
            "center_box",
            "shuffle",
            "random_state",
            "return_centers"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_checkerboard",
        "name": "make_checkerboard",
        "params": [
            "shape",
            "n_clusters",
            "noise",
            "minval",
            "maxval",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_circles",
        "name": "make_circles",
        "params": [
            "n_samples",
            "shuffle",
            "noise",
            "random_state",
            "factor"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_classification",
        "name": "make_classification",
        "params": [
            "n_samples",
            "n_features",
            "n_informative",
            "n_redundant",
            "n_repeated",
            "n_classes",
            "n_clusters_per_class",
            "weights",
            "flip_y",
            "class_sep",
            "hypercube",
            "shift",
            "scale",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_friedman1",
        "name": "make_friedman1",
        "params": [
            "n_samples",
            "n_features",
            "noise",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_friedman2",
        "name": "make_friedman2",
        "params": [
            "n_samples",
            "noise",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_friedman3",
        "name": "make_friedman3",
        "params": [
            "n_samples",
            "noise",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_gaussian_quantiles",
        "name": "make_gaussian_quantiles",
        "params": [
            "mean",
            "cov",
            "n_samples",
            "n_features",
            "n_classes",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_hastie_10_2",
        "name": "make_hastie_10_2",
        "params": [
            "n_samples",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_low_rank_matrix",
        "name": "make_low_rank_matrix",
        "params": [
            "n_samples",
            "n_features",
            "effective_rank",
            "tail_strength",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_moons",
        "name": "make_moons",
        "params": [
            "n_samples",
            "shuffle",
            "noise",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_multilabel_classification",
        "name": "make_multilabel_classification",
        "params": [
            "n_samples",
            "n_features",
            "n_classes",
            "n_labels",
            "length",
            "allow_unlabeled",
            "sparse",
            "return_indicator",
            "return_distributions",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_regression",
        "name": "make_regression",
        "params": [
            "n_samples",
            "n_features",
            "n_informative",
            "n_targets",
            "bias",
            "effective_rank",
            "tail_strength",
            "noise",
            "shuffle",
            "coef",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_s_curve",
        "name": "make_s_curve",
        "params": [
            "n_samples",
            "noise",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_sparse_coded_signal",
        "name": "make_sparse_coded_signal",
        "params": [
            "n_samples",
            "n_components",
            "n_features",
            "n_nonzero_coefs",
            "random_state",
            "data_transposed"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_sparse_spd_matrix",
        "name": "make_sparse_spd_matrix",
        "params": [
            "dim",
            "alpha",
            "norm_diag",
            "smallest_coef",
            "largest_coef",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_sparse_uncorrelated",
        "name": "make_sparse_uncorrelated",
        "params": [
            "n_samples",
            "n_features",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_spd_matrix",
        "name": "make_spd_matrix",
        "params": [
            "n_dim",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.datasets.make_swiss_roll",
        "name": "make_swiss_roll",
        "params": [
            "n_samples",
            "noise",
            "random_state",
            "hole"
        ]
    },
    {
        "full_name": "sklearn.decomposition.DictionaryLearning",
        "name": "DictionaryLearning",
        "params": [
            "n_components",
            "alpha",
            "max_iter",
            "tol",
            "fit_algorithm",
            "transform_algorithm",
            "transform_n_nonzero_coefs",
            "transform_alpha",
            "n_jobs",
            "code_init",
            "dict_init",
            "verbose",
            "split_sign",
            "random_state",
            "positive_code",
            "positive_dict",
            "transform_max_iter"
        ]
    },
    {
        "full_name": "sklearn.decomposition.FactorAnalysis",
        "name": "FactorAnalysis",
        "params": [
            "n_components",
            "tol",
            "copy",
            "max_iter",
            "noise_variance_init",
            "svd_method",
            "iterated_power",
            "rotation",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.decomposition.FastICA",
        "name": "FastICA",
        "params": [
            "n_components",
            "algorithm",
            "whiten",
            "fun",
            "fun_args",
            "max_iter",
            "tol",
            "w_init",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.decomposition.IncrementalPCA",
        "name": "IncrementalPCA",
        "params": [
            "n_components",
            "whiten",
            "copy",
            "batch_size"
        ]
    },
    {
        "full_name": "sklearn.decomposition.KernelPCA",
        "name": "KernelPCA",
        "params": [
            "n_components",
            "kernel",
            "gamma",
            "degree",
            "coef0",
            "kernel_params",
            "alpha",
            "fit_inverse_transform",
            "eigen_solver",
            "tol",
            "max_iter",
            "iterated_power",
            "remove_zero_eig",
            "random_state",
            "copy_X",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.decomposition.LatentDirichletAllocation",
        "name": "LatentDirichletAllocation",
        "params": [
            "n_components",
            "doc_topic_prior",
            "topic_word_prior",
            "learning_method",
            "learning_decay",
            "learning_offset",
            "max_iter",
            "batch_size",
            "evaluate_every",
            "total_samples",
            "perp_tol",
            "mean_change_tol",
            "max_doc_update_iter",
            "n_jobs",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.decomposition.MiniBatchDictionaryLearning",
        "name": "MiniBatchDictionaryLearning",
        "params": [
            "n_components",
            "alpha",
            "n_iter",
            "max_iter",
            "fit_algorithm",
            "n_jobs",
            "batch_size",
            "shuffle",
            "dict_init",
            "transform_algorithm",
            "transform_n_nonzero_coefs",
            "transform_alpha",
            "verbose",
            "split_sign",
            "random_state",
            "positive_code",
            "positive_dict",
            "transform_max_iter",
            "callback",
            "tol",
            "max_no_improvement"
        ]
    },
    {
        "full_name": "sklearn.decomposition.MiniBatchSparsePCA",
        "name": "MiniBatchSparsePCA",
        "params": [
            "n_components",
            "alpha",
            "ridge_alpha",
            "n_iter",
            "callback",
            "batch_size",
            "verbose",
            "shuffle",
            "n_jobs",
            "method",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.decomposition.NMF",
        "name": "NMF",
        "params": [
            "n_components",
            "init",
            "solver",
            "beta_loss",
            "tol",
            "max_iter",
            "random_state",
            "alpha",
            "alpha_W",
            "alpha_H",
            "l1_ratio",
            "verbose",
            "shuffle",
            "regularization"
        ]
    },
    {
        "full_name": "sklearn.decomposition.MiniBatchNMF",
        "name": "MiniBatchNMF",
        "params": [
            "n_components",
            "init",
            "batch_size",
            "beta_loss",
            "tol",
            "max_no_improvement",
            "max_iter",
            "alpha_W",
            "alpha_H",
            "l1_ratio",
            "forget_factor",
            "fresh_restarts",
            "fresh_restarts_max_iter",
            "transform_max_iter",
            "random_state",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.decomposition.PCA",
        "name": "PCA",
        "params": [
            "n_components",
            "copy",
            "whiten",
            "svd_solver",
            "tol",
            "iterated_power",
            "n_oversamples",
            "power_iteration_normalizer",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.decomposition.SparsePCA",
        "name": "SparsePCA",
        "params": [
            "n_components",
            "alpha",
            "ridge_alpha",
            "max_iter",
            "tol",
            "method",
            "n_jobs",
            "U_init",
            "V_init",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.decomposition.SparseCoder",
        "name": "SparseCoder",
        "params": [
            "dictionary",
            "transform_algorithm",
            "transform_n_nonzero_coefs",
            "transform_alpha",
            "split_sign",
            "n_jobs",
            "positive_code",
            "transform_max_iter"
        ]
    },
    {
        "full_name": "sklearn.decomposition.TruncatedSVD",
        "name": "TruncatedSVD",
        "params": [
            "n_components",
            "algorithm",
            "n_iter",
            "n_oversamples",
            "power_iteration_normalizer",
            "random_state",
            "tol"
        ]
    },
    {
        "full_name": "sklearn.decomposition.dict_learning",
        "name": "dict_learning",
        "params": [
            "X",
            "n_components",
            "alpha",
            "max_iter",
            "tol",
            "method",
            "n_jobs",
            "dict_init",
            "code_init",
            "callback",
            "verbose",
            "random_state",
            "return_n_iter",
            "positive_dict",
            "positive_code",
            "method_max_iter"
        ]
    },
    {
        "full_name": "sklearn.decomposition.dict_learning_online",
        "name": "dict_learning_online",
        "params": [
            "X",
            "n_components",
            "alpha",
            "n_iter",
            "max_iter",
            "return_code",
            "dict_init",
            "callback",
            "batch_size",
            "verbose",
            "shuffle",
            "n_jobs",
            "method",
            "iter_offset",
            "random_state",
            "return_inner_stats",
            "inner_stats",
            "return_n_iter",
            "positive_dict",
            "positive_code",
            "method_max_iter",
            "tol",
            "max_no_improvement"
        ]
    },
    {
        "full_name": "sklearn.decomposition.fastica",
        "name": "fastica",
        "params": [
            "X",
            "n_components",
            "algorithm",
            "whiten",
            "fun",
            "fun_args",
            "max_iter",
            "tol",
            "w_init",
            "random_state",
            "return_X_mean",
            "compute_sources",
            "return_n_iter"
        ]
    },
    {
        "full_name": "sklearn.decomposition.non_negative_factorization",
        "name": "non_negative_factorization",
        "params": [
            "X",
            "W",
            "H",
            "n_components",
            "init",
            "update_H",
            "solver",
            "beta_loss",
            "tol",
            "max_iter",
            "alpha",
            "alpha_W",
            "alpha_H",
            "l1_ratio",
            "regularization",
            "random_state",
            "verbose",
            "shuffle"
        ]
    },
    {
        "full_name": "sklearn.decomposition.sparse_encode",
        "name": "sparse_encode",
        "params": [
            "X",
            "dictionary",
            "gram",
            "cov",
            "algorithm",
            "n_nonzero_coefs",
            "alpha",
            "copy_cov",
            "init",
            "max_iter",
            "n_jobs",
            "check_input",
            "verbose",
            "positive"
        ]
    },
    {
        "full_name": "sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
        "name": "LinearDiscriminantAnalysis",
        "params": [
            "solver",
            "shrinkage",
            "priors",
            "n_components",
            "store_covariance",
            "tol",
            "covariance_estimator"
        ]
    },
    {
        "full_name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
        "name": "QuadraticDiscriminantAnalysis",
        "params": [
            "priors",
            "reg_param",
            "store_covariance",
            "tol"
        ]
    },
    {
        "full_name": "sklearn.dummy.DummyClassifier",
        "name": "DummyClassifier",
        "params": [
            "strategy",
            "random_state",
            "constant"
        ]
    },
    {
        "full_name": "sklearn.dummy.DummyRegressor",
        "name": "DummyRegressor",
        "params": [
            "strategy",
            "constant",
            "quantile"
        ]
    },
    {
        "full_name": "sklearn.ensemble.AdaBoostClassifier",
        "name": "AdaBoostClassifier",
        "params": [
            "base_estimator",
            "n_estimators",
            "learning_rate",
            "algorithm",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.ensemble.AdaBoostRegressor",
        "name": "AdaBoostRegressor",
        "params": [
            "base_estimator",
            "n_estimators",
            "learning_rate",
            "loss",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.ensemble.BaggingClassifier",
        "name": "BaggingClassifier",
        "params": [
            "base_estimator",
            "n_estimators",
            "max_samples",
            "max_features",
            "bootstrap",
            "bootstrap_features",
            "oob_score",
            "warm_start",
            "n_jobs",
            "random_state",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.ensemble.BaggingRegressor",
        "name": "BaggingRegressor",
        "params": [
            "base_estimator",
            "n_estimators",
            "max_samples",
            "max_features",
            "bootstrap",
            "bootstrap_features",
            "oob_score",
            "warm_start",
            "n_jobs",
            "random_state",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.ensemble.ExtraTreesClassifier",
        "name": "ExtraTreesClassifier",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "class_weight",
            "ccp_alpha",
            "max_samples"
        ]
    },
    {
        "full_name": "sklearn.ensemble.ExtraTreesRegressor",
        "name": "ExtraTreesRegressor",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "ccp_alpha",
            "max_samples"
        ]
    },
    {
        "full_name": "sklearn.ensemble.GradientBoostingClassifier",
        "name": "GradientBoostingClassifier",
        "params": [
            "loss",
            "learning_rate",
            "n_estimators",
            "subsample",
            "criterion",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_depth",
            "min_impurity_decrease",
            "init",
            "random_state",
            "max_features",
            "verbose",
            "max_leaf_nodes",
            "warm_start",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "ccp_alpha"
        ]
    },
    {
        "full_name": "sklearn.ensemble.GradientBoostingRegressor",
        "name": "GradientBoostingRegressor",
        "params": [
            "loss",
            "learning_rate",
            "n_estimators",
            "subsample",
            "criterion",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_depth",
            "min_impurity_decrease",
            "init",
            "random_state",
            "max_features",
            "alpha",
            "verbose",
            "max_leaf_nodes",
            "warm_start",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "ccp_alpha"
        ]
    },
    {
        "full_name": "sklearn.ensemble.IsolationForest",
        "name": "IsolationForest",
        "params": [
            "n_estimators",
            "max_samples",
            "contamination",
            "max_features",
            "bootstrap",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start"
        ]
    },
    {
        "full_name": "sklearn.ensemble.RandomForestClassifier",
        "name": "RandomForestClassifier",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "class_weight",
            "ccp_alpha",
            "max_samples"
        ]
    },
    {
        "full_name": "sklearn.ensemble.RandomForestRegressor",
        "name": "RandomForestRegressor",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "ccp_alpha",
            "max_samples"
        ]
    },
    {
        "full_name": "sklearn.ensemble.RandomTreesEmbedding",
        "name": "RandomTreesEmbedding",
        "params": [
            "n_estimators",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "sparse_output",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start"
        ]
    },
    {
        "full_name": "sklearn.ensemble.StackingClassifier",
        "name": "StackingClassifier",
        "params": [
            "estimators",
            "final_estimator",
            "cv",
            "stack_method",
            "n_jobs",
            "passthrough",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.ensemble.StackingRegressor",
        "name": "StackingRegressor",
        "params": [
            "estimators",
            "final_estimator",
            "cv",
            "n_jobs",
            "passthrough",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.ensemble.VotingClassifier",
        "name": "VotingClassifier",
        "params": [
            "estimators",
            "voting",
            "weights",
            "n_jobs",
            "flatten_transform",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.ensemble.VotingRegressor",
        "name": "VotingRegressor",
        "params": [
            "estimators",
            "weights",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.ensemble.HistGradientBoostingRegressor",
        "name": "HistGradientBoostingRegressor",
        "params": [
            "loss",
            "quantile",
            "learning_rate",
            "max_iter",
            "max_leaf_nodes",
            "max_depth",
            "min_samples_leaf",
            "l2_regularization",
            "max_bins",
            "categorical_features",
            "monotonic_cst",
            "warm_start",
            "early_stopping",
            "scoring",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.ensemble.HistGradientBoostingClassifier",
        "name": "HistGradientBoostingClassifier",
        "params": [
            "loss",
            "learning_rate",
            "max_iter",
            "max_leaf_nodes",
            "max_depth",
            "min_samples_leaf",
            "l2_regularization",
            "max_bins",
            "categorical_features",
            "monotonic_cst",
            "warm_start",
            "early_stopping",
            "scoring",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.exceptions.ConvergenceWarning",
        "name": "ConvergenceWarning",
        "params": []
    },
    {
        "full_name": "sklearn.exceptions.DataConversionWarning",
        "name": "DataConversionWarning",
        "params": []
    },
    {
        "full_name": "sklearn.exceptions.DataDimensionalityWarning",
        "name": "DataDimensionalityWarning",
        "params": []
    },
    {
        "full_name": "sklearn.exceptions.EfficiencyWarning",
        "name": "EfficiencyWarning",
        "params": []
    },
    {
        "full_name": "sklearn.exceptions.FitFailedWarning",
        "name": "FitFailedWarning",
        "params": []
    },
    {
        "full_name": "sklearn.exceptions.NotFittedError",
        "name": "NotFittedError",
        "params": []
    },
    {
        "full_name": "sklearn.exceptions.UndefinedMetricWarning",
        "name": "UndefinedMetricWarning",
        "params": []
    },
    {
        "full_name": "sklearn.feature_extraction.DictVectorizer",
        "name": "DictVectorizer",
        "params": [
            "dtype",
            "separator",
            "sparse",
            "sort"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.FeatureHasher",
        "name": "FeatureHasher",
        "params": [
            "n_features",
            "input_type",
            "dtype",
            "alternate_sign"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.image.extract_patches_2d",
        "name": "extract_patches_2d",
        "params": [
            "image",
            "patch_size",
            "max_patches",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.image.grid_to_graph",
        "name": "grid_to_graph",
        "params": [
            "n_x",
            "n_y",
            "n_z",
            "mask",
            "return_as",
            "dtype"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.image.img_to_graph",
        "name": "img_to_graph",
        "params": [
            "img",
            "mask",
            "return_as",
            "dtype"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
        "name": "reconstruct_from_patches_2d",
        "params": [
            "patches",
            "image_size"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.image.PatchExtractor",
        "name": "PatchExtractor",
        "params": [
            "patch_size",
            "max_patches",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.text.CountVectorizer",
        "name": "CountVectorizer",
        "params": [
            "input",
            "encoding",
            "decode_error",
            "strip_accents",
            "lowercase",
            "preprocessor",
            "tokenizer",
            "stop_words",
            "token_pattern",
            "ngram_range",
            "analyzer",
            "max_df",
            "min_df",
            "max_features",
            "vocabulary",
            "binary",
            "dtype"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.text.HashingVectorizer",
        "name": "HashingVectorizer",
        "params": [
            "input",
            "encoding",
            "decode_error",
            "strip_accents",
            "lowercase",
            "preprocessor",
            "tokenizer",
            "stop_words",
            "token_pattern",
            "ngram_range",
            "analyzer",
            "n_features",
            "binary",
            "norm",
            "alternate_sign",
            "dtype"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.text.TfidfTransformer",
        "name": "TfidfTransformer",
        "params": [
            "norm",
            "use_idf",
            "smooth_idf",
            "sublinear_tf"
        ]
    },
    {
        "full_name": "sklearn.feature_extraction.text.TfidfVectorizer",
        "name": "TfidfVectorizer",
        "params": [
            "input",
            "encoding",
            "decode_error",
            "strip_accents",
            "lowercase",
            "preprocessor",
            "tokenizer",
            "analyzer",
            "stop_words",
            "token_pattern",
            "ngram_range",
            "max_df",
            "min_df",
            "max_features",
            "vocabulary",
            "binary",
            "dtype",
            "norm",
            "use_idf",
            "smooth_idf",
            "sublinear_tf"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.GenericUnivariateSelect",
        "name": "GenericUnivariateSelect",
        "params": [
            "score_func",
            "mode",
            "param"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SelectPercentile",
        "name": "SelectPercentile",
        "params": [
            "score_func",
            "percentile"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SelectKBest",
        "name": "SelectKBest",
        "params": [
            "score_func",
            "k"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SelectFpr",
        "name": "SelectFpr",
        "params": [
            "score_func",
            "alpha"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SelectFdr",
        "name": "SelectFdr",
        "params": [
            "score_func",
            "alpha"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SelectFromModel",
        "name": "SelectFromModel",
        "params": [
            "estimator",
            "threshold",
            "prefit",
            "norm_order",
            "max_features",
            "importance_getter"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SelectFwe",
        "name": "SelectFwe",
        "params": [
            "score_func",
            "alpha"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.SequentialFeatureSelector",
        "name": "SequentialFeatureSelector",
        "params": [
            "estimator",
            "n_features_to_select",
            "tol",
            "direction",
            "scoring",
            "cv",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.RFE",
        "name": "RFE",
        "params": [
            "estimator",
            "n_features_to_select",
            "step",
            "verbose",
            "importance_getter"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.RFECV",
        "name": "RFECV",
        "params": [
            "estimator",
            "step",
            "min_features_to_select",
            "cv",
            "scoring",
            "verbose",
            "n_jobs",
            "importance_getter"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.VarianceThreshold",
        "name": "VarianceThreshold",
        "params": [
            "threshold"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.chi2",
        "name": "chi2",
        "params": [
            "X",
            "y"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.f_classif",
        "name": "f_classif",
        "params": [
            "X",
            "y"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.f_regression",
        "name": "f_regression",
        "params": [
            "X",
            "y",
            "center",
            "force_finite"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.r_regression",
        "name": "r_regression",
        "params": [
            "X",
            "y",
            "center",
            "force_finite"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.mutual_info_classif",
        "name": "mutual_info_classif",
        "params": [
            "X",
            "y",
            "discrete_features",
            "n_neighbors",
            "copy",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.feature_selection.mutual_info_regression",
        "name": "mutual_info_regression",
        "params": [
            "X",
            "y",
            "discrete_features",
            "n_neighbors",
            "copy",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.GaussianProcessClassifier",
        "name": "GaussianProcessClassifier",
        "params": [
            "kernel",
            "optimizer",
            "n_restarts_optimizer",
            "max_iter_predict",
            "warm_start",
            "copy_X_train",
            "random_state",
            "multi_class",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.GaussianProcessRegressor",
        "name": "GaussianProcessRegressor",
        "params": [
            "kernel",
            "alpha",
            "optimizer",
            "n_restarts_optimizer",
            "normalize_y",
            "copy_X_train",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.CompoundKernel",
        "name": "CompoundKernel",
        "params": [
            "kernels"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.ConstantKernel",
        "name": "ConstantKernel",
        "params": [
            "constant_value",
            "constant_value_bounds"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.DotProduct",
        "name": "DotProduct",
        "params": [
            "sigma_0",
            "sigma_0_bounds"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.ExpSineSquared",
        "name": "ExpSineSquared",
        "params": [
            "length_scale",
            "periodicity",
            "length_scale_bounds",
            "periodicity_bounds"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Exponentiation",
        "name": "Exponentiation",
        "params": [
            "kernel",
            "exponent"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Hyperparameter",
        "name": "Hyperparameter",
        "params": [
            "name",
            "value_type",
            "bounds",
            "n_elements",
            "fixed"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Kernel",
        "name": "Kernel",
        "params": []
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Matern",
        "name": "Matern",
        "params": [
            "length_scale",
            "length_scale_bounds",
            "nu"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.PairwiseKernel",
        "name": "PairwiseKernel",
        "params": [
            "gamma",
            "gamma_bounds",
            "metric",
            "pairwise_kernels_kwargs"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Product",
        "name": "Product",
        "params": [
            "k1",
            "k2"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.RBF",
        "name": "RBF",
        "params": [
            "length_scale",
            "length_scale_bounds"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.RationalQuadratic",
        "name": "RationalQuadratic",
        "params": [
            "length_scale",
            "alpha",
            "length_scale_bounds",
            "alpha_bounds"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Sum",
        "name": "Sum",
        "params": [
            "k1",
            "k2"
        ]
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.WhiteKernel",
        "name": "WhiteKernel",
        "params": [
            "noise_level",
            "noise_level_bounds"
        ]
    },
    {
        "full_name": "sklearn.impute.SimpleImputer",
        "name": "SimpleImputer",
        "params": [
            "missing_values",
            "strategy",
            "fill_value",
            "verbose",
            "copy",
            "add_indicator"
        ]
    },
    {
        "full_name": "sklearn.impute.IterativeImputer",
        "name": "IterativeImputer",
        "params": [
            "estimator",
            "missing_values",
            "sample_posterior",
            "max_iter",
            "tol",
            "n_nearest_features",
            "initial_strategy",
            "imputation_order",
            "skip_complete",
            "min_value",
            "max_value",
            "verbose",
            "random_state",
            "add_indicator"
        ]
    },
    {
        "full_name": "sklearn.impute.MissingIndicator",
        "name": "MissingIndicator",
        "params": [
            "missing_values",
            "features",
            "sparse",
            "error_on_new"
        ]
    },
    {
        "full_name": "sklearn.impute.KNNImputer",
        "name": "KNNImputer",
        "params": [
            "missing_values",
            "n_neighbors",
            "weights",
            "metric",
            "copy",
            "add_indicator"
        ]
    },
    {
        "full_name": "sklearn.inspection.partial_dependence",
        "name": "partial_dependence",
        "params": [
            "estimator",
            "X",
            "features",
            "response_method",
            "percentiles",
            "grid_resolution",
            "method",
            "kind"
        ]
    },
    {
        "full_name": "sklearn.inspection.permutation_importance",
        "name": "permutation_importance",
        "params": [
            "estimator",
            "X",
            "y",
            "scoring",
            "n_repeats",
            "n_jobs",
            "random_state",
            "sample_weight",
            "max_samples"
        ]
    },
    {
        "full_name": "sklearn.inspection.DecisionBoundaryDisplay",
        "name": "DecisionBoundaryDisplay",
        "params": [
            "xx0",
            "xx1",
            "response",
            "xlabel",
            "ylabel"
        ]
    },
    {
        "full_name": "sklearn.inspection.PartialDependenceDisplay",
        "name": "PartialDependenceDisplay",
        "params": [
            "pd_results",
            "features",
            "feature_names",
            "target_idx",
            "deciles",
            "pdp_lim",
            "kind",
            "subsample",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.inspection.plot_partial_dependence",
        "name": "plot_partial_dependence",
        "params": [
            "estimator",
            "X",
            "features",
            "feature_names",
            "target",
            "response_method",
            "n_cols",
            "grid_resolution",
            "percentiles",
            "method",
            "n_jobs",
            "verbose",
            "line_kw",
            "ice_lines_kw",
            "pd_line_kw",
            "contour_kw",
            "ax",
            "kind",
            "subsample",
            "random_state",
            "centered"
        ]
    },
    {
        "full_name": "sklearn.isotonic.IsotonicRegression",
        "name": "IsotonicRegression",
        "params": [
            "y_min",
            "y_max",
            "increasing",
            "out_of_bounds"
        ]
    },
    {
        "full_name": "sklearn.isotonic.check_increasing",
        "name": "check_increasing",
        "params": [
            "x",
            "y"
        ]
    },
    {
        "full_name": "sklearn.isotonic.isotonic_regression",
        "name": "isotonic_regression",
        "params": [
            "y",
            "sample_weight",
            "y_min",
            "y_max",
            "increasing"
        ]
    },
    {
        "full_name": "sklearn.kernel_approximation.AdditiveChi2Sampler",
        "name": "AdditiveChi2Sampler",
        "params": [
            "sample_steps",
            "sample_interval"
        ]
    },
    {
        "full_name": "sklearn.kernel_approximation.Nystroem",
        "name": "Nystroem",
        "params": [
            "kernel",
            "gamma",
            "coef0",
            "degree",
            "kernel_params",
            "n_components",
            "random_state",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.kernel_approximation.PolynomialCountSketch",
        "name": "PolynomialCountSketch",
        "params": [
            "gamma",
            "degree",
            "coef0",
            "n_components",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.kernel_approximation.RBFSampler",
        "name": "RBFSampler",
        "params": [
            "gamma",
            "n_components",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.kernel_approximation.SkewedChi2Sampler",
        "name": "SkewedChi2Sampler",
        "params": [
            "skewedness",
            "n_components",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.kernel_ridge.KernelRidge",
        "name": "KernelRidge",
        "params": [
            "alpha",
            "kernel",
            "gamma",
            "degree",
            "coef0",
            "kernel_params"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LogisticRegression",
        "name": "LogisticRegression",
        "params": [
            "penalty",
            "dual",
            "tol",
            "C",
            "fit_intercept",
            "intercept_scaling",
            "class_weight",
            "random_state",
            "solver",
            "max_iter",
            "multi_class",
            "verbose",
            "warm_start",
            "n_jobs",
            "l1_ratio"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LogisticRegressionCV",
        "name": "LogisticRegressionCV",
        "params": [
            "Cs",
            "fit_intercept",
            "cv",
            "dual",
            "penalty",
            "scoring",
            "solver",
            "tol",
            "max_iter",
            "class_weight",
            "n_jobs",
            "verbose",
            "refit",
            "intercept_scaling",
            "multi_class",
            "random_state",
            "l1_ratios"
        ]
    },
    {
        "full_name": "sklearn.linear_model.PassiveAggressiveClassifier",
        "name": "PassiveAggressiveClassifier",
        "params": [
            "C",
            "fit_intercept",
            "max_iter",
            "tol",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "shuffle",
            "verbose",
            "loss",
            "n_jobs",
            "random_state",
            "warm_start",
            "class_weight",
            "average"
        ]
    },
    {
        "full_name": "sklearn.linear_model.Perceptron",
        "name": "Perceptron",
        "params": [
            "penalty",
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "eta0",
            "n_jobs",
            "random_state",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "class_weight",
            "warm_start"
        ]
    },
    {
        "full_name": "sklearn.linear_model.RidgeClassifier",
        "name": "RidgeClassifier",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "class_weight",
            "solver",
            "positive",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.linear_model.RidgeClassifierCV",
        "name": "RidgeClassifierCV",
        "params": [
            "alphas",
            "fit_intercept",
            "normalize",
            "scoring",
            "cv",
            "class_weight",
            "store_cv_values"
        ]
    },
    {
        "full_name": "sklearn.linear_model.SGDClassifier",
        "name": "SGDClassifier",
        "params": [
            "loss",
            "penalty",
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "epsilon",
            "n_jobs",
            "random_state",
            "learning_rate",
            "eta0",
            "power_t",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "class_weight",
            "warm_start",
            "average"
        ]
    },
    {
        "full_name": "sklearn.linear_model.SGDOneClassSVM",
        "name": "SGDOneClassSVM",
        "params": [
            "nu",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "random_state",
            "learning_rate",
            "eta0",
            "power_t",
            "warm_start",
            "average"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LinearRegression",
        "name": "LinearRegression",
        "params": [
            "fit_intercept",
            "normalize",
            "copy_X",
            "n_jobs",
            "positive"
        ]
    },
    {
        "full_name": "sklearn.linear_model.Ridge",
        "name": "Ridge",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "solver",
            "positive",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.linear_model.RidgeCV",
        "name": "RidgeCV",
        "params": [
            "alphas",
            "fit_intercept",
            "normalize",
            "scoring",
            "cv",
            "gcv_mode",
            "store_cv_values",
            "alpha_per_target"
        ]
    },
    {
        "full_name": "sklearn.linear_model.SGDRegressor",
        "name": "SGDRegressor",
        "params": [
            "loss",
            "penalty",
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "epsilon",
            "random_state",
            "learning_rate",
            "eta0",
            "power_t",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "warm_start",
            "average"
        ]
    },
    {
        "full_name": "sklearn.linear_model.ElasticNet",
        "name": "ElasticNet",
        "params": [
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "normalize",
            "precompute",
            "max_iter",
            "copy_X",
            "tol",
            "warm_start",
            "positive",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.ElasticNetCV",
        "name": "ElasticNetCV",
        "params": [
            "l1_ratio",
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "precompute",
            "max_iter",
            "tol",
            "cv",
            "copy_X",
            "verbose",
            "n_jobs",
            "positive",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.Lars",
        "name": "Lars",
        "params": [
            "fit_intercept",
            "verbose",
            "normalize",
            "precompute",
            "n_nonzero_coefs",
            "eps",
            "copy_X",
            "fit_path",
            "jitter",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LarsCV",
        "name": "LarsCV",
        "params": [
            "fit_intercept",
            "verbose",
            "max_iter",
            "normalize",
            "precompute",
            "cv",
            "max_n_alphas",
            "n_jobs",
            "eps",
            "copy_X"
        ]
    },
    {
        "full_name": "sklearn.linear_model.Lasso",
        "name": "Lasso",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "precompute",
            "copy_X",
            "max_iter",
            "tol",
            "warm_start",
            "positive",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LassoCV",
        "name": "LassoCV",
        "params": [
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "precompute",
            "max_iter",
            "tol",
            "copy_X",
            "cv",
            "verbose",
            "n_jobs",
            "positive",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LassoLars",
        "name": "LassoLars",
        "params": [
            "alpha",
            "fit_intercept",
            "verbose",
            "normalize",
            "precompute",
            "max_iter",
            "eps",
            "copy_X",
            "fit_path",
            "positive",
            "jitter",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LassoLarsCV",
        "name": "LassoLarsCV",
        "params": [
            "fit_intercept",
            "verbose",
            "max_iter",
            "normalize",
            "precompute",
            "cv",
            "max_n_alphas",
            "n_jobs",
            "eps",
            "copy_X",
            "positive"
        ]
    },
    {
        "full_name": "sklearn.linear_model.LassoLarsIC",
        "name": "LassoLarsIC",
        "params": [
            "criterion",
            "fit_intercept",
            "verbose",
            "normalize",
            "precompute",
            "max_iter",
            "eps",
            "copy_X",
            "positive",
            "noise_variance"
        ]
    },
    {
        "full_name": "sklearn.linear_model.OrthogonalMatchingPursuit",
        "name": "OrthogonalMatchingPursuit",
        "params": [
            "n_nonzero_coefs",
            "tol",
            "fit_intercept",
            "normalize",
            "precompute"
        ]
    },
    {
        "full_name": "sklearn.linear_model.OrthogonalMatchingPursuitCV",
        "name": "OrthogonalMatchingPursuitCV",
        "params": [
            "copy",
            "fit_intercept",
            "normalize",
            "max_iter",
            "cv",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.ARDRegression",
        "name": "ARDRegression",
        "params": [
            "n_iter",
            "tol",
            "alpha_1",
            "alpha_2",
            "lambda_1",
            "lambda_2",
            "compute_score",
            "threshold_lambda",
            "fit_intercept",
            "normalize",
            "copy_X",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.BayesianRidge",
        "name": "BayesianRidge",
        "params": [
            "n_iter",
            "tol",
            "alpha_1",
            "alpha_2",
            "lambda_1",
            "lambda_2",
            "alpha_init",
            "lambda_init",
            "compute_score",
            "fit_intercept",
            "normalize",
            "copy_X",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskElasticNet",
        "name": "MultiTaskElasticNet",
        "params": [
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "warm_start",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskElasticNetCV",
        "name": "MultiTaskElasticNetCV",
        "params": [
            "l1_ratio",
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "max_iter",
            "tol",
            "cv",
            "copy_X",
            "verbose",
            "n_jobs",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskLasso",
        "name": "MultiTaskLasso",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "warm_start",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskLassoCV",
        "name": "MultiTaskLassoCV",
        "params": [
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "max_iter",
            "tol",
            "copy_X",
            "cv",
            "verbose",
            "n_jobs",
            "random_state",
            "selection"
        ]
    },
    {
        "full_name": "sklearn.linear_model.HuberRegressor",
        "name": "HuberRegressor",
        "params": [
            "epsilon",
            "max_iter",
            "alpha",
            "warm_start",
            "fit_intercept",
            "tol"
        ]
    },
    {
        "full_name": "sklearn.linear_model.QuantileRegressor",
        "name": "QuantileRegressor",
        "params": [
            "quantile",
            "alpha",
            "fit_intercept",
            "solver",
            "solver_options"
        ]
    },
    {
        "full_name": "sklearn.linear_model.RANSACRegressor",
        "name": "RANSACRegressor",
        "params": [
            "estimator",
            "min_samples",
            "residual_threshold",
            "is_data_valid",
            "is_model_valid",
            "max_trials",
            "max_skips",
            "stop_n_inliers",
            "stop_score",
            "stop_probability",
            "loss",
            "random_state",
            "base_estimator"
        ]
    },
    {
        "full_name": "sklearn.linear_model.TheilSenRegressor",
        "name": "TheilSenRegressor",
        "params": [
            "fit_intercept",
            "copy_X",
            "max_subpopulation",
            "n_subsamples",
            "max_iter",
            "tol",
            "random_state",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.PoissonRegressor",
        "name": "PoissonRegressor",
        "params": [
            "alpha",
            "fit_intercept",
            "max_iter",
            "tol",
            "warm_start",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.TweedieRegressor",
        "name": "TweedieRegressor",
        "params": [
            "power",
            "alpha",
            "fit_intercept",
            "link",
            "max_iter",
            "tol",
            "warm_start",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.GammaRegressor",
        "name": "GammaRegressor",
        "params": [
            "alpha",
            "fit_intercept",
            "max_iter",
            "tol",
            "warm_start",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.linear_model.PassiveAggressiveRegressor",
        "name": "PassiveAggressiveRegressor",
        "params": [
            "C",
            "fit_intercept",
            "max_iter",
            "tol",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "shuffle",
            "verbose",
            "loss",
            "epsilon",
            "random_state",
            "warm_start",
            "average"
        ]
    },
    {
        "full_name": "sklearn.linear_model.enet_path",
        "name": "enet_path",
        "params": [
            "X",
            "y",
            "l1_ratio",
            "eps",
            "n_alphas",
            "alphas",
            "precompute",
            "Xy",
            "copy_X",
            "coef_init",
            "verbose",
            "return_n_iter",
            "positive",
            "check_input",
            "**params"
        ]
    },
    {
        "full_name": "sklearn.linear_model.lars_path",
        "name": "lars_path",
        "params": [
            "X",
            "y",
            "Xy",
            "Gram",
            "max_iter",
            "alpha_min",
            "method",
            "copy_X",
            "eps",
            "copy_Gram",
            "verbose",
            "return_path",
            "return_n_iter",
            "positive"
        ]
    },
    {
        "full_name": "sklearn.linear_model.lars_path_gram",
        "name": "lars_path_gram",
        "params": [
            "Xy",
            "Gram",
            "n_samples",
            "max_iter",
            "alpha_min",
            "method",
            "copy_X",
            "eps",
            "copy_Gram",
            "verbose",
            "return_path",
            "return_n_iter",
            "positive"
        ]
    },
    {
        "full_name": "sklearn.linear_model.lasso_path",
        "name": "lasso_path",
        "params": [
            "X",
            "y",
            "eps",
            "n_alphas",
            "alphas",
            "precompute",
            "Xy",
            "copy_X",
            "coef_init",
            "verbose",
            "return_n_iter",
            "positive",
            "**params"
        ]
    },
    {
        "full_name": "sklearn.linear_model.orthogonal_mp",
        "name": "orthogonal_mp",
        "params": [
            "X",
            "y",
            "n_nonzero_coefs",
            "tol",
            "precompute",
            "copy_X",
            "return_path",
            "return_n_iter"
        ]
    },
    {
        "full_name": "sklearn.linear_model.orthogonal_mp_gram",
        "name": "orthogonal_mp_gram",
        "params": [
            "Gram",
            "Xy",
            "n_nonzero_coefs",
            "tol",
            "norms_squared",
            "copy_Gram",
            "copy_Xy",
            "return_path",
            "return_n_iter"
        ]
    },
    {
        "full_name": "sklearn.linear_model.ridge_regression",
        "name": "ridge_regression",
        "params": [
            "X",
            "y",
            "alpha",
            "sample_weight",
            "solver",
            "max_iter",
            "tol",
            "verbose",
            "positive",
            "random_state",
            "return_n_iter",
            "return_intercept",
            "check_input"
        ]
    },
    {
        "full_name": "sklearn.manifold.Isomap",
        "name": "Isomap",
        "params": [
            "n_neighbors",
            "radius",
            "n_components",
            "eigen_solver",
            "tol",
            "max_iter",
            "path_method",
            "neighbors_algorithm",
            "n_jobs",
            "metric",
            "p",
            "metric_params"
        ]
    },
    {
        "full_name": "sklearn.manifold.LocallyLinearEmbedding",
        "name": "LocallyLinearEmbedding",
        "params": [
            "n_neighbors",
            "n_components",
            "reg",
            "eigen_solver",
            "tol",
            "max_iter",
            "method",
            "hessian_tol",
            "modified_tol",
            "neighbors_algorithm",
            "random_state",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.manifold.MDS",
        "name": "MDS",
        "params": [
            "n_components",
            "metric",
            "n_init",
            "max_iter",
            "verbose",
            "eps",
            "n_jobs",
            "random_state",
            "dissimilarity"
        ]
    },
    {
        "full_name": "sklearn.manifold.SpectralEmbedding",
        "name": "SpectralEmbedding",
        "params": [
            "n_components",
            "affinity",
            "gamma",
            "random_state",
            "eigen_solver",
            "n_neighbors",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.manifold.TSNE",
        "name": "TSNE",
        "params": [
            "n_components",
            "perplexity",
            "early_exaggeration",
            "learning_rate",
            "n_iter",
            "n_iter_without_progress",
            "min_grad_norm",
            "metric",
            "metric_params",
            "init",
            "verbose",
            "random_state",
            "method",
            "angle",
            "n_jobs",
            "square_distances"
        ]
    },
    {
        "full_name": "sklearn.manifold.locally_linear_embedding",
        "name": "locally_linear_embedding",
        "params": [
            "X",
            "n_neighbors",
            "n_components",
            "reg",
            "eigen_solver",
            "tol",
            "max_iter",
            "method",
            "hessian_tol",
            "modified_tol",
            "random_state",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.manifold.smacof",
        "name": "smacof",
        "params": [
            "dissimilarities",
            "metric",
            "n_components",
            "init",
            "n_init",
            "n_jobs",
            "max_iter",
            "verbose",
            "eps",
            "random_state",
            "return_n_iter"
        ]
    },
    {
        "full_name": "sklearn.manifold.spectral_embedding",
        "name": "spectral_embedding",
        "params": [
            "adjacency",
            "n_components",
            "eigen_solver",
            "random_state",
            "eigen_tol",
            "norm_laplacian",
            "drop_first"
        ]
    },
    {
        "full_name": "sklearn.manifold.trustworthiness",
        "name": "trustworthiness",
        "params": [
            "X",
            "X_embedded",
            "n_neighbors",
            "metric"
        ]
    },
    {
        "full_name": "sklearn.metrics.check_scoring",
        "name": "check_scoring",
        "params": [
            "estimator",
            "scoring",
            "allow_none"
        ]
    },
    {
        "full_name": "sklearn.metrics.get_scorer",
        "name": "get_scorer",
        "params": [
            "scoring"
        ]
    },
    {
        "full_name": "sklearn.metrics.get_scorer_names",
        "name": "get_scorer_names",
        "params": []
    },
    {
        "full_name": "sklearn.metrics.make_scorer",
        "name": "make_scorer",
        "params": [
            "score_func",
            "greater_is_better",
            "needs_proba",
            "needs_threshold",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.metrics.accuracy_score",
        "name": "accuracy_score",
        "params": [
            "y_true",
            "y_pred",
            "normalize",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.auc",
        "name": "auc",
        "params": [
            "x",
            "y"
        ]
    },
    {
        "full_name": "sklearn.metrics.average_precision_score",
        "name": "average_precision_score",
        "params": [
            "y_true",
            "y_score",
            "average",
            "pos_label",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.balanced_accuracy_score",
        "name": "balanced_accuracy_score",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "adjusted"
        ]
    },
    {
        "full_name": "sklearn.metrics.brier_score_loss",
        "name": "brier_score_loss",
        "params": [
            "y_true",
            "y_prob",
            "sample_weight",
            "pos_label"
        ]
    },
    {
        "full_name": "sklearn.metrics.classification_report",
        "name": "classification_report",
        "params": [
            "y_true",
            "y_pred",
            "labels",
            "target_names",
            "sample_weight",
            "digits",
            "output_dict",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.cohen_kappa_score",
        "name": "cohen_kappa_score",
        "params": [
            "y1",
            "y2",
            "labels",
            "weights",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.confusion_matrix",
        "name": "confusion_matrix",
        "params": [
            "y_true",
            "y_pred",
            "labels",
            "sample_weight",
            "normalize"
        ]
    },
    {
        "full_name": "sklearn.metrics.dcg_score",
        "name": "dcg_score",
        "params": [
            "y_true",
            "y_score",
            "k",
            "log_base",
            "sample_weight",
            "ignore_ties"
        ]
    },
    {
        "full_name": "sklearn.metrics.det_curve",
        "name": "det_curve",
        "params": [
            "y_true",
            "y_score",
            "pos_label",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.f1_score",
        "name": "f1_score",
        "params": [
            "y_true",
            "y_pred",
            "labels",
            "pos_label",
            "average",
            "sample_weight",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.fbeta_score",
        "name": "fbeta_score",
        "params": [
            "y_true",
            "y_pred",
            "beta",
            "labels",
            "pos_label",
            "average",
            "sample_weight",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.hamming_loss",
        "name": "hamming_loss",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.hinge_loss",
        "name": "hinge_loss",
        "params": [
            "y_true",
            "pred_decision",
            "labels",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.jaccard_score",
        "name": "jaccard_score",
        "params": [
            "y_true",
            "y_pred",
            "labels",
            "pos_label",
            "average",
            "sample_weight",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.log_loss",
        "name": "log_loss",
        "params": [
            "y_true",
            "y_pred",
            "eps",
            "normalize",
            "sample_weight",
            "labels"
        ]
    },
    {
        "full_name": "sklearn.metrics.matthews_corrcoef",
        "name": "matthews_corrcoef",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.multilabel_confusion_matrix",
        "name": "multilabel_confusion_matrix",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "labels",
            "samplewise"
        ]
    },
    {
        "full_name": "sklearn.metrics.ndcg_score",
        "name": "ndcg_score",
        "params": [
            "y_true",
            "y_score",
            "k",
            "sample_weight",
            "ignore_ties"
        ]
    },
    {
        "full_name": "sklearn.metrics.precision_recall_curve",
        "name": "precision_recall_curve",
        "params": [
            "y_true",
            "probas_pred",
            "pos_label",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.precision_recall_fscore_support",
        "name": "precision_recall_fscore_support",
        "params": [
            "y_true",
            "y_pred",
            "beta",
            "labels",
            "pos_label",
            "average",
            "warn_for",
            "sample_weight",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.precision_score",
        "name": "precision_score",
        "params": [
            "y_true",
            "y_pred",
            "labels",
            "pos_label",
            "average",
            "sample_weight",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.recall_score",
        "name": "recall_score",
        "params": [
            "y_true",
            "y_pred",
            "labels",
            "pos_label",
            "average",
            "sample_weight",
            "zero_division"
        ]
    },
    {
        "full_name": "sklearn.metrics.roc_auc_score",
        "name": "roc_auc_score",
        "params": [
            "y_true",
            "y_score",
            "average",
            "sample_weight",
            "max_fpr",
            "multi_class",
            "labels"
        ]
    },
    {
        "full_name": "sklearn.metrics.roc_curve",
        "name": "roc_curve",
        "params": [
            "y_true",
            "y_score",
            "pos_label",
            "sample_weight",
            "drop_intermediate"
        ]
    },
    {
        "full_name": "sklearn.metrics.top_k_accuracy_score",
        "name": "top_k_accuracy_score",
        "params": [
            "y_true",
            "y_score",
            "k",
            "normalize",
            "sample_weight",
            "labels"
        ]
    },
    {
        "full_name": "sklearn.metrics.zero_one_loss",
        "name": "zero_one_loss",
        "params": [
            "y_true",
            "y_pred",
            "normalize",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.explained_variance_score",
        "name": "explained_variance_score",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput",
            "force_finite"
        ]
    },
    {
        "full_name": "sklearn.metrics.max_error",
        "name": "max_error",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_absolute_error",
        "name": "mean_absolute_error",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_squared_error",
        "name": "mean_squared_error",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput",
            "squared"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_squared_log_error",
        "name": "mean_squared_log_error",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput",
            "squared"
        ]
    },
    {
        "full_name": "sklearn.metrics.median_absolute_error",
        "name": "median_absolute_error",
        "params": [
            "y_true",
            "y_pred",
            "multioutput",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_absolute_percentage_error",
        "name": "mean_absolute_percentage_error",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput"
        ]
    },
    {
        "full_name": "sklearn.metrics.r2_score",
        "name": "r2_score",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput",
            "force_finite"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_poisson_deviance",
        "name": "mean_poisson_deviance",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_gamma_deviance",
        "name": "mean_gamma_deviance",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_tweedie_deviance",
        "name": "mean_tweedie_deviance",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "power"
        ]
    },
    {
        "full_name": "sklearn.metrics.d2_tweedie_score",
        "name": "d2_tweedie_score",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "power"
        ]
    },
    {
        "full_name": "sklearn.metrics.mean_pinball_loss",
        "name": "mean_pinball_loss",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "alpha",
            "multioutput"
        ]
    },
    {
        "full_name": "sklearn.metrics.d2_pinball_score",
        "name": "d2_pinball_score",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "alpha",
            "multioutput"
        ]
    },
    {
        "full_name": "sklearn.metrics.d2_absolute_error_score",
        "name": "d2_absolute_error_score",
        "params": [
            "y_true",
            "y_pred",
            "sample_weight",
            "multioutput"
        ]
    },
    {
        "full_name": "sklearn.metrics.coverage_error",
        "name": "coverage_error",
        "params": [
            "y_true",
            "y_score",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.label_ranking_average_precision_score",
        "name": "label_ranking_average_precision_score",
        "params": [
            "y_true",
            "y_score",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.label_ranking_loss",
        "name": "label_ranking_loss",
        "params": [
            "y_true",
            "y_score",
            "sample_weight"
        ]
    },
    {
        "full_name": "sklearn.metrics.adjusted_mutual_info_score",
        "name": "adjusted_mutual_info_score",
        "params": [
            "labels_true",
            "labels_pred",
            "average_method"
        ]
    },
    {
        "full_name": "sklearn.metrics.adjusted_rand_score",
        "name": "adjusted_rand_score",
        "params": [
            "labels_true",
            "labels_pred"
        ]
    },
    {
        "full_name": "sklearn.metrics.calinski_harabasz_score",
        "name": "calinski_harabasz_score",
        "params": [
            "X",
            "labels"
        ]
    },
    {
        "full_name": "sklearn.metrics.davies_bouldin_score",
        "name": "davies_bouldin_score",
        "params": [
            "X",
            "labels"
        ]
    },
    {
        "full_name": "sklearn.metrics.completeness_score",
        "name": "completeness_score",
        "params": [
            "labels_true",
            "labels_pred"
        ]
    },
    {
        "full_name": "sklearn.metrics.cluster.contingency_matrix",
        "name": "contingency_matrix",
        "params": [
            "labels_true",
            "labels_pred",
            "eps",
            "sparse",
            "dtype"
        ]
    },
    {
        "full_name": "sklearn.metrics.cluster.pair_confusion_matrix",
        "name": "pair_confusion_matrix",
        "params": [
            "labels_true",
            "labels_pred"
        ]
    },
    {
        "full_name": "sklearn.metrics.fowlkes_mallows_score",
        "name": "fowlkes_mallows_score",
        "params": [
            "labels_true",
            "labels_pred",
            "sparse"
        ]
    },
    {
        "full_name": "sklearn.metrics.homogeneity_completeness_v_measure",
        "name": "homogeneity_completeness_v_measure",
        "params": [
            "labels_true",
            "labels_pred",
            "beta"
        ]
    },
    {
        "full_name": "sklearn.metrics.homogeneity_score",
        "name": "homogeneity_score",
        "params": [
            "labels_true",
            "labels_pred"
        ]
    },
    {
        "full_name": "sklearn.metrics.mutual_info_score",
        "name": "mutual_info_score",
        "params": [
            "labels_true",
            "labels_pred",
            "contingency"
        ]
    },
    {
        "full_name": "sklearn.metrics.normalized_mutual_info_score",
        "name": "normalized_mutual_info_score",
        "params": [
            "labels_true",
            "labels_pred",
            "average_method"
        ]
    },
    {
        "full_name": "sklearn.metrics.rand_score",
        "name": "rand_score",
        "params": [
            "labels_true",
            "labels_pred"
        ]
    },
    {
        "full_name": "sklearn.metrics.silhouette_score",
        "name": "silhouette_score",
        "params": [
            "X",
            "labels",
            "metric",
            "sample_size",
            "random_state",
            "**kwds"
        ]
    },
    {
        "full_name": "sklearn.metrics.silhouette_samples",
        "name": "silhouette_samples",
        "params": [
            "X",
            "labels",
            "metric",
            "**kwds"
        ]
    },
    {
        "full_name": "sklearn.metrics.v_measure_score",
        "name": "v_measure_score",
        "params": [
            "labels_true",
            "labels_pred",
            "beta"
        ]
    },
    {
        "full_name": "sklearn.metrics.consensus_score",
        "name": "consensus_score",
        "params": [
            "a",
            "b",
            "similarity"
        ]
    },
    {
        "full_name": "sklearn.metrics.DistanceMetric",
        "name": "DistanceMetric",
        "params": []
    },
    {
        "full_name": "sklearn.metrics.pairwise.additive_chi2_kernel",
        "name": "additive_chi2_kernel",
        "params": [
            "X",
            "Y"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.chi2_kernel",
        "name": "chi2_kernel",
        "params": [
            "X",
            "Y",
            "gamma"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.cosine_similarity",
        "name": "cosine_similarity",
        "params": [
            "X",
            "Y",
            "dense_output"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.cosine_distances",
        "name": "cosine_distances",
        "params": [
            "X",
            "Y"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.distance_metrics",
        "name": "distance_metrics",
        "params": []
    },
    {
        "full_name": "sklearn.metrics.pairwise.euclidean_distances",
        "name": "euclidean_distances",
        "params": [
            "X",
            "Y",
            "Y_norm_squared",
            "squared",
            "X_norm_squared"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.haversine_distances",
        "name": "haversine_distances",
        "params": [
            "X",
            "Y"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.kernel_metrics",
        "name": "kernel_metrics",
        "params": []
    },
    {
        "full_name": "sklearn.metrics.pairwise.laplacian_kernel",
        "name": "laplacian_kernel",
        "params": [
            "X",
            "Y",
            "gamma"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.linear_kernel",
        "name": "linear_kernel",
        "params": [
            "X",
            "Y",
            "dense_output"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.manhattan_distances",
        "name": "manhattan_distances",
        "params": [
            "X",
            "Y",
            "sum_over_features"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.nan_euclidean_distances",
        "name": "nan_euclidean_distances",
        "params": [
            "X",
            "Y",
            "squared",
            "missing_values",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.pairwise_kernels",
        "name": "pairwise_kernels",
        "params": [
            "X",
            "Y",
            "metric",
            "filter_params",
            "n_jobs",
            "**kwds"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.polynomial_kernel",
        "name": "polynomial_kernel",
        "params": [
            "X",
            "Y",
            "degree",
            "gamma",
            "coef0"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.rbf_kernel",
        "name": "rbf_kernel",
        "params": [
            "X",
            "Y",
            "gamma"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.sigmoid_kernel",
        "name": "sigmoid_kernel",
        "params": [
            "X",
            "Y",
            "gamma",
            "coef0"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_euclidean_distances",
        "name": "paired_euclidean_distances",
        "params": [
            "X",
            "Y"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_manhattan_distances",
        "name": "paired_manhattan_distances",
        "params": [
            "X",
            "Y"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_cosine_distances",
        "name": "paired_cosine_distances",
        "params": [
            "X",
            "Y"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_distances",
        "name": "paired_distances",
        "params": [
            "X",
            "Y",
            "metric",
            "**kwds"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances",
        "name": "pairwise_distances",
        "params": [
            "X",
            "Y",
            "metric",
            "n_jobs",
            "force_all_finite",
            "**kwds"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances_argmin",
        "name": "pairwise_distances_argmin",
        "params": [
            "X",
            "Y",
            "axis",
            "metric",
            "metric_kwargs"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances_argmin_min",
        "name": "pairwise_distances_argmin_min",
        "params": [
            "X",
            "Y",
            "axis",
            "metric",
            "metric_kwargs"
        ]
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances_chunked",
        "name": "pairwise_distances_chunked",
        "params": [
            "X",
            "Y",
            "reduce_func",
            "metric",
            "n_jobs",
            "working_memory",
            "**kwds"
        ]
    },
    {
        "full_name": "sklearn.metrics.plot_confusion_matrix",
        "name": "plot_confusion_matrix",
        "params": [
            "estimator",
            "X",
            "y_true",
            "labels",
            "sample_weight",
            "normalize",
            "display_labels",
            "include_values",
            "xticks_rotation",
            "values_format",
            "cmap",
            "ax",
            "colorbar"
        ]
    },
    {
        "full_name": "sklearn.metrics.plot_det_curve",
        "name": "plot_det_curve",
        "params": [
            "estimator",
            "X",
            "y",
            "sample_weight",
            "response_method",
            "name",
            "ax",
            "pos_label",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.metrics.plot_precision_recall_curve",
        "name": "plot_precision_recall_curve",
        "params": [
            "estimator",
            "X",
            "y",
            "sample_weight",
            "response_method",
            "name",
            "ax",
            "pos_label",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.metrics.plot_roc_curve",
        "name": "plot_roc_curve",
        "params": [
            "estimator",
            "X",
            "y",
            "sample_weight",
            "drop_intermediate",
            "response_method",
            "name",
            "ax",
            "pos_label",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.metrics.ConfusionMatrixDisplay",
        "name": "ConfusionMatrixDisplay",
        "params": [
            "confusion_matrix",
            "display_labels"
        ]
    },
    {
        "full_name": "sklearn.metrics.DetCurveDisplay",
        "name": "DetCurveDisplay",
        "params": [
            "fpr",
            "fnr",
            "estimator_name",
            "pos_label"
        ]
    },
    {
        "full_name": "sklearn.metrics.PrecisionRecallDisplay",
        "name": "PrecisionRecallDisplay",
        "params": [
            "precision",
            "recall",
            "average_precision",
            "estimator_name",
            "pos_label"
        ]
    },
    {
        "full_name": "sklearn.metrics.RocCurveDisplay",
        "name": "RocCurveDisplay",
        "params": [
            "fpr",
            "tpr",
            "roc_auc",
            "estimator_name",
            "pos_label"
        ]
    },
    {
        "full_name": "sklearn.calibration.CalibrationDisplay",
        "name": "CalibrationDisplay",
        "params": [
            "prob_true",
            "prob_pred",
            "y_prob",
            "estimator_name",
            "pos_label"
        ]
    },
    {
        "full_name": "sklearn.mixture.BayesianGaussianMixture",
        "name": "BayesianGaussianMixture",
        "params": [
            "n_components",
            "covariance_type",
            "tol",
            "reg_covar",
            "max_iter",
            "n_init",
            "init_params",
            "weight_concentration_prior_type",
            "weight_concentration_prior",
            "mean_precision_prior",
            "mean_prior",
            "degrees_of_freedom_prior",
            "covariance_prior",
            "random_state",
            "warm_start",
            "verbose",
            "verbose_interval"
        ]
    },
    {
        "full_name": "sklearn.mixture.GaussianMixture",
        "name": "GaussianMixture",
        "params": [
            "n_components",
            "covariance_type",
            "tol",
            "reg_covar",
            "max_iter",
            "n_init",
            "init_params",
            "weights_init",
            "means_init",
            "precisions_init",
            "random_state",
            "warm_start",
            "verbose",
            "verbose_interval"
        ]
    },
    {
        "full_name": "sklearn.model_selection.GroupKFold",
        "name": "GroupKFold",
        "params": [
            "n_splits"
        ]
    },
    {
        "full_name": "sklearn.model_selection.GroupShuffleSplit",
        "name": "GroupShuffleSplit",
        "params": [
            "n_splits",
            "test_size",
            "train_size",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.KFold",
        "name": "KFold",
        "params": [
            "n_splits",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.LeaveOneGroupOut",
        "name": "LeaveOneGroupOut",
        "params": []
    },
    {
        "full_name": "sklearn.model_selection.LeavePGroupsOut",
        "name": "LeavePGroupsOut",
        "params": [
            "n_groups"
        ]
    },
    {
        "full_name": "sklearn.model_selection.LeaveOneOut",
        "name": "LeaveOneOut",
        "params": []
    },
    {
        "full_name": "sklearn.model_selection.LeavePOut",
        "name": "LeavePOut",
        "params": [
            "p"
        ]
    },
    {
        "full_name": "sklearn.model_selection.PredefinedSplit",
        "name": "PredefinedSplit",
        "params": [
            "test_fold"
        ]
    },
    {
        "full_name": "sklearn.model_selection.RepeatedKFold",
        "name": "RepeatedKFold",
        "params": [
            "n_splits",
            "n_repeats",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.RepeatedStratifiedKFold",
        "name": "RepeatedStratifiedKFold",
        "params": [
            "n_splits",
            "n_repeats",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.ShuffleSplit",
        "name": "ShuffleSplit",
        "params": [
            "n_splits",
            "test_size",
            "train_size",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.StratifiedKFold",
        "name": "StratifiedKFold",
        "params": [
            "n_splits",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.StratifiedShuffleSplit",
        "name": "StratifiedShuffleSplit",
        "params": [
            "n_splits",
            "test_size",
            "train_size",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.StratifiedGroupKFold",
        "name": "StratifiedGroupKFold",
        "params": [
            "n_splits",
            "shuffle",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.TimeSeriesSplit",
        "name": "TimeSeriesSplit",
        "params": [
            "n_splits",
            "max_train_size",
            "test_size",
            "gap"
        ]
    },
    {
        "full_name": "sklearn.model_selection.check_cv",
        "name": "check_cv",
        "params": [
            "cv",
            "y",
            "classifier"
        ]
    },
    {
        "full_name": "sklearn.model_selection.train_test_split",
        "name": "train_test_split",
        "params": [
            "*arrays",
            "test_size",
            "train_size",
            "random_state",
            "shuffle",
            "stratify"
        ]
    },
    {
        "full_name": "sklearn.model_selection.GridSearchCV",
        "name": "GridSearchCV",
        "params": [
            "estimator",
            "param_grid",
            "scoring",
            "n_jobs",
            "refit",
            "cv",
            "verbose",
            "pre_dispatch",
            "error_score",
            "return_train_score"
        ]
    },
    {
        "full_name": "sklearn.model_selection.HalvingGridSearchCV",
        "name": "HalvingGridSearchCV",
        "params": [
            "estimator",
            "param_grid",
            "factor",
            "resource",
            "max_resources",
            "min_resources",
            "aggressive_elimination",
            "cv",
            "scoring",
            "refit",
            "error_score",
            "return_train_score",
            "random_state",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.model_selection.ParameterGrid",
        "name": "ParameterGrid",
        "params": [
            "param_grid"
        ]
    },
    {
        "full_name": "sklearn.model_selection.ParameterSampler",
        "name": "ParameterSampler",
        "params": [
            "param_distributions",
            "n_iter",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.model_selection.RandomizedSearchCV",
        "name": "RandomizedSearchCV",
        "params": [
            "estimator",
            "param_distributions",
            "n_iter",
            "scoring",
            "n_jobs",
            "refit",
            "cv",
            "verbose",
            "pre_dispatch",
            "random_state",
            "error_score",
            "return_train_score"
        ]
    },
    {
        "full_name": "sklearn.model_selection.HalvingRandomSearchCV",
        "name": "HalvingRandomSearchCV",
        "params": [
            "estimator",
            "param_distributions",
            "n_candidates",
            "factor",
            "resource",
            "max_resources",
            "min_resources",
            "aggressive_elimination",
            "cv",
            "scoring",
            "refit",
            "error_score",
            "return_train_score",
            "random_state",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.model_selection.cross_validate",
        "name": "cross_validate",
        "params": [
            "estimator",
            "X",
            "y",
            "groups",
            "scoring",
            "cv",
            "n_jobs",
            "verbose",
            "fit_params",
            "pre_dispatch",
            "return_train_score",
            "return_estimator",
            "error_score"
        ]
    },
    {
        "full_name": "sklearn.model_selection.cross_val_predict",
        "name": "cross_val_predict",
        "params": [
            "estimator",
            "X",
            "y",
            "groups",
            "cv",
            "n_jobs",
            "verbose",
            "fit_params",
            "pre_dispatch",
            "method"
        ]
    },
    {
        "full_name": "sklearn.model_selection.cross_val_score",
        "name": "cross_val_score",
        "params": [
            "estimator",
            "X",
            "y",
            "groups",
            "scoring",
            "cv",
            "n_jobs",
            "verbose",
            "fit_params",
            "pre_dispatch",
            "error_score"
        ]
    },
    {
        "full_name": "sklearn.model_selection.learning_curve",
        "name": "learning_curve",
        "params": [
            "estimator",
            "X",
            "y",
            "groups",
            "train_sizes",
            "cv",
            "scoring",
            "exploit_incremental_learning",
            "n_jobs",
            "pre_dispatch",
            "verbose",
            "shuffle",
            "random_state",
            "error_score",
            "return_times",
            "fit_params"
        ]
    },
    {
        "full_name": "sklearn.model_selection.permutation_test_score",
        "name": "permutation_test_score",
        "params": [
            "estimator",
            "X",
            "y",
            "groups",
            "cv",
            "n_permutations",
            "n_jobs",
            "random_state",
            "verbose",
            "scoring",
            "fit_params"
        ]
    },
    {
        "full_name": "sklearn.model_selection.validation_curve",
        "name": "validation_curve",
        "params": [
            "estimator",
            "X",
            "y",
            "param_name",
            "param_range",
            "groups",
            "cv",
            "scoring",
            "n_jobs",
            "pre_dispatch",
            "verbose",
            "error_score",
            "fit_params"
        ]
    },
    {
        "full_name": "sklearn.multiclass.OneVsRestClassifier",
        "name": "OneVsRestClassifier",
        "params": [
            "estimator",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.multiclass.OneVsOneClassifier",
        "name": "OneVsOneClassifier",
        "params": [
            "estimator",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.multiclass.OutputCodeClassifier",
        "name": "OutputCodeClassifier",
        "params": [
            "estimator",
            "code_size",
            "random_state",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.multioutput.ClassifierChain",
        "name": "ClassifierChain",
        "params": [
            "base_estimator",
            "order",
            "cv",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.multioutput.MultiOutputRegressor",
        "name": "MultiOutputRegressor",
        "params": [
            "estimator",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.multioutput.MultiOutputClassifier",
        "name": "MultiOutputClassifier",
        "params": [
            "estimator",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.multioutput.RegressorChain",
        "name": "RegressorChain",
        "params": [
            "base_estimator",
            "order",
            "cv",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.naive_bayes.BernoulliNB",
        "name": "BernoulliNB",
        "params": [
            "alpha",
            "binarize",
            "fit_prior",
            "class_prior"
        ]
    },
    {
        "full_name": "sklearn.naive_bayes.CategoricalNB",
        "name": "CategoricalNB",
        "params": [
            "alpha",
            "fit_prior",
            "class_prior",
            "min_categories"
        ]
    },
    {
        "full_name": "sklearn.naive_bayes.ComplementNB",
        "name": "ComplementNB",
        "params": [
            "alpha",
            "fit_prior",
            "class_prior",
            "norm"
        ]
    },
    {
        "full_name": "sklearn.naive_bayes.GaussianNB",
        "name": "GaussianNB",
        "params": [
            "priors",
            "var_smoothing"
        ]
    },
    {
        "full_name": "sklearn.naive_bayes.MultinomialNB",
        "name": "MultinomialNB",
        "params": [
            "alpha",
            "fit_prior",
            "class_prior"
        ]
    },
    {
        "full_name": "sklearn.neighbors.BallTree",
        "name": "BallTree",
        "params": [
            "X",
            "leaf_size",
            "metric",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.KDTree",
        "name": "KDTree",
        "params": [
            "X",
            "leaf_size",
            "metric",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.KernelDensity",
        "name": "KernelDensity",
        "params": [
            "bandwidth",
            "algorithm",
            "kernel",
            "metric",
            "atol",
            "rtol",
            "breadth_first",
            "leaf_size",
            "metric_params"
        ]
    },
    {
        "full_name": "sklearn.neighbors.KNeighborsClassifier",
        "name": "KNeighborsClassifier",
        "params": [
            "n_neighbors",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "metric_params",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.KNeighborsRegressor",
        "name": "KNeighborsRegressor",
        "params": [
            "n_neighbors",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "metric_params",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.KNeighborsTransformer",
        "name": "KNeighborsTransformer",
        "params": [
            "mode",
            "n_neighbors",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.LocalOutlierFactor",
        "name": "LocalOutlierFactor",
        "params": [
            "n_neighbors",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "contamination",
            "novelty",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.RadiusNeighborsClassifier",
        "name": "RadiusNeighborsClassifier",
        "params": [
            "radius",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "outlier_label",
            "metric_params",
            "n_jobs",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.RadiusNeighborsRegressor",
        "name": "RadiusNeighborsRegressor",
        "params": [
            "radius",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "metric_params",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.RadiusNeighborsTransformer",
        "name": "RadiusNeighborsTransformer",
        "params": [
            "mode",
            "radius",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.NearestCentroid",
        "name": "NearestCentroid",
        "params": [
            "metric",
            "shrink_threshold"
        ]
    },
    {
        "full_name": "sklearn.neighbors.NearestNeighbors",
        "name": "NearestNeighbors",
        "params": [
            "n_neighbors",
            "radius",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.NeighborhoodComponentsAnalysis",
        "name": "NeighborhoodComponentsAnalysis",
        "params": [
            "n_components",
            "init",
            "warm_start",
            "max_iter",
            "tol",
            "callback",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.neighbors.kneighbors_graph",
        "name": "kneighbors_graph",
        "params": [
            "X",
            "n_neighbors",
            "mode",
            "metric",
            "p",
            "metric_params",
            "include_self",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neighbors.radius_neighbors_graph",
        "name": "radius_neighbors_graph",
        "params": [
            "X",
            "radius",
            "mode",
            "metric",
            "p",
            "metric_params",
            "include_self",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.neural_network.BernoulliRBM",
        "name": "BernoulliRBM",
        "params": [
            "n_components",
            "learning_rate",
            "batch_size",
            "n_iter",
            "verbose",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.neural_network.MLPClassifier",
        "name": "MLPClassifier",
        "params": [
            "hidden_layer_sizes",
            "activation",
            "solver",
            "alpha",
            "batch_size",
            "learning_rate",
            "learning_rate_init",
            "power_t",
            "max_iter",
            "shuffle",
            "random_state",
            "tol",
            "verbose",
            "warm_start",
            "momentum",
            "nesterovs_momentum",
            "early_stopping",
            "validation_fraction",
            "beta_1",
            "beta_2",
            "epsilon",
            "n_iter_no_change",
            "max_fun"
        ]
    },
    {
        "full_name": "sklearn.neural_network.MLPRegressor",
        "name": "MLPRegressor",
        "params": [
            "hidden_layer_sizes",
            "activation",
            "solver",
            "alpha",
            "batch_size",
            "learning_rate",
            "learning_rate_init",
            "power_t",
            "max_iter",
            "shuffle",
            "random_state",
            "tol",
            "verbose",
            "warm_start",
            "momentum",
            "nesterovs_momentum",
            "early_stopping",
            "validation_fraction",
            "beta_1",
            "beta_2",
            "epsilon",
            "n_iter_no_change",
            "max_fun"
        ]
    },
    {
        "full_name": "sklearn.pipeline.FeatureUnion",
        "name": "FeatureUnion",
        "params": [
            "transformer_list",
            "n_jobs",
            "transformer_weights",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.pipeline.Pipeline",
        "name": "Pipeline",
        "params": [
            "steps",
            "memory",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.pipeline.make_pipeline",
        "name": "make_pipeline",
        "params": [
            "*steps",
            "memory",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.pipeline.make_union",
        "name": "make_union",
        "params": [
            "*transformers",
            "n_jobs",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.Binarizer",
        "name": "Binarizer",
        "params": [
            "threshold",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.FunctionTransformer",
        "name": "FunctionTransformer",
        "params": [
            "func",
            "inverse_func",
            "validate",
            "accept_sparse",
            "check_inverse",
            "feature_names_out",
            "kw_args",
            "inv_kw_args"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.KBinsDiscretizer",
        "name": "KBinsDiscretizer",
        "params": [
            "n_bins",
            "encode",
            "strategy",
            "dtype",
            "subsample",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.KernelCenterer",
        "name": "KernelCenterer",
        "params": []
    },
    {
        "full_name": "sklearn.preprocessing.LabelBinarizer",
        "name": "LabelBinarizer",
        "params": [
            "neg_label",
            "pos_label",
            "sparse_output"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.LabelEncoder",
        "name": "LabelEncoder",
        "params": []
    },
    {
        "full_name": "sklearn.preprocessing.MultiLabelBinarizer",
        "name": "MultiLabelBinarizer",
        "params": [
            "classes",
            "sparse_output"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.MaxAbsScaler",
        "name": "MaxAbsScaler",
        "params": [
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.MinMaxScaler",
        "name": "MinMaxScaler",
        "params": [
            "feature_range",
            "copy",
            "clip"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.Normalizer",
        "name": "Normalizer",
        "params": [
            "norm",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.OneHotEncoder",
        "name": "OneHotEncoder",
        "params": [
            "categories",
            "drop",
            "sparse",
            "dtype",
            "handle_unknown",
            "min_frequency",
            "max_categories"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.OrdinalEncoder",
        "name": "OrdinalEncoder",
        "params": [
            "categories",
            "dtype",
            "handle_unknown",
            "unknown_value",
            "encoded_missing_value"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.PolynomialFeatures",
        "name": "PolynomialFeatures",
        "params": [
            "degree",
            "interaction_only",
            "include_bias",
            "order"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.PowerTransformer",
        "name": "PowerTransformer",
        "params": [
            "method",
            "standardize",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.QuantileTransformer",
        "name": "QuantileTransformer",
        "params": [
            "n_quantiles",
            "output_distribution",
            "ignore_implicit_zeros",
            "subsample",
            "random_state",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.RobustScaler",
        "name": "RobustScaler",
        "params": [
            "with_centering",
            "with_scaling",
            "quantile_range",
            "copy",
            "unit_variance"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.SplineTransformer",
        "name": "SplineTransformer",
        "params": [
            "n_knots",
            "degree",
            "knots",
            "extrapolation",
            "include_bias",
            "order"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.StandardScaler",
        "name": "StandardScaler",
        "params": [
            "copy",
            "with_mean",
            "with_std"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.add_dummy_feature",
        "name": "add_dummy_feature",
        "params": [
            "X",
            "value"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.binarize",
        "name": "binarize",
        "params": [
            "X",
            "threshold",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.label_binarize",
        "name": "label_binarize",
        "params": [
            "y",
            "classes",
            "neg_label",
            "pos_label",
            "sparse_output"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.maxabs_scale",
        "name": "maxabs_scale",
        "params": [
            "X",
            "axis",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.minmax_scale",
        "name": "minmax_scale",
        "params": [
            "X",
            "feature_range",
            "axis",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.normalize",
        "name": "normalize",
        "params": [
            "X",
            "norm",
            "axis",
            "copy",
            "return_norm"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.quantile_transform",
        "name": "quantile_transform",
        "params": [
            "X",
            "axis",
            "n_quantiles",
            "output_distribution",
            "ignore_implicit_zeros",
            "subsample",
            "random_state",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.robust_scale",
        "name": "robust_scale",
        "params": [
            "X",
            "axis",
            "with_centering",
            "with_scaling",
            "quantile_range",
            "copy",
            "unit_variance"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.scale",
        "name": "scale",
        "params": [
            "X",
            "axis",
            "with_mean",
            "with_std",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.preprocessing.power_transform",
        "name": "power_transform",
        "params": [
            "X",
            "method",
            "standardize",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.random_projection.GaussianRandomProjection",
        "name": "GaussianRandomProjection",
        "params": [
            "n_components",
            "eps",
            "compute_inverse_components",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.random_projection.SparseRandomProjection",
        "name": "SparseRandomProjection",
        "params": [
            "n_components",
            "density",
            "eps",
            "dense_output",
            "compute_inverse_components",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.random_projection.johnson_lindenstrauss_min_dim",
        "name": "johnson_lindenstrauss_min_dim",
        "params": [
            "n_samples",
            "eps"
        ]
    },
    {
        "full_name": "sklearn.semi_supervised.LabelPropagation",
        "name": "LabelPropagation",
        "params": [
            "kernel",
            "gamma",
            "n_neighbors",
            "max_iter",
            "tol",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.semi_supervised.LabelSpreading",
        "name": "LabelSpreading",
        "params": [
            "kernel",
            "gamma",
            "n_neighbors",
            "alpha",
            "max_iter",
            "tol",
            "n_jobs"
        ]
    },
    {
        "full_name": "sklearn.semi_supervised.SelfTrainingClassifier",
        "name": "SelfTrainingClassifier",
        "params": [
            "base_estimator",
            "threshold",
            "criterion",
            "k_best",
            "max_iter",
            "verbose"
        ]
    },
    {
        "full_name": "sklearn.svm.LinearSVC",
        "name": "LinearSVC",
        "params": [
            "penalty",
            "loss",
            "dual",
            "tol",
            "C",
            "multi_class",
            "fit_intercept",
            "intercept_scaling",
            "class_weight",
            "verbose",
            "random_state",
            "max_iter"
        ]
    },
    {
        "full_name": "sklearn.svm.LinearSVR",
        "name": "LinearSVR",
        "params": [
            "epsilon",
            "tol",
            "C",
            "loss",
            "fit_intercept",
            "intercept_scaling",
            "dual",
            "verbose",
            "random_state",
            "max_iter"
        ]
    },
    {
        "full_name": "sklearn.svm.NuSVC",
        "name": "NuSVC",
        "params": [
            "nu",
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "shrinking",
            "probability",
            "tol",
            "cache_size",
            "class_weight",
            "verbose",
            "max_iter",
            "decision_function_shape",
            "break_ties",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.svm.NuSVR",
        "name": "NuSVR",
        "params": [
            "nu",
            "C",
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "shrinking",
            "tol",
            "cache_size",
            "verbose",
            "max_iter"
        ]
    },
    {
        "full_name": "sklearn.svm.OneClassSVM",
        "name": "OneClassSVM",
        "params": [
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "tol",
            "nu",
            "shrinking",
            "cache_size",
            "verbose",
            "max_iter"
        ]
    },
    {
        "full_name": "sklearn.svm.SVC",
        "name": "SVC",
        "params": [
            "C",
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "shrinking",
            "probability",
            "tol",
            "cache_size",
            "class_weight",
            "verbose",
            "max_iter",
            "decision_function_shape",
            "break_ties",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.svm.SVR",
        "name": "SVR",
        "params": [
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "tol",
            "C",
            "epsilon",
            "shrinking",
            "cache_size",
            "verbose",
            "max_iter"
        ]
    },
    {
        "full_name": "sklearn.svm.l1_min_c",
        "name": "l1_min_c",
        "params": [
            "X",
            "y",
            "loss",
            "fit_intercept",
            "intercept_scaling"
        ]
    },
    {
        "full_name": "sklearn.tree.DecisionTreeClassifier",
        "name": "DecisionTreeClassifier",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "class_weight",
            "ccp_alpha"
        ]
    },
    {
        "full_name": "sklearn.tree.DecisionTreeRegressor",
        "name": "DecisionTreeRegressor",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "ccp_alpha"
        ]
    },
    {
        "full_name": "sklearn.tree.ExtraTreeClassifier",
        "name": "ExtraTreeClassifier",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "class_weight",
            "ccp_alpha"
        ]
    },
    {
        "full_name": "sklearn.tree.ExtraTreeRegressor",
        "name": "ExtraTreeRegressor",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "min_impurity_decrease",
            "max_leaf_nodes",
            "ccp_alpha"
        ]
    },
    {
        "full_name": "sklearn.tree.export_graphviz",
        "name": "export_graphviz",
        "params": [
            "decision_tree",
            "out_file",
            "max_depth",
            "feature_names",
            "class_names",
            "label",
            "filled",
            "leaves_parallel",
            "impurity",
            "node_ids",
            "proportion",
            "rotate",
            "rounded",
            "special_characters",
            "precision",
            "fontname"
        ]
    },
    {
        "full_name": "sklearn.tree.export_text",
        "name": "export_text",
        "params": [
            "decision_tree",
            "feature_names",
            "max_depth",
            "spacing",
            "decimals",
            "show_weights"
        ]
    },
    {
        "full_name": "sklearn.tree.plot_tree",
        "name": "plot_tree",
        "params": [
            "decision_tree",
            "max_depth",
            "feature_names",
            "class_names",
            "label",
            "filled",
            "impurity",
            "node_ids",
            "proportion",
            "rounded",
            "precision",
            "ax",
            "fontsize"
        ]
    },
    {
        "full_name": "sklearn.utils.Bunch",
        "name": "Bunch",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.utils.arrayfuncs.min_pos",
        "name": "min_pos",
        "params": []
    },
    {
        "full_name": "sklearn.utils.as_float_array",
        "name": "as_float_array",
        "params": [
            "X",
            "copy",
            "force_all_finite"
        ]
    },
    {
        "full_name": "sklearn.utils.assert_all_finite",
        "name": "assert_all_finite",
        "params": [
            "X",
            "allow_nan",
            "estimator_name",
            "input_name"
        ]
    },
    {
        "full_name": "sklearn.utils.check_X_y",
        "name": "check_X_y",
        "params": [
            "X",
            "y",
            "accept_sparse",
            "accept_large_sparse",
            "dtype",
            "order",
            "copy",
            "force_all_finite",
            "ensure_2d",
            "allow_nd",
            "multi_output",
            "ensure_min_samples",
            "ensure_min_features",
            "y_numeric",
            "estimator"
        ]
    },
    {
        "full_name": "sklearn.utils.check_array",
        "name": "check_array",
        "params": [
            "array",
            "accept_sparse",
            "accept_large_sparse",
            "dtype",
            "order",
            "copy",
            "force_all_finite",
            "ensure_2d",
            "allow_nd",
            "ensure_min_samples",
            "ensure_min_features",
            "estimator",
            "input_name"
        ]
    },
    {
        "full_name": "sklearn.utils.check_scalar",
        "name": "check_scalar",
        "params": [
            "x",
            "name",
            "target_type",
            "min_val",
            "max_val",
            "include_boundaries"
        ]
    },
    {
        "full_name": "sklearn.utils.check_consistent_length",
        "name": "check_consistent_length",
        "params": [
            "*arrays"
        ]
    },
    {
        "full_name": "sklearn.utils.check_random_state",
        "name": "check_random_state",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "sklearn.utils.class_weight.compute_class_weight",
        "name": "compute_class_weight",
        "params": [
            "class_weight",
            "classes",
            "y"
        ]
    },
    {
        "full_name": "sklearn.utils.class_weight.compute_sample_weight",
        "name": "compute_sample_weight",
        "params": [
            "class_weight",
            "y",
            "indices"
        ]
    },
    {
        "full_name": "sklearn.utils.deprecated",
        "name": "deprecated",
        "params": [
            "extra"
        ]
    },
    {
        "full_name": "sklearn.utils.estimator_checks.check_estimator",
        "name": "check_estimator",
        "params": [
            "estimator",
            "generate_only",
            "Estimator"
        ]
    },
    {
        "full_name": "sklearn.utils.estimator_checks.parametrize_with_checks",
        "name": "parametrize_with_checks",
        "params": [
            "estimators"
        ]
    },
    {
        "full_name": "sklearn.utils.estimator_html_repr",
        "name": "estimator_html_repr",
        "params": [
            "estimator"
        ]
    },
    {
        "full_name": "sklearn.utils.extmath.safe_sparse_dot",
        "name": "safe_sparse_dot",
        "params": [
            "a",
            "b",
            "dense_output"
        ]
    },
    {
        "full_name": "sklearn.utils.extmath.randomized_range_finder",
        "name": "randomized_range_finder",
        "params": [
            "A",
            "size",
            "n_iter",
            "power_iteration_normalizer",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.utils.extmath.randomized_svd",
        "name": "randomized_svd",
        "params": [
            "M",
            "n_components",
            "n_oversamples",
            "n_iter",
            "power_iteration_normalizer",
            "transpose",
            "flip_sign",
            "random_state"
        ]
    },
    {
        "full_name": "sklearn.utils.extmath.fast_logdet",
        "name": "fast_logdet",
        "params": [
            "A"
        ]
    },
    {
        "full_name": "sklearn.utils.extmath.density",
        "name": "density",
        "params": [
            "w",
            "**kwargs"
        ]
    },
    {
        "full_name": "sklearn.utils.extmath.weighted_mode",
        "name": "weighted_mode",
        "params": [
            "a",
            "w",
            "axis"
        ]
    },
    {
        "full_name": "sklearn.utils.gen_batches",
        "name": "gen_batches",
        "params": [
            "n",
            "batch_size",
            "min_batch_size"
        ]
    },
    {
        "full_name": "sklearn.utils.gen_even_slices",
        "name": "gen_even_slices",
        "params": [
            "n",
            "n_packs",
            "n_samples"
        ]
    },
    {
        "full_name": "sklearn.utils.graph.single_source_shortest_path_length",
        "name": "single_source_shortest_path_length",
        "params": [
            "graph",
            "source",
            "cutoff"
        ]
    },
    {
        "full_name": "sklearn.utils.indexable",
        "name": "indexable",
        "params": [
            "*iterables"
        ]
    },
    {
        "full_name": "sklearn.utils.metaestimators.available_if",
        "name": "available_if",
        "params": [
            "check"
        ]
    },
    {
        "full_name": "sklearn.utils.multiclass.type_of_target",
        "name": "type_of_target",
        "params": [
            "y",
            "input_name"
        ]
    },
    {
        "full_name": "sklearn.utils.multiclass.is_multilabel",
        "name": "is_multilabel",
        "params": [
            "y"
        ]
    },
    {
        "full_name": "sklearn.utils.multiclass.unique_labels",
        "name": "unique_labels",
        "params": [
            "*ys"
        ]
    },
    {
        "full_name": "sklearn.utils.murmurhash3_32",
        "name": "murmurhash3_32",
        "params": []
    },
    {
        "full_name": "sklearn.utils.resample",
        "name": "resample",
        "params": [
            "*arrays",
            "replace",
            "n_samples",
            "random_state",
            "stratify"
        ]
    },
    {
        "full_name": "sklearn.utils._safe_indexing",
        "name": "_safe_indexing",
        "params": [
            "X",
            "indices",
            "axis"
        ]
    },
    {
        "full_name": "sklearn.utils.safe_mask",
        "name": "safe_mask",
        "params": [
            "X",
            "mask"
        ]
    },
    {
        "full_name": "sklearn.utils.safe_sqr",
        "name": "safe_sqr",
        "params": [
            "X",
            "copy"
        ]
    },
    {
        "full_name": "sklearn.utils.shuffle",
        "name": "shuffle",
        "params": [
            "*arrays",
            "random_state",
            "n_samples"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
        "name": "incr_mean_variance_axis",
        "params": [
            "X",
            "axis",
            "last_mean",
            "last_var",
            "last_n",
            "weights"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_column_scale",
        "name": "inplace_column_scale",
        "params": [
            "X",
            "scale"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_row_scale",
        "name": "inplace_row_scale",
        "params": [
            "X",
            "scale"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_swap_row",
        "name": "inplace_swap_row",
        "params": [
            "X",
            "m",
            "n"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_swap_column",
        "name": "inplace_swap_column",
        "params": [
            "X",
            "m",
            "n"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.mean_variance_axis",
        "name": "mean_variance_axis",
        "params": [
            "X",
            "axis",
            "weights",
            "return_sum_weights"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_csr_column_scale",
        "name": "inplace_csr_column_scale",
        "params": [
            "X",
            "scale"
        ]
    },
    {
        "full_name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1",
        "name": "inplace_csr_row_normalize_l1",
        "params": []
    },
    {
        "full_name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2",
        "name": "inplace_csr_row_normalize_l2",
        "params": []
    },
    {
        "full_name": "sklearn.utils.random.sample_without_replacement",
        "name": "sample_without_replacement",
        "params": []
    },
    {
        "full_name": "sklearn.utils.validation.check_is_fitted",
        "name": "check_is_fitted",
        "params": [
            "estimator",
            "attributes",
            "msg",
            "all_or_any"
        ]
    },
    {
        "full_name": "sklearn.utils.validation.check_memory",
        "name": "check_memory",
        "params": [
            "memory"
        ]
    },
    {
        "full_name": "sklearn.utils.validation.check_symmetric",
        "name": "check_symmetric",
        "params": [
            "array",
            "tol",
            "raise_warning",
            "raise_exception"
        ]
    },
    {
        "full_name": "sklearn.utils.validation.column_or_1d",
        "name": "column_or_1d",
        "params": [
            "y",
            "warn"
        ]
    },
    {
        "full_name": "sklearn.utils.validation.has_fit_parameter",
        "name": "has_fit_parameter",
        "params": [
            "estimator",
            "parameter"
        ]
    },
    {
        "full_name": "sklearn.utils.all_estimators",
        "name": "all_estimators",
        "params": [
            "type_filter"
        ]
    },
    {
        "full_name": "sklearn.utils.parallel_backend",
        "name": "parallel_backend",
        "params": [
            "backend",
            "n_jobs",
            "inner_max_num_threads",
            "**backend_params"
        ]
    },
    {
        "full_name": "sklearn.utils.register_parallel_backend",
        "name": "register_parallel_backend",
        "params": [
            "name",
            "factory",
            "make_default"
        ]
    },
    {
        "full_name": "sklearn.utils.metaestimators.if_delegate_has_method",
        "name": "if_delegate_has_method",
        "params": [
            "delegate"
        ]
    }
]