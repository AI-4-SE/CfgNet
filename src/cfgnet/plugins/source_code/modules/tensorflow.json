[
    {
        "full_name:": "tensorflow.AggregationMethod",
        "name": "AggregationMethod",
        "params": []
    },
    {
        "full_name:": "tensorflow.CriticalSection",
        "name": "CriticalSection",
        "params": [
            "name",
            "shared_name",
            "critical_section_def",
            "import_scope"
        ]
    },
    {
        "full_name:": "tensorflow.dtypes.DType",
        "name": "DType",
        "params": []
    },
    {
        "full_name:": "tensorflow.DeviceSpec",
        "name": "DeviceSpec",
        "params": [
            "job",
            "replica",
            "task",
            "device_type",
            "device_index"
        ]
    },
    {
        "full_name:": "tensorflow.GradientTape",
        "name": "GradientTape",
        "params": [
            "persistent",
            "watch_accessed_variables"
        ]
    },
    {
        "full_name:": "tensorflow.Graph",
        "name": "Graph",
        "params": []
    },
    {
        "full_name:": "tensorflow.IndexedSlices",
        "name": "IndexedSlices",
        "params": [
            "values",
            "indices",
            "dense_shape"
        ]
    },
    {
        "full_name:": "tensorflow.IndexedSlicesSpec",
        "name": "IndexedSlicesSpec",
        "params": [
            "shape",
            "dtype",
            "indices_dtype",
            "dense_shape_dtype",
            "indices_shape"
        ]
    },
    {
        "full_name:": "tensorflow.Module",
        "name": "Module",
        "params": [
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.Operation",
        "name": "Operation",
        "params": [
            "node_def",
            "g",
            "inputs",
            "output_types",
            "control_inputs",
            "input_types",
            "original_op",
            "op_def"
        ]
    },
    {
        "full_name:": "tensorflow.OptionalSpec",
        "name": "OptionalSpec",
        "params": [
            "element_spec"
        ]
    },
    {
        "full_name:": "tensorflow.RaggedTensor",
        "name": "RaggedTensor",
        "params": []
    },
    {
        "full_name:": "tensorflow.RaggedTensorSpec",
        "name": "RaggedTensorSpec",
        "params": [
            "shape",
            "dtype",
            "ragged_rank",
            "row_splits_dtype",
            "flat_values_spec"
        ]
    },
    {
        "full_name:": "tensorflow.RegisterGradient",
        "name": "RegisterGradient",
        "params": [
            "op_type"
        ]
    },
    {
        "full_name:": "tensorflow.sparse.SparseTensor",
        "name": "SparseTensor",
        "params": [
            "indices",
            "values",
            "dense_shape"
        ]
    },
    {
        "full_name:": "tensorflow.SparseTensorSpec",
        "name": "SparseTensorSpec",
        "params": [
            "shape",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.Tensor",
        "name": "Tensor",
        "params": [
            "op",
            "value_index",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.TensorArray",
        "name": "TensorArray",
        "params": [
            "dtype",
            "size",
            "dynamic_size",
            "clear_after_read",
            "tensor_array_name",
            "handle",
            "flow",
            "infer_shape",
            "element_shape",
            "colocate_with_first_write_call",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.TensorArraySpec",
        "name": "TensorArraySpec",
        "params": [
            "element_shape",
            "dtype",
            "dynamic_size",
            "infer_shape"
        ]
    },
    {
        "full_name:": "tensorflow.TensorShape",
        "name": "TensorShape",
        "params": [
            "dims"
        ]
    },
    {
        "full_name:": "tensorflow.TensorSpec",
        "name": "TensorSpec",
        "params": [
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.TypeSpec",
        "name": "TypeSpec",
        "params": []
    },
    {
        "full_name:": "tensorflow.UnconnectedGradients",
        "name": "UnconnectedGradients",
        "params": []
    },
    {
        "full_name:": "tensorflow.Variable",
        "name": "Variable",
        "params": [
            "initial_value",
            "trainable",
            "validate_shape",
            "caching_device",
            "name",
            "variable_def",
            "dtype",
            "import_scope",
            "constraint",
            "synchronization",
            "aggregation",
            "shape"
        ]
    },
    {
        "full_name:": "tensorflow.VariableAggregation",
        "name": "VariableAggregation",
        "params": []
    },
    {
        "full_name:": "tensorflow.VariableSynchronization",
        "name": "VariableSynchronization",
        "params": []
    },
    {
        "full_name:": "tensorflow.constant_initializer",
        "name": "constant_initializer",
        "params": [
            "value"
        ]
    },
    {
        "full_name:": "tensorflow.name_scope",
        "name": "name_scope",
        "params": [
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.ones_initializer",
        "name": "ones_initializer",
        "params": []
    },
    {
        "full_name:": "tensorflow.random_normal_initializer",
        "name": "random_normal_initializer",
        "params": [
            "mean",
            "stddev",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.random_uniform_initializer",
        "name": "random_uniform_initializer",
        "params": [
            "minval",
            "maxval",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.zeros_initializer",
        "name": "zeros_initializer",
        "params": []
    },
    {
        "full_name:": "tensorflow.autodiff.ForwardAccumulator",
        "name": "ForwardAccumulator",
        "params": [
            "primals",
            "tangents"
        ]
    },
    {
        "full_name:": "tensorflow.config.LogicalDevice",
        "name": "LogicalDevice",
        "params": [
            "name",
            "device_type"
        ]
    },
    {
        "full_name:": "tensorflow.config.LogicalDeviceConfiguration",
        "name": "LogicalDeviceConfiguration",
        "params": [
            "memory_limit",
            "experimental_priority"
        ]
    },
    {
        "full_name:": "tensorflow.config.PhysicalDevice",
        "name": "PhysicalDevice",
        "params": [
            "name",
            "device_type"
        ]
    },
    {
        "full_name:": "tensorflow.data.Dataset",
        "name": "Dataset",
        "params": [
            "variant_tensor"
        ]
    },
    {
        "full_name:": "tensorflow.data.DatasetSpec",
        "name": "DatasetSpec",
        "params": [
            "element_spec",
            "dataset_shape"
        ]
    },
    {
        "full_name:": "tensorflow.data.FixedLengthRecordDataset",
        "name": "FixedLengthRecordDataset",
        "params": [
            "filenames",
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "buffer_size",
            "compression_type",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.data.Iterator",
        "name": "Iterator",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.IteratorSpec",
        "name": "IteratorSpec",
        "params": [
            "element_spec"
        ]
    },
    {
        "full_name:": "tensorflow.data.Options",
        "name": "Options",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.TFRecordDataset",
        "name": "TFRecordDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.data.TextLineDataset",
        "name": "TextLineDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.data.ThreadingOptions",
        "name": "ThreadingOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.CrossDeviceOps",
        "name": "CrossDeviceOps",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.DistributedDataset",
        "name": "DistributedDataset",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.DistributedIterator",
        "name": "DistributedIterator",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.DistributedValues",
        "name": "DistributedValues",
        "params": [
            "values"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.HierarchicalCopyAllReduce",
        "name": "HierarchicalCopyAllReduce",
        "params": [
            "num_packs"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.InputContext",
        "name": "InputContext",
        "params": [
            "num_input_pipelines",
            "input_pipeline_id",
            "num_replicas_in_sync"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.InputOptions",
        "name": "InputOptions",
        "params": [
            "experimental_fetch_to_device",
            "experimental_replication_mode",
            "experimental_place_dataset_on_device",
            "experimental_per_replica_buffer_size"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.InputReplicationMode",
        "name": "InputReplicationMode",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.MirroredStrategy",
        "name": "MirroredStrategy",
        "params": [
            "devices",
            "cross_device_ops"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.MultiWorkerMirroredStrategy",
        "name": "MultiWorkerMirroredStrategy",
        "params": [
            "cluster_resolver",
            "communication_options"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.NcclAllReduce",
        "name": "NcclAllReduce",
        "params": [
            "num_packs"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.OneDeviceStrategy",
        "name": "OneDeviceStrategy",
        "params": [
            "device"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.ParameterServerStrategy",
        "name": "ParameterServerStrategy",
        "params": [
            "cluster_resolver",
            "variable_partitioner"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.ReduceOp",
        "name": "ReduceOp",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.ReductionToOneDevice",
        "name": "ReductionToOneDevice",
        "params": [
            "reduce_to_device",
            "accumulation_fn"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.ReplicaContext",
        "name": "ReplicaContext",
        "params": [
            "strategy",
            "replica_id_in_sync_group"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.RunOptions",
        "name": "RunOptions",
        "params": [
            "experimental_enable_dynamic_batch_size",
            "experimental_bucketizing_dynamic_shape",
            "experimental_xla_options"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.Server",
        "name": "Server",
        "params": [
            "server_or_cluster_def",
            "job_name",
            "task_index",
            "protocol",
            "config",
            "start"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.Strategy",
        "name": "Strategy",
        "params": [
            "extended"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.StrategyExtended",
        "name": "StrategyExtended",
        "params": [
            "container_strategy"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.TPUStrategy",
        "name": "TPUStrategy",
        "params": [
            "tpu_cluster_resolver",
            "experimental_device_assignment",
            "experimental_spmd_xla_partitioning"
        ]
    },
    {
        "full_name:": "tensorflow.errors.AbortedError",
        "name": "AbortedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.AlreadyExistsError",
        "name": "AlreadyExistsError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.CancelledError",
        "name": "CancelledError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.DataLossError",
        "name": "DataLossError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.DeadlineExceededError",
        "name": "DeadlineExceededError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.FailedPreconditionError",
        "name": "FailedPreconditionError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.InternalError",
        "name": "InternalError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.InvalidArgumentError",
        "name": "InvalidArgumentError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.NotFoundError",
        "name": "NotFoundError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.OpError",
        "name": "OpError",
        "params": [
            "node_def",
            "op",
            "message",
            "error_code",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.OperatorNotAllowedInGraphError",
        "name": "OperatorNotAllowedInGraphError",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.errors.OutOfRangeError",
        "name": "OutOfRangeError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.PermissionDeniedError",
        "name": "PermissionDeniedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.ResourceExhaustedError",
        "name": "ResourceExhaustedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.UnauthenticatedError",
        "name": "UnauthenticatedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.UnavailableError",
        "name": "UnavailableError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.UnimplementedError",
        "name": "UnimplementedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.errors.UnknownError",
        "name": "UnknownError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BaselineClassifier",
        "name": "BaselineClassifier",
        "params": [
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BaselineEstimator",
        "name": "BaselineEstimator",
        "params": [
            "head",
            "model_dir",
            "optimizer",
            "config"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BaselineRegressor",
        "name": "BaselineRegressor",
        "params": [
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BestExporter",
        "name": "BestExporter",
        "params": [
            "name",
            "serving_input_receiver_fn",
            "event_file_pattern",
            "compare_fn",
            "assets_extra",
            "as_text",
            "exports_to_keep"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BinaryClassHead",
        "name": "BinaryClassHead",
        "params": [
            "weight_column",
            "thresholds",
            "label_vocabulary",
            "loss_reduction",
            "loss_fn",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BoostedTreesClassifier",
        "name": "BoostedTreesClassifier",
        "params": [
            "feature_columns",
            "n_batches_per_layer",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "n_trees",
            "max_depth",
            "learning_rate",
            "l1_regularization",
            "l2_regularization",
            "tree_complexity",
            "min_node_weight",
            "config",
            "center_bias",
            "pruning_mode",
            "quantile_sketch_epsilon",
            "train_in_memory"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BoostedTreesEstimator",
        "name": "BoostedTreesEstimator",
        "params": [
            "feature_columns",
            "n_batches_per_layer",
            "head",
            "model_dir",
            "weight_column",
            "n_trees",
            "max_depth",
            "learning_rate",
            "l1_regularization",
            "l2_regularization",
            "tree_complexity",
            "min_node_weight",
            "config",
            "center_bias",
            "pruning_mode",
            "quantile_sketch_epsilon"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.BoostedTreesRegressor",
        "name": "BoostedTreesRegressor",
        "params": [
            "feature_columns",
            "n_batches_per_layer",
            "model_dir",
            "label_dimension",
            "weight_column",
            "n_trees",
            "max_depth",
            "learning_rate",
            "l1_regularization",
            "l2_regularization",
            "tree_complexity",
            "min_node_weight",
            "config",
            "center_bias",
            "pruning_mode",
            "quantile_sketch_epsilon",
            "train_in_memory"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.CheckpointSaverHook",
        "name": "CheckpointSaverHook",
        "params": [
            "checkpoint_dir",
            "save_secs",
            "save_steps",
            "saver",
            "checkpoint_basename",
            "scaffold",
            "listeners",
            "save_graph_def"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.CheckpointSaverListener",
        "name": "CheckpointSaverListener",
        "params": []
    },
    {
        "full_name:": "tensorflow.estimator.DNNClassifier",
        "name": "DNNClassifier",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "activation_fn",
            "dropout",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.DNNEstimator",
        "name": "DNNEstimator",
        "params": [
            "head",
            "hidden_units",
            "feature_columns",
            "model_dir",
            "optimizer",
            "activation_fn",
            "dropout",
            "config",
            "warm_start_from",
            "batch_norm"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.DNNLinearCombinedClassifier",
        "name": "DNNLinearCombinedClassifier",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.DNNLinearCombinedEstimator",
        "name": "DNNLinearCombinedEstimator",
        "params": [
            "head",
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "config",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.DNNLinearCombinedRegressor",
        "name": "DNNLinearCombinedRegressor",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "label_dimension",
            "weight_column",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.DNNRegressor",
        "name": "DNNRegressor",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "activation_fn",
            "dropout",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.Estimator",
        "name": "Estimator",
        "params": [
            "model_fn",
            "model_dir",
            "config",
            "params",
            "warm_start_from"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.EstimatorSpec",
        "name": "EstimatorSpec",
        "params": [
            "mode",
            "predictions",
            "loss",
            "train_op",
            "eval_metric_ops",
            "export_outputs",
            "training_chief_hooks",
            "training_hooks",
            "scaffold",
            "evaluation_hooks",
            "prediction_hooks"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.EvalSpec",
        "name": "EvalSpec",
        "params": [
            "input_fn",
            "steps",
            "name",
            "hooks",
            "exporters",
            "start_delay_secs",
            "throttle_secs"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.Exporter",
        "name": "Exporter",
        "params": []
    },
    {
        "full_name:": "tensorflow.estimator.FeedFnHook",
        "name": "FeedFnHook",
        "params": [
            "feed_fn"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.FinalExporter",
        "name": "FinalExporter",
        "params": [
            "name",
            "serving_input_receiver_fn",
            "assets_extra",
            "as_text"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.FinalOpsHook",
        "name": "FinalOpsHook",
        "params": [
            "final_ops",
            "final_ops_feed_dict"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.GlobalStepWaiterHook",
        "name": "GlobalStepWaiterHook",
        "params": [
            "wait_until_step"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.Head",
        "name": "Head",
        "params": []
    },
    {
        "full_name:": "tensorflow.estimator.LatestExporter",
        "name": "LatestExporter",
        "params": [
            "name",
            "serving_input_receiver_fn",
            "assets_extra",
            "as_text",
            "exports_to_keep"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.LinearClassifier",
        "name": "LinearClassifier",
        "params": [
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.LinearEstimator",
        "name": "LinearEstimator",
        "params": [
            "head",
            "feature_columns",
            "model_dir",
            "optimizer",
            "config",
            "sparse_combiner",
            "warm_start_from"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.LinearRegressor",
        "name": "LinearRegressor",
        "params": [
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.LoggingTensorHook",
        "name": "LoggingTensorHook",
        "params": [
            "tensors",
            "every_n_iter",
            "every_n_secs",
            "at_end",
            "formatter"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.LogisticRegressionHead",
        "name": "LogisticRegressionHead",
        "params": [
            "weight_column",
            "loss_reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.ModeKeys",
        "name": "ModeKeys",
        "params": []
    },
    {
        "full_name:": "tensorflow.estimator.MultiClassHead",
        "name": "MultiClassHead",
        "params": [
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "loss_reduction",
            "loss_fn",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.MultiHead",
        "name": "MultiHead",
        "params": [
            "heads",
            "head_weights"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.MultiLabelHead",
        "name": "MultiLabelHead",
        "params": [
            "n_classes",
            "weight_column",
            "thresholds",
            "label_vocabulary",
            "loss_reduction",
            "loss_fn",
            "classes_for_class_based_metrics",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.NanLossDuringTrainingError",
        "name": "NanLossDuringTrainingError",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.NanTensorHook",
        "name": "NanTensorHook",
        "params": [
            "loss_tensor",
            "fail_on_nan_loss"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.PoissonRegressionHead",
        "name": "PoissonRegressionHead",
        "params": [
            "label_dimension",
            "weight_column",
            "loss_reduction",
            "compute_full_loss",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.ProfilerHook",
        "name": "ProfilerHook",
        "params": [
            "save_steps",
            "save_secs",
            "output_dir",
            "show_dataflow",
            "show_memory"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.RegressionHead",
        "name": "RegressionHead",
        "params": [
            "label_dimension",
            "weight_column",
            "loss_reduction",
            "loss_fn",
            "inverse_link_fn",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.RunConfig",
        "name": "RunConfig",
        "params": [
            "model_dir",
            "tf_random_seed",
            "save_summary_steps",
            "save_checkpoints_steps",
            "save_checkpoints_secs",
            "session_config",
            "keep_checkpoint_max",
            "keep_checkpoint_every_n_hours",
            "log_step_count_steps",
            "train_distribute",
            "device_fn",
            "protocol",
            "eval_distribute",
            "experimental_distribute",
            "experimental_max_worker_delay_secs",
            "session_creation_timeout_secs",
            "checkpoint_save_graph_def"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.SecondOrStepTimer",
        "name": "SecondOrStepTimer",
        "params": [
            "every_secs",
            "every_steps"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.SessionRunArgs",
        "name": "SessionRunArgs",
        "params": [
            "fetches",
            "feed_dict",
            "options"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.SessionRunContext",
        "name": "SessionRunContext",
        "params": [
            "original_args",
            "session"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.SessionRunHook",
        "name": "SessionRunHook",
        "params": []
    },
    {
        "full_name:": "tensorflow.estimator.SessionRunValues",
        "name": "SessionRunValues",
        "params": [
            "results",
            "options",
            "run_metadata"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.StepCounterHook",
        "name": "StepCounterHook",
        "params": [
            "every_n_steps",
            "every_n_secs",
            "output_dir",
            "summary_writer"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.StopAtStepHook",
        "name": "StopAtStepHook",
        "params": [
            "num_steps",
            "last_step"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.SummarySaverHook",
        "name": "SummarySaverHook",
        "params": [
            "save_steps",
            "save_secs",
            "output_dir",
            "summary_writer",
            "scaffold",
            "summary_op"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.TrainSpec",
        "name": "TrainSpec",
        "params": [
            "input_fn",
            "max_steps",
            "hooks",
            "saving_listeners"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.VocabInfo",
        "name": "VocabInfo",
        "params": [
            "new_vocab",
            "new_vocab_size",
            "num_oov_buckets",
            "old_vocab",
            "old_vocab_size",
            "backup_initializer",
            "axis"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.WarmStartSettings",
        "name": "WarmStartSettings",
        "params": [
            "ckpt_to_initialize_from",
            "vars_to_warm_start",
            "var_name_to_vocab_info",
            "var_name_to_prev_var_name"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.BatchableExtensionType",
        "name": "BatchableExtensionType",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.ExtensionType",
        "name": "ExtensionType",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.ExtensionTypeBatchEncoder",
        "name": "ExtensionTypeBatchEncoder",
        "params": []
    },
    {
        "full_name:": "tensorflow.experimental.Optional",
        "name": "Optional",
        "params": []
    },
    {
        "full_name:": "tensorflow.image.ResizeMethod",
        "name": "ResizeMethod",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.initializers.Constant",
        "name": "Constant",
        "params": [
            "value"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.GlorotNormal",
        "name": "GlorotNormal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.GlorotUniform",
        "name": "GlorotUniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.HeNormal",
        "name": "HeNormal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.HeUniform",
        "name": "HeUniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.Identity",
        "name": "Identity",
        "params": [
            "gain"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.Initializer",
        "name": "Initializer",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.initializers.LecunNormal",
        "name": "LecunNormal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.LecunUniform",
        "name": "LecunUniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.Ones",
        "name": "Ones",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.initializers.Orthogonal",
        "name": "Orthogonal",
        "params": [
            "gain",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.RandomNormal",
        "name": "RandomNormal",
        "params": [
            "mean",
            "stddev",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.RandomUniform",
        "name": "RandomUniform",
        "params": [
            "minval",
            "maxval",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.TruncatedNormal",
        "name": "TruncatedNormal",
        "params": [
            "mean",
            "stddev",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.VarianceScaling",
        "name": "VarianceScaling",
        "params": [
            "scale",
            "mode",
            "distribution",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.initializers.Zeros",
        "name": "Zeros",
        "params": []
    },
    {
        "full_name:": "tensorflow.io.FixedLenFeature",
        "name": "FixedLenFeature",
        "params": [
            "shape",
            "dtype",
            "default_value"
        ]
    },
    {
        "full_name:": "tensorflow.io.FixedLenSequenceFeature",
        "name": "FixedLenSequenceFeature",
        "params": [
            "shape",
            "dtype",
            "allow_missing",
            "default_value"
        ]
    },
    {
        "full_name:": "tensorflow.io.RaggedFeature",
        "name": "RaggedFeature",
        "params": [
            "dtype",
            "value_key",
            "partitions",
            "row_splits_dtype",
            "validate"
        ]
    },
    {
        "full_name:": "tensorflow.io.SparseFeature",
        "name": "SparseFeature",
        "params": [
            "index_key",
            "value_key",
            "dtype",
            "size",
            "already_sorted"
        ]
    },
    {
        "full_name:": "tensorflow.io.TFRecordOptions",
        "name": "TFRecordOptions",
        "params": [
            "compression_type",
            "flush_mode",
            "input_buffer_size",
            "output_buffer_size",
            "window_bits",
            "compression_level",
            "compression_method",
            "mem_level",
            "compression_strategy"
        ]
    },
    {
        "full_name:": "tensorflow.io.TFRecordWriter",
        "name": "TFRecordWriter",
        "params": [
            "path",
            "options"
        ]
    },
    {
        "full_name:": "tensorflow.io.VarLenFeature",
        "name": "VarLenFeature",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.Model",
        "name": "Model",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.Sequential",
        "name": "Sequential",
        "params": [
            "layers",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperator",
        "name": "LinearOperator",
        "params": [
            "dtype",
            "graph_parents",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name",
            "parameters"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorAdjoint",
        "name": "LinearOperatorAdjoint",
        "params": [
            "operator",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorBlockDiag",
        "name": "LinearOperatorBlockDiag",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorBlockLowerTriangular",
        "name": "LinearOperatorBlockLowerTriangular",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorCirculant",
        "name": "LinearOperatorCirculant",
        "params": [
            "spectrum",
            "input_output_dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorCirculant2D",
        "name": "LinearOperatorCirculant2D",
        "params": [
            "spectrum",
            "input_output_dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorCirculant3D",
        "name": "LinearOperatorCirculant3D",
        "params": [
            "spectrum",
            "input_output_dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorComposition",
        "name": "LinearOperatorComposition",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorDiag",
        "name": "LinearOperatorDiag",
        "params": [
            "diag",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorFullMatrix",
        "name": "LinearOperatorFullMatrix",
        "params": [
            "matrix",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorHouseholder",
        "name": "LinearOperatorHouseholder",
        "params": [
            "reflection_axis",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorIdentity",
        "name": "LinearOperatorIdentity",
        "params": [
            "num_rows",
            "batch_shape",
            "dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "assert_proper_shapes",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorInversion",
        "name": "LinearOperatorInversion",
        "params": [
            "operator",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorKronecker",
        "name": "LinearOperatorKronecker",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorLowRankUpdate",
        "name": "LinearOperatorLowRankUpdate",
        "params": [
            "base_operator",
            "u",
            "diag_update",
            "v",
            "is_diag_update_positive",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorLowerTriangular",
        "name": "LinearOperatorLowerTriangular",
        "params": [
            "tril",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorPermutation",
        "name": "LinearOperatorPermutation",
        "params": [
            "perm",
            "dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorScaledIdentity",
        "name": "LinearOperatorScaledIdentity",
        "params": [
            "num_rows",
            "multiplier",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "assert_proper_shapes",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorToeplitz",
        "name": "LinearOperatorToeplitz",
        "params": [
            "col",
            "row",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorTridiag",
        "name": "LinearOperatorTridiag",
        "params": [
            "diagonals",
            "diagonals_format",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.linalg.LinearOperatorZeros",
        "name": "LinearOperatorZeros",
        "params": [
            "num_rows",
            "num_columns",
            "batch_shape",
            "dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "assert_proper_shapes",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.lite.Interpreter",
        "name": "Interpreter",
        "params": [
            "model_path",
            "model_content",
            "experimental_delegates",
            "num_threads",
            "experimental_op_resolver_type",
            "experimental_preserve_all_tensors"
        ]
    },
    {
        "full_name:": "tensorflow.lite.OpsSet",
        "name": "OpsSet",
        "params": []
    },
    {
        "full_name:": "tensorflow.lite.Optimize",
        "name": "Optimize",
        "params": []
    },
    {
        "full_name:": "tensorflow.lite.RepresentativeDataset",
        "name": "RepresentativeDataset",
        "params": [
            "input_gen"
        ]
    },
    {
        "full_name:": "tensorflow.lite.TFLiteConverter",
        "name": "TFLiteConverter",
        "params": [
            "funcs",
            "trackable_obj"
        ]
    },
    {
        "full_name:": "tensorflow.lite.TargetSpec",
        "name": "TargetSpec",
        "params": [
            "supported_ops",
            "supported_types",
            "experimental_select_user_tf_ops",
            "experimental_supported_backends"
        ]
    },
    {
        "full_name:": "tensorflow.lookup.KeyValueTensorInitializer",
        "name": "KeyValueTensorInitializer",
        "params": [
            "keys",
            "values",
            "key_dtype",
            "value_dtype",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.lookup.StaticHashTable",
        "name": "StaticHashTable",
        "params": [
            "initializer",
            "default_value",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name:": "tensorflow.lookup.StaticVocabularyTable",
        "name": "StaticVocabularyTable",
        "params": [
            "initializer",
            "num_oov_buckets",
            "lookup_key_dtype",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name:": "tensorflow.lookup.TextFileIndex",
        "name": "TextFileIndex",
        "params": []
    },
    {
        "full_name:": "tensorflow.lookup.TextFileInitializer",
        "name": "TextFileInitializer",
        "params": [
            "filename",
            "key_dtype",
            "key_index",
            "value_dtype",
            "value_index",
            "vocab_size",
            "delimiter",
            "name",
            "value_index_offset"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.BinaryCrossentropy",
        "name": "BinaryCrossentropy",
        "params": [
            "from_logits",
            "label_smoothing",
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.BinaryFocalCrossentropy",
        "name": "BinaryFocalCrossentropy",
        "params": [
            "gamma",
            "from_logits",
            "label_smoothing",
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.CategoricalCrossentropy",
        "name": "CategoricalCrossentropy",
        "params": [
            "from_logits",
            "label_smoothing",
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.CategoricalHinge",
        "name": "CategoricalHinge",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.CosineSimilarity",
        "name": "CosineSimilarity",
        "params": [
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.Hinge",
        "name": "Hinge",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.Huber",
        "name": "Huber",
        "params": [
            "delta",
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.KLDivergence",
        "name": "KLDivergence",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.LogCosh",
        "name": "LogCosh",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.Loss",
        "name": "Loss",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.MeanAbsoluteError",
        "name": "MeanAbsoluteError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.MeanAbsolutePercentageError",
        "name": "MeanAbsolutePercentageError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.MeanSquaredError",
        "name": "MeanSquaredError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.MeanSquaredLogarithmicError",
        "name": "MeanSquaredLogarithmicError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.Poisson",
        "name": "Poisson",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.Reduction",
        "name": "Reduction",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.losses.SparseCategoricalCrossentropy",
        "name": "SparseCategoricalCrossentropy",
        "params": [
            "from_logits",
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.losses.SquaredHinge",
        "name": "SquaredHinge",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.AUC",
        "name": "AUC",
        "params": [
            "num_thresholds",
            "curve",
            "summation_method",
            "name",
            "dtype",
            "thresholds",
            "multi_label",
            "num_labels",
            "label_weights",
            "from_logits"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Accuracy",
        "name": "Accuracy",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.BinaryAccuracy",
        "name": "BinaryAccuracy",
        "params": [
            "name",
            "dtype",
            "threshold"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.BinaryCrossentropy",
        "name": "BinaryCrossentropy",
        "params": [
            "name",
            "dtype",
            "from_logits",
            "label_smoothing"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.BinaryIoU",
        "name": "BinaryIoU",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.metrics.CategoricalAccuracy",
        "name": "CategoricalAccuracy",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.CategoricalCrossentropy",
        "name": "CategoricalCrossentropy",
        "params": [
            "name",
            "dtype",
            "from_logits",
            "label_smoothing"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.CategoricalHinge",
        "name": "CategoricalHinge",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.CosineSimilarity",
        "name": "CosineSimilarity",
        "params": [
            "name",
            "dtype",
            "axis"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.FalseNegatives",
        "name": "FalseNegatives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.FalsePositives",
        "name": "FalsePositives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Hinge",
        "name": "Hinge",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.IoU",
        "name": "IoU",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.metrics.KLDivergence",
        "name": "KLDivergence",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.LogCoshError",
        "name": "LogCoshError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Mean",
        "name": "Mean",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanAbsoluteError",
        "name": "MeanAbsoluteError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanAbsolutePercentageError",
        "name": "MeanAbsolutePercentageError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanIoU",
        "name": "MeanIoU",
        "params": [
            "num_classes",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanMetricWrapper",
        "name": "MeanMetricWrapper",
        "params": [
            "fn",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanRelativeError",
        "name": "MeanRelativeError",
        "params": [
            "normalizer",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanSquaredError",
        "name": "MeanSquaredError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanSquaredLogarithmicError",
        "name": "MeanSquaredLogarithmicError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.MeanTensor",
        "name": "MeanTensor",
        "params": [
            "name",
            "dtype",
            "shape"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Metric",
        "name": "Metric",
        "params": [
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.OneHotIoU",
        "name": "OneHotIoU",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.metrics.OneHotMeanIoU",
        "name": "OneHotMeanIoU",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.metrics.Poisson",
        "name": "Poisson",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Precision",
        "name": "Precision",
        "params": [
            "thresholds",
            "top_k",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.PrecisionAtRecall",
        "name": "PrecisionAtRecall",
        "params": [
            "recall",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Recall",
        "name": "Recall",
        "params": [
            "thresholds",
            "top_k",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.RecallAtPrecision",
        "name": "RecallAtPrecision",
        "params": [
            "precision",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.RootMeanSquaredError",
        "name": "RootMeanSquaredError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.SensitivityAtSpecificity",
        "name": "SensitivityAtSpecificity",
        "params": [
            "specificity",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.SparseCategoricalAccuracy",
        "name": "SparseCategoricalAccuracy",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.SparseCategoricalCrossentropy",
        "name": "SparseCategoricalCrossentropy",
        "params": [
            "name",
            "dtype",
            "from_logits",
            "axis"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.SparseTopKCategoricalAccuracy",
        "name": "SparseTopKCategoricalAccuracy",
        "params": [
            "k",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.SpecificityAtSensitivity",
        "name": "SpecificityAtSensitivity",
        "params": [
            "sensitivity",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.SquaredHinge",
        "name": "SquaredHinge",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.Sum",
        "name": "Sum",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.TopKCategoricalAccuracy",
        "name": "TopKCategoricalAccuracy",
        "params": [
            "k",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.TrueNegatives",
        "name": "TrueNegatives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.metrics.TruePositives",
        "name": "TruePositives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.nn.RNNCellDeviceWrapper",
        "name": "RNNCellDeviceWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.nn.RNNCellDropoutWrapper",
        "name": "RNNCellDropoutWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.nn.RNNCellResidualWrapper",
        "name": "RNNCellResidualWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Adadelta",
        "name": "Adadelta",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Adagrad",
        "name": "Adagrad",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Adam",
        "name": "Adam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "amsgrad",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Adamax",
        "name": "Adamax",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Ftrl",
        "name": "Ftrl",
        "params": [
            "learning_rate",
            "learning_rate_power",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "name",
            "l2_shrinkage_regularization_strength",
            "beta",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Nadam",
        "name": "Nadam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.Optimizer",
        "name": "Optimizer",
        "params": [
            "name",
            "gradient_aggregator",
            "gradient_transformers",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.RMSprop",
        "name": "RMSprop",
        "params": [
            "learning_rate",
            "rho",
            "momentum",
            "epsilon",
            "centered",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.SGD",
        "name": "SGD",
        "params": [
            "learning_rate",
            "momentum",
            "nesterov",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.queue.FIFOQueue",
        "name": "FIFOQueue",
        "params": [
            "capacity",
            "dtypes",
            "shapes",
            "names",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.queue.PaddingFIFOQueue",
        "name": "PaddingFIFOQueue",
        "params": [
            "capacity",
            "dtypes",
            "shapes",
            "names",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.queue.PriorityQueue",
        "name": "PriorityQueue",
        "params": [
            "capacity",
            "types",
            "shapes",
            "names",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.queue.QueueBase",
        "name": "QueueBase",
        "params": [
            "dtypes",
            "shapes",
            "names",
            "queue_ref"
        ]
    },
    {
        "full_name:": "tensorflow.queue.RandomShuffleQueue",
        "name": "RandomShuffleQueue",
        "params": [
            "capacity",
            "min_after_dequeue",
            "dtypes",
            "shapes",
            "names",
            "seed",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.random.Algorithm",
        "name": "Algorithm",
        "params": []
    },
    {
        "full_name:": "tensorflow.random.Generator",
        "name": "Generator",
        "params": [
            "copy_from",
            "state",
            "alg"
        ]
    },
    {
        "full_name:": "tensorflow.saved_model.Asset",
        "name": "Asset",
        "params": [
            "path"
        ]
    },
    {
        "full_name:": "tensorflow.saved_model.LoadOptions",
        "name": "LoadOptions",
        "params": [
            "allow_partial_checkpoint",
            "experimental_io_device",
            "experimental_skip_checkpoint"
        ]
    },
    {
        "full_name:": "tensorflow.saved_model.SaveOptions",
        "name": "SaveOptions",
        "params": [
            "namespace_whitelist",
            "save_debug_info",
            "function_aliases",
            "experimental_io_device",
            "experimental_variable_policy",
            "experimental_custom_gradients"
        ]
    },
    {
        "full_name:": "tensorflow.summary.SummaryWriter",
        "name": "SummaryWriter",
        "params": []
    },
    {
        "full_name:": "tensorflow.test.Benchmark",
        "name": "Benchmark",
        "params": []
    },
    {
        "full_name:": "tensorflow.test.TestCase",
        "name": "TestCase",
        "params": [
            "methodName"
        ]
    },
    {
        "full_name:": "tensorflow.tpu.XLAOptions",
        "name": "XLAOptions",
        "params": [
            "use_spmd_for_xla_partitioning",
            "enable_xla_dynamic_padder"
        ]
    },
    {
        "full_name:": "tensorflow.train.BytesList",
        "name": "BytesList",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.Checkpoint",
        "name": "Checkpoint",
        "params": [
            "root",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.train.CheckpointManager",
        "name": "CheckpointManager",
        "params": [
            "checkpoint",
            "directory",
            "max_to_keep",
            "keep_checkpoint_every_n_hours",
            "checkpoint_name",
            "step_counter",
            "checkpoint_interval",
            "init_fn"
        ]
    },
    {
        "full_name:": "tensorflow.train.CheckpointOptions",
        "name": "CheckpointOptions",
        "params": [
            "experimental_io_device"
        ]
    },
    {
        "full_name:": "tensorflow.train.ClusterDef",
        "name": "ClusterDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.ClusterSpec",
        "name": "ClusterSpec",
        "params": [
            "cluster"
        ]
    },
    {
        "full_name:": "tensorflow.train.Coordinator",
        "name": "Coordinator",
        "params": [
            "clean_stop_exception_types"
        ]
    },
    {
        "full_name:": "tensorflow.train.Example",
        "name": "Example",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.ExponentialMovingAverage",
        "name": "ExponentialMovingAverage",
        "params": [
            "decay",
            "num_updates",
            "zero_debias",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.train.Feature",
        "name": "Feature",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.FeatureList",
        "name": "FeatureList",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.FeatureLists",
        "name": "FeatureLists",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.Features",
        "name": "Features",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.FloatList",
        "name": "FloatList",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.Int64List",
        "name": "Int64List",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.JobDef",
        "name": "JobDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.SequenceExample",
        "name": "SequenceExample",
        "params": []
    },
    {
        "full_name:": "tensorflow.train.ServerDef",
        "name": "ServerDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.autograph.experimental.Feature",
        "name": "Feature",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.AttrValue",
        "name": "AttrValue",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.ConditionalAccumulator",
        "name": "ConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "shared_name",
            "name",
            "reduction_type"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.ConditionalAccumulatorBase",
        "name": "ConditionalAccumulatorBase",
        "params": [
            "dtype",
            "shape",
            "accumulator_ref"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.ConfigProto",
        "name": "ConfigProto",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.DeviceSpec",
        "name": "DeviceSpec",
        "params": [
            "job",
            "replica",
            "task",
            "device_type",
            "device_index"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.Dimension",
        "name": "Dimension",
        "params": [
            "value"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.Event",
        "name": "Event",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.FixedLengthRecordReader",
        "name": "FixedLengthRecordReader",
        "params": [
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "hop_bytes",
            "name",
            "encoding"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.GPUOptions",
        "name": "GPUOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.GraphDef",
        "name": "GraphDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.GraphKeys",
        "name": "GraphKeys",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.GraphOptions",
        "name": "GraphOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.HistogramProto",
        "name": "HistogramProto",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.IdentityReader",
        "name": "IdentityReader",
        "params": [
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.InteractiveSession",
        "name": "InteractiveSession",
        "params": [
            "target",
            "graph",
            "config"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.LMDBReader",
        "name": "LMDBReader",
        "params": [
            "name",
            "options"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.LogMessage",
        "name": "LogMessage",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.MetaGraphDef",
        "name": "MetaGraphDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.NameAttrList",
        "name": "NameAttrList",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.NodeDef",
        "name": "NodeDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.OptimizerOptions",
        "name": "OptimizerOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.ReaderBase",
        "name": "ReaderBase",
        "params": [
            "reader_ref",
            "supports_serialize"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.RunMetadata",
        "name": "RunMetadata",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.RunOptions",
        "name": "RunOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.Session",
        "name": "Session",
        "params": [
            "target",
            "graph",
            "config"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.SessionLog",
        "name": "SessionLog",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.SparseConditionalAccumulator",
        "name": "SparseConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "shared_name",
            "name",
            "reduction_type"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.SparseTensorValue",
        "name": "SparseTensorValue",
        "params": [
            "indices",
            "values",
            "dense_shape"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.Summary",
        "name": "Summary",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.SummaryMetadata",
        "name": "SummaryMetadata",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.TFRecordReader",
        "name": "TFRecordReader",
        "params": [
            "name",
            "options"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.TensorInfo",
        "name": "TensorInfo",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.TextLineReader",
        "name": "TextLineReader",
        "params": [
            "skip_header_lines",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.Variable",
        "name": "Variable",
        "params": [
            "initial_value",
            "trainable",
            "collections",
            "validate_shape",
            "caching_device",
            "name",
            "variable_def",
            "dtype",
            "expected_shape",
            "import_scope",
            "constraint",
            "use_resource",
            "synchronization",
            "aggregation",
            "shape"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.VariableAggregation",
        "name": "VariableAggregation",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.VariableScope",
        "name": "VariableScope",
        "params": [
            "reuse",
            "name",
            "initializer",
            "regularizer",
            "caching_device",
            "partitioner",
            "custom_getter",
            "name_scope",
            "dtype",
            "use_resource",
            "constraint"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.WholeFileReader",
        "name": "WholeFileReader",
        "params": [
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.Constant",
        "name": "Constant",
        "params": [
            "value",
            "dtype",
            "verify_shape"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.glorot_normal",
        "name": "glorot_normal",
        "params": [
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.glorot_uniform",
        "name": "glorot_uniform",
        "params": [
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.backend.name_scope",
        "name": "name_scope",
        "params": [
            "name",
            "default_name",
            "values"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.Ones",
        "name": "Ones",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.Orthogonal",
        "name": "Orthogonal",
        "params": [
            "gain",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.random_normal_initializer",
        "name": "random_normal_initializer",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.random_uniform_initializer",
        "name": "random_uniform_initializer",
        "params": [
            "minval",
            "maxval",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.truncated_normal_initializer",
        "name": "truncated_normal_initializer",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.uniform_unit_scaling_initializer",
        "name": "uniform_unit_scaling_initializer",
        "params": [
            "factor",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.variable_scope",
        "name": "variable_scope",
        "params": [
            "name_or_scope",
            "default_name",
            "values",
            "initializer",
            "regularizer",
            "caching_device",
            "partitioner",
            "custom_getter",
            "reuse",
            "dtype",
            "use_resource",
            "constraint",
            "auxiliary_name_scope"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.VarianceScaling",
        "name": "VarianceScaling",
        "params": [
            "scale",
            "mode",
            "distribution",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.Zeros",
        "name": "Zeros",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.config.experimental.ClusterDeviceFilters",
        "name": "ClusterDeviceFilters",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.AutoShardPolicy",
        "name": "AutoShardPolicy",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.AutotuneAlgorithm",
        "name": "AutotuneAlgorithm",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.AutotuneOptions",
        "name": "AutotuneOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.CheckpointInputPipelineHook",
        "name": "CheckpointInputPipelineHook",
        "params": [
            "estimator",
            "external_state_policy"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.CsvDataset",
        "name": "CsvDataset",
        "params": [
            "filenames",
            "record_defaults",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "exclude_cols"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.DatasetInitializer",
        "name": "DatasetInitializer",
        "params": [
            "dataset"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.DistributeOptions",
        "name": "DistributeOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.ExternalStatePolicy",
        "name": "ExternalStatePolicy",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.OptimizationOptions",
        "name": "OptimizationOptions",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.RandomDataset",
        "name": "RandomDataset",
        "params": [
            "seed",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.Reducer",
        "name": "Reducer",
        "params": [
            "init_func",
            "reduce_func",
            "finalize_func"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.SqlDataset",
        "name": "SqlDataset",
        "params": [
            "driver_name",
            "data_source_name",
            "query",
            "output_types"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.TFRecordWriter",
        "name": "TFRecordWriter",
        "params": [
            "filename",
            "compression_type"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.ClusterResolver",
        "name": "ClusterResolver",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.GCEClusterResolver",
        "name": "GCEClusterResolver",
        "params": [
            "project",
            "zone",
            "instance_group",
            "port",
            "task_type",
            "task_id",
            "rpc_layer",
            "credentials",
            "service"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.KubernetesClusterResolver",
        "name": "KubernetesClusterResolver",
        "params": [
            "job_to_label_mapping",
            "tf_server_port",
            "rpc_layer",
            "override_client"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.SimpleClusterResolver",
        "name": "SimpleClusterResolver",
        "params": [
            "cluster_spec",
            "master",
            "task_type",
            "task_id",
            "environment",
            "num_accelerators",
            "rpc_layer"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.SlurmClusterResolver",
        "name": "SlurmClusterResolver",
        "params": [
            "jobs",
            "port_base",
            "gpus_per_node",
            "gpus_per_task",
            "tasks_per_node",
            "auto_set_gpu",
            "rpc_layer"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.TFConfigClusterResolver",
        "name": "TFConfigClusterResolver",
        "params": [
            "task_type",
            "task_id",
            "rpc_layer",
            "environment"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.TPUClusterResolver",
        "name": "TPUClusterResolver",
        "params": [
            "tpu",
            "zone",
            "project",
            "job_name",
            "coordinator_name",
            "coordinator_address",
            "credentials",
            "service",
            "discovery_url"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.cluster_resolver.UnionResolver",
        "name": "UnionResolver",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.coordinator.ClusterCoordinator",
        "name": "ClusterCoordinator",
        "params": [
            "strategy"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.coordinator.PerWorkerValues",
        "name": "PerWorkerValues",
        "params": [
            "values"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.coordinator.RemoteValue",
        "name": "RemoteValue",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.experimental.CentralStorageStrategy",
        "name": "CentralStorageStrategy",
        "params": [
            "compute_devices",
            "parameter_device"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.CommunicationImplementation",
        "name": "CommunicationImplementation",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.experimental.CollectiveHints",
        "name": "CollectiveHints",
        "params": [
            "bytes_per_pack",
            "timeout_seconds"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.CommunicationOptions",
        "name": "CommunicationOptions",
        "params": [
            "bytes_per_pack",
            "timeout_seconds",
            "implementation"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.MultiWorkerMirroredStrategy",
        "name": "MultiWorkerMirroredStrategy",
        "params": [
            "communication",
            "cluster_resolver"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.TPUStrategy",
        "name": "TPUStrategy",
        "params": [
            "tpu_cluster_resolver",
            "device_assignment"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.ValueContext",
        "name": "ValueContext",
        "params": [
            "replica_id_in_sync_group",
            "num_replicas_in_sync"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.experimental.InMemoryEvaluatorHook",
        "name": "InMemoryEvaluatorHook",
        "params": [
            "estimator",
            "input_fn",
            "steps",
            "hooks",
            "name",
            "every_n_iter"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.experimental.LinearSDCA",
        "name": "LinearSDCA",
        "params": [
            "example_id_column",
            "num_loss_partitions",
            "num_table_shards",
            "symmetric_l1_regularization",
            "symmetric_l2_regularization",
            "adaptive"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.experimental.RNNClassifier",
        "name": "RNNClassifier",
        "params": [
            "sequence_feature_columns",
            "context_feature_columns",
            "units",
            "cell_type",
            "rnn_cell_fn",
            "return_sequences",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "loss_reduction",
            "sequence_mask",
            "config"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.experimental.RNNEstimator",
        "name": "RNNEstimator",
        "params": [
            "head",
            "sequence_feature_columns",
            "context_feature_columns",
            "units",
            "cell_type",
            "rnn_cell_fn",
            "return_sequences",
            "model_dir",
            "optimizer",
            "config"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.export.ClassificationOutput",
        "name": "ClassificationOutput",
        "params": [
            "scores",
            "classes"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.export.EvalOutput",
        "name": "EvalOutput",
        "params": [
            "loss",
            "predictions",
            "metrics"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.export.ExportOutput",
        "name": "ExportOutput",
        "params": []
    },
    {
        "full_name:": "tensorflow.estimator.export.PredictOutput",
        "name": "PredictOutput",
        "params": [
            "outputs"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.export.RegressionOutput",
        "name": "RegressionOutput",
        "params": [
            "value"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.export.ServingInputReceiver",
        "name": "ServingInputReceiver",
        "params": [
            "features",
            "receiver_tensors",
            "receiver_tensors_alternatives"
        ]
    },
    {
        "full_name:": "tensorflow.estimator.export.TensorServingInputReceiver",
        "name": "TensorServingInputReceiver",
        "params": [
            "features",
            "receiver_tensors",
            "receiver_tensors_alternatives"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.bool_",
        "name": "bool_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.complex128",
        "name": "complex128",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.complex64",
        "name": "complex64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.float16",
        "name": "float16",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.float32",
        "name": "float32",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.float64",
        "name": "float64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.iinfo",
        "name": "iinfo",
        "params": [
            "int_type"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.inexact",
        "name": "inexact",
        "params": []
    },
    {
        "full_name:": "tensorflow.experimental.numpy.int16",
        "name": "int16",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.int32",
        "name": "int32",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.int64",
        "name": "int64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.int8",
        "name": "int8",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.object_",
        "name": "object_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.string_",
        "name": "string_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.uint16",
        "name": "uint16",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.uint32",
        "name": "uint32",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.uint64",
        "name": "uint64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.uint8",
        "name": "uint8",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.numpy.unicode_",
        "name": "unicode_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.tensorrt.ConversionParams",
        "name": "ConversionParams",
        "params": [
            "max_workspace_size_bytes",
            "precision_mode",
            "minimum_segment_size",
            "maximum_cached_engines",
            "use_calibration",
            "allow_build_at_runtime"
        ]
    },
    {
        "full_name:": "tensorflow.experimental.tensorrt.Converter",
        "name": "Converter",
        "params": [
            "input_saved_model_dir",
            "input_saved_model_tags",
            "input_saved_model_signature_key",
            "use_dynamic_shape",
            "dynamic_shape_profile_strategy",
            "max_workspace_size_bytes",
            "precision_mode",
            "minimum_segment_size",
            "maximum_cached_engines",
            "use_calibration",
            "allow_build_at_runtime",
            "conversion_params"
        ]
    },
    {
        "full_name:": "tensorflow.io.gfile.GFile",
        "name": "GFile",
        "params": [
            "name",
            "mode"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.BackupAndRestore",
        "name": "BackupAndRestore",
        "params": [
            "backup_dir"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.BaseLogger",
        "name": "BaseLogger",
        "params": [
            "stateful_metrics"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.CSVLogger",
        "name": "CSVLogger",
        "params": [
            "filename",
            "separator",
            "append"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.Callback",
        "name": "Callback",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.callbacks.CallbackList",
        "name": "CallbackList",
        "params": [
            "callbacks",
            "add_history",
            "add_progbar",
            "model",
            "null"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.EarlyStopping",
        "name": "EarlyStopping",
        "params": [
            "monitor",
            "min_delta",
            "patience",
            "verbose",
            "mode",
            "baseline",
            "restore_best_weights"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.History",
        "name": "History",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.callbacks.LambdaCallback",
        "name": "LambdaCallback",
        "params": [
            "on_epoch_begin",
            "on_epoch_end",
            "on_batch_begin",
            "on_batch_end",
            "on_train_begin",
            "on_train_end",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.LearningRateScheduler",
        "name": "LearningRateScheduler",
        "params": [
            "schedule",
            "verbose"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.ModelCheckpoint",
        "name": "ModelCheckpoint",
        "params": [
            "filepath",
            "monitor",
            "verbose",
            "save_best_only",
            "save_weights_only",
            "mode",
            "save_freq",
            "options",
            "initial_value_threshold",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.ProgbarLogger",
        "name": "ProgbarLogger",
        "params": [
            "count_mode",
            "stateful_metrics"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.ReduceLROnPlateau",
        "name": "ReduceLROnPlateau",
        "params": [
            "monitor",
            "factor",
            "patience",
            "verbose",
            "mode",
            "min_delta",
            "cooldown",
            "min_lr",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.RemoteMonitor",
        "name": "RemoteMonitor",
        "params": [
            "root",
            "path",
            "field",
            "headers",
            "send_as_json"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.TensorBoard",
        "name": "TensorBoard",
        "params": [
            "log_dir",
            "histogram_freq",
            "write_graph",
            "write_images",
            "write_steps_per_second",
            "update_freq",
            "profile_batch",
            "embeddings_freq",
            "embeddings_metadata",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.callbacks.TerminateOnNaN",
        "name": "TerminateOnNaN",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.constraints.Constraint",
        "name": "Constraint",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.constraints.MaxNorm",
        "name": "MaxNorm",
        "params": [
            "max_value",
            "axis"
        ]
    },
    {
        "full_name:": "tensorflow.keras.constraints.MinMaxNorm",
        "name": "MinMaxNorm",
        "params": [
            "min_value",
            "max_value",
            "rate",
            "axis"
        ]
    },
    {
        "full_name:": "tensorflow.keras.constraints.NonNeg",
        "name": "NonNeg",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.constraints.RadialConstraint",
        "name": "RadialConstraint",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.constraints.UnitNorm",
        "name": "UnitNorm",
        "params": [
            "axis"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.CosineDecay",
        "name": "CosineDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "alpha",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.CosineDecayRestarts",
        "name": "CosineDecayRestarts",
        "params": [
            "initial_learning_rate",
            "first_decay_steps",
            "t_mul",
            "m_mul",
            "alpha",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.experimental.LinearModel",
        "name": "LinearModel",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.experimental.PeepholeLSTMCell",
        "name": "PeepholeLSTMCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.experimental.SequenceFeatures",
        "name": "SequenceFeatures",
        "params": [
            "feature_columns",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.experimental.SidecarEvaluator",
        "name": "SidecarEvaluator",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.experimental.WideDeepModel",
        "name": "WideDeepModel",
        "params": [
            "linear_model",
            "dnn_model",
            "activation",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.AbstractRNNCell",
        "name": "AbstractRNNCell",
        "params": [
            "trainable",
            "name",
            "dtype",
            "dynamic",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Activation",
        "name": "Activation",
        "params": [
            "activation",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ActivityRegularization",
        "name": "ActivityRegularization",
        "params": [
            "l1",
            "l2",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Add",
        "name": "Add",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.AdditiveAttention",
        "name": "AdditiveAttention",
        "params": [
            "use_scale",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.AlphaDropout",
        "name": "AlphaDropout",
        "params": [
            "rate",
            "noise_shape",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Attention",
        "name": "Attention",
        "params": [
            "use_scale",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Average",
        "name": "Average",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.AveragePooling1D",
        "name": "AveragePooling1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.AveragePooling2D",
        "name": "AveragePooling2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.AveragePooling3D",
        "name": "AveragePooling3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.BatchNormalization",
        "name": "BatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Bidirectional",
        "name": "Bidirectional",
        "params": [
            "layer",
            "merge_mode",
            "weights",
            "backward_layer",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.CategoryEncoding",
        "name": "CategoryEncoding",
        "params": [
            "num_tokens",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.CenterCrop",
        "name": "CenterCrop",
        "params": [
            "height",
            "width",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Concatenate",
        "name": "Concatenate",
        "params": [
            "axis",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Conv1D",
        "name": "Conv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "groups",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Conv1DTranspose",
        "name": "Conv1DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "output_padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Conv2D",
        "name": "Conv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "groups",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Conv2DTranspose",
        "name": "Conv2DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "output_padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Conv3D",
        "name": "Conv3D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "groups",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Conv3DTranspose",
        "name": "Conv3DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "output_padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ConvLSTM1D",
        "name": "ConvLSTM1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ConvLSTM2D",
        "name": "ConvLSTM2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ConvLSTM3D",
        "name": "ConvLSTM3D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Cropping1D",
        "name": "Cropping1D",
        "params": [
            "cropping",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Cropping2D",
        "name": "Cropping2D",
        "params": [
            "cropping",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Cropping3D",
        "name": "Cropping3D",
        "params": [
            "cropping",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Dense",
        "name": "Dense",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.DenseFeatures",
        "name": "DenseFeatures",
        "params": [
            "feature_columns",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.DepthwiseConv1D",
        "name": "DepthwiseConv1D",
        "params": [
            "kernel_size",
            "strides",
            "padding",
            "depth_multiplier",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.DepthwiseConv2D",
        "name": "DepthwiseConv2D",
        "params": [
            "kernel_size",
            "strides",
            "padding",
            "depth_multiplier",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Discretization",
        "name": "Discretization",
        "params": [
            "bin_boundaries",
            "num_bins",
            "epsilon",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Dot",
        "name": "Dot",
        "params": [
            "axes",
            "normalize",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Dropout",
        "name": "Dropout",
        "params": [
            "rate",
            "noise_shape",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ELU",
        "name": "ELU",
        "params": [
            "alpha",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Embedding",
        "name": "Embedding",
        "params": [
            "input_dim",
            "output_dim",
            "embeddings_initializer",
            "embeddings_regularizer",
            "activity_regularizer",
            "embeddings_constraint",
            "mask_zero",
            "input_length",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Flatten",
        "name": "Flatten",
        "params": [
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GRU",
        "name": "GRU",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "time_major",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GRUCell",
        "name": "GRUCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GaussianDropout",
        "name": "GaussianDropout",
        "params": [
            "rate",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GaussianNoise",
        "name": "GaussianNoise",
        "params": [
            "stddev",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GlobalAveragePooling1D",
        "name": "GlobalAveragePooling1D",
        "params": [
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GlobalAveragePooling2D",
        "name": "GlobalAveragePooling2D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GlobalAveragePooling3D",
        "name": "GlobalAveragePooling3D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GlobalMaxPool1D",
        "name": "GlobalMaxPool1D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GlobalMaxPool2D",
        "name": "GlobalMaxPool2D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.GlobalMaxPool3D",
        "name": "GlobalMaxPool3D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Hashing",
        "name": "Hashing",
        "params": [
            "num_bins",
            "mask_value",
            "salt",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.InputLayer",
        "name": "InputLayer",
        "params": [
            "input_shape",
            "batch_size",
            "dtype",
            "input_tensor",
            "sparse",
            "name",
            "ragged",
            "type_spec",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.InputSpec",
        "name": "InputSpec",
        "params": [
            "dtype",
            "shape",
            "ndim",
            "max_ndim",
            "min_ndim",
            "axes",
            "allow_last_axis_squeeze",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.IntegerLookup",
        "name": "IntegerLookup",
        "params": [
            "max_tokens",
            "num_oov_indices",
            "mask_token",
            "oov_token",
            "vocabulary",
            "vocabulary_dtype",
            "idf_weights",
            "invert",
            "output_mode",
            "sparse",
            "pad_to_max_tokens",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.LSTM",
        "name": "LSTM",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "time_major",
            "unroll",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.LSTMCell",
        "name": "LSTMCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Lambda",
        "name": "Lambda",
        "params": [
            "function",
            "output_shape",
            "mask",
            "arguments",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Layer",
        "name": "Layer",
        "params": [
            "trainable",
            "name",
            "dtype",
            "dynamic",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.LayerNormalization",
        "name": "LayerNormalization",
        "params": [
            "axis",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.LeakyReLU",
        "name": "LeakyReLU",
        "params": [
            "alpha",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.LocallyConnected1D",
        "name": "LocallyConnected1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "implementation",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.LocallyConnected2D",
        "name": "LocallyConnected2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "implementation",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Masking",
        "name": "Masking",
        "params": [
            "mask_value",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.MaxPool1D",
        "name": "MaxPool1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.MaxPool2D",
        "name": "MaxPool2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.MaxPool3D",
        "name": "MaxPool3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Maximum",
        "name": "Maximum",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Minimum",
        "name": "Minimum",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.MultiHeadAttention",
        "name": "MultiHeadAttention",
        "params": [
            "num_heads",
            "key_dim",
            "value_dim",
            "dropout",
            "use_bias",
            "output_shape",
            "attention_axes",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Multiply",
        "name": "Multiply",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Normalization",
        "name": "Normalization",
        "params": [
            "axis",
            "mean",
            "variance",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.PReLU",
        "name": "PReLU",
        "params": [
            "alpha_initializer",
            "alpha_regularizer",
            "alpha_constraint",
            "shared_axes",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Permute",
        "name": "Permute",
        "params": [
            "dims",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RNN",
        "name": "RNN",
        "params": [
            "cell",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "time_major",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomContrast",
        "name": "RandomContrast",
        "params": [
            "factor",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomCrop",
        "name": "RandomCrop",
        "params": [
            "height",
            "width",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomFlip",
        "name": "RandomFlip",
        "params": [
            "mode",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomHeight",
        "name": "RandomHeight",
        "params": [
            "factor",
            "interpolation",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomRotation",
        "name": "RandomRotation",
        "params": [
            "factor",
            "fill_mode",
            "interpolation",
            "seed",
            "fill_value",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomTranslation",
        "name": "RandomTranslation",
        "params": [
            "height_factor",
            "width_factor",
            "fill_mode",
            "interpolation",
            "seed",
            "fill_value",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomWidth",
        "name": "RandomWidth",
        "params": [
            "factor",
            "interpolation",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RandomZoom",
        "name": "RandomZoom",
        "params": [
            "height_factor",
            "width_factor",
            "fill_mode",
            "interpolation",
            "seed",
            "fill_value",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ReLU",
        "name": "ReLU",
        "params": [
            "max_value",
            "negative_slope",
            "threshold",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.RepeatVector",
        "name": "RepeatVector",
        "params": [
            "n",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Rescaling",
        "name": "Rescaling",
        "params": [
            "scale",
            "offset",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Reshape",
        "name": "Reshape",
        "params": [
            "target_shape",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Resizing",
        "name": "Resizing",
        "params": [
            "height",
            "width",
            "interpolation",
            "crop_to_aspect_ratio",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SeparableConv1D",
        "name": "SeparableConv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SeparableConv2D",
        "name": "SeparableConv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SimpleRNN",
        "name": "SimpleRNN",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SimpleRNNCell",
        "name": "SimpleRNNCell",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Softmax",
        "name": "Softmax",
        "params": [
            "axis",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SpatialDropout1D",
        "name": "SpatialDropout1D",
        "params": [
            "rate",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SpatialDropout2D",
        "name": "SpatialDropout2D",
        "params": [
            "rate",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.SpatialDropout3D",
        "name": "SpatialDropout3D",
        "params": [
            "rate",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.StackedRNNCells",
        "name": "StackedRNNCells",
        "params": [
            "cells",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.StringLookup",
        "name": "StringLookup",
        "params": [
            "max_tokens",
            "num_oov_indices",
            "mask_token",
            "oov_token",
            "vocabulary",
            "idf_weights",
            "encoding",
            "invert",
            "output_mode",
            "sparse",
            "pad_to_max_tokens",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Subtract",
        "name": "Subtract",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.TextVectorization",
        "name": "TextVectorization",
        "params": [
            "max_tokens",
            "standardize",
            "split",
            "ngrams",
            "output_mode",
            "output_sequence_length",
            "pad_to_max_tokens",
            "vocabulary",
            "idf_weights",
            "sparse",
            "ragged",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ThresholdedReLU",
        "name": "ThresholdedReLU",
        "params": [
            "theta",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.TimeDistributed",
        "name": "TimeDistributed",
        "params": [
            "layer",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.UpSampling1D",
        "name": "UpSampling1D",
        "params": [
            "size",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.UpSampling2D",
        "name": "UpSampling2D",
        "params": [
            "size",
            "data_format",
            "interpolation",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.UpSampling3D",
        "name": "UpSampling3D",
        "params": [
            "size",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.Wrapper",
        "name": "Wrapper",
        "params": [
            "layer",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ZeroPadding1D",
        "name": "ZeroPadding1D",
        "params": [
            "padding",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ZeroPadding2D",
        "name": "ZeroPadding2D",
        "params": [
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.ZeroPadding3D",
        "name": "ZeroPadding3D",
        "params": [
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.mixed_precision.LossScaleOptimizer",
        "name": "LossScaleOptimizer",
        "params": [
            "inner_optimizer",
            "dynamic",
            "initial_scale",
            "dynamic_growth_steps"
        ]
    },
    {
        "full_name:": "tensorflow.keras.mixed_precision.Policy",
        "name": "Policy",
        "params": [
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.regularizers.L1",
        "name": "L1",
        "params": [
            "l1",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.regularizers.L1L2",
        "name": "L1L2",
        "params": [
            "l1",
            "l2"
        ]
    },
    {
        "full_name:": "tensorflow.keras.regularizers.L2",
        "name": "L2",
        "params": [
            "l2",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.regularizers.Regularizer",
        "name": "Regularizer",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.utils.custom_object_scope",
        "name": "custom_object_scope",
        "params": [
            "*args"
        ]
    },
    {
        "full_name:": "tensorflow.keras.utils.GeneratorEnqueuer",
        "name": "GeneratorEnqueuer",
        "params": [
            "generator",
            "use_multiprocessing",
            "random_seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.utils.OrderedEnqueuer",
        "name": "OrderedEnqueuer",
        "params": [
            "sequence",
            "use_multiprocessing",
            "shuffle"
        ]
    },
    {
        "full_name:": "tensorflow.keras.utils.Progbar",
        "name": "Progbar",
        "params": [
            "target",
            "width",
            "verbose",
            "interval",
            "stateful_metrics",
            "unit_name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.utils.Sequence",
        "name": "Sequence",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.utils.SequenceEnqueuer",
        "name": "SequenceEnqueuer",
        "params": [
            "sequence",
            "use_multiprocessing"
        ]
    },
    {
        "full_name:": "tensorflow.keras.utils.SidecarEvaluator",
        "name": "SidecarEvaluator",
        "params": [
            "model",
            "data",
            "checkpoint_dir",
            "steps",
            "max_evaluations",
            "callbacks"
        ]
    },
    {
        "full_name:": "tensorflow.lite.experimental.Analyzer",
        "name": "Analyzer",
        "params": []
    },
    {
        "full_name:": "tensorflow.lite.experimental.OpResolverType",
        "name": "OpResolverType",
        "params": []
    },
    {
        "full_name:": "tensorflow.lite.experimental.QuantizationDebugOptions",
        "name": "QuantizationDebugOptions",
        "params": [
            "layer_debug_metrics",
            "model_debug_metrics",
            "layer_direct_compare_metrics",
            "denylisted_ops",
            "denylisted_nodes",
            "fully_quantize"
        ]
    },
    {
        "full_name:": "tensorflow.lite.experimental.QuantizationDebugger",
        "name": "QuantizationDebugger",
        "params": [
            "quant_debug_model_path",
            "quant_debug_model_content",
            "float_model_path",
            "float_model_content",
            "debug_dataset",
            "debug_options",
            "converter"
        ]
    },
    {
        "full_name:": "tensorflow.lookup.experimental.DenseHashTable",
        "name": "DenseHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "default_value",
            "empty_key",
            "deleted_key",
            "initial_num_buckets",
            "name",
            "checkpoint",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name:": "tensorflow.lookup.experimental.MutableHashTable",
        "name": "MutableHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "default_value",
            "name",
            "checkpoint",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name:": "tensorflow.mixed_precision.experimental.DynamicLossScale",
        "name": "DynamicLossScale",
        "params": [
            "initial_loss_scale",
            "increment_period",
            "multiplier"
        ]
    },
    {
        "full_name:": "tensorflow.mixed_precision.experimental.FixedLossScale",
        "name": "FixedLossScale",
        "params": [
            "loss_scale_value"
        ]
    },
    {
        "full_name:": "tensorflow.mixed_precision.experimental.LossScale",
        "name": "LossScale",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.ExponentialDecay",
        "name": "ExponentialDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.InverseTimeDecay",
        "name": "InverseTimeDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
        "name": "LearningRateSchedule",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.PiecewiseConstantDecay",
        "name": "PiecewiseConstantDecay",
        "params": [
            "boundaries",
            "values",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.keras.optimizers.schedules.PolynomialDecay",
        "name": "PolynomialDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "end_learning_rate",
            "power",
            "cycle",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.profiler.experimental.Profile",
        "name": "Profile",
        "params": [
            "logdir",
            "options"
        ]
    },
    {
        "full_name:": "tensorflow.profiler.experimental.ProfilerOptions",
        "name": "ProfilerOptions",
        "params": [
            "host_tracer_level",
            "python_tracer_level",
            "device_tracer_level",
            "delay_ms"
        ]
    },
    {
        "full_name:": "tensorflow.profiler.experimental.Trace",
        "name": "Trace",
        "params": [
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.saved_model.experimental.TrackableResource",
        "name": "TrackableResource",
        "params": [
            "device"
        ]
    },
    {
        "full_name:": "tensorflow.saved_model.experimental.VariablePolicy",
        "name": "VariablePolicy",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.DeviceAssignment",
        "name": "DeviceAssignment",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.TPUSystemMetadata",
        "name": "TPUSystemMetadata",
        "params": [
            "num_cores",
            "num_hosts",
            "num_of_cores_per_host",
            "topology",
            "devices"
        ]
    },
    {
        "full_name:": "tensorflow.tpu.experimental.Topology",
        "name": "Topology",
        "params": [
            "serialized",
            "mesh_shape",
            "device_coordinates"
        ]
    },
    {
        "full_name:": "tensorflow.train.experimental.PythonState",
        "name": "PythonState",
        "params": []
    },
    {
        "full_name:": "tensorflow.types.experimental.Callable",
        "name": "Callable",
        "params": []
    },
    {
        "full_name:": "tensorflow.types.experimental.ConcreteFunction",
        "name": "ConcreteFunction",
        "params": []
    },
    {
        "full_name:": "tensorflow.types.experimental.GenericFunction",
        "name": "GenericFunction",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.data.Dataset",
        "name": "Dataset",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.data.FixedLengthRecordDataset",
        "name": "FixedLengthRecordDataset",
        "params": [
            "filenames",
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "buffer_size",
            "compression_type",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.data.Iterator",
        "name": "Iterator",
        "params": [
            "iterator_resource",
            "initializer",
            "output_types",
            "output_shapes",
            "output_classes"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.data.TFRecordDataset",
        "name": "TFRecordDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.data.TextLineDataset",
        "name": "TextLineDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.MirroredStrategy",
        "name": "MirroredStrategy",
        "params": [
            "devices",
            "cross_device_ops"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.OneDeviceStrategy",
        "name": "OneDeviceStrategy",
        "params": [
            "device"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.ReplicaContext",
        "name": "ReplicaContext",
        "params": [
            "strategy",
            "replica_id_in_sync_group"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.Strategy",
        "name": "Strategy",
        "params": [
            "extended"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.StrategyExtended",
        "name": "StrategyExtended",
        "params": [
            "container_strategy"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Bernoulli",
        "name": "Bernoulli",
        "params": [
            "logits",
            "probs",
            "dtype",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Beta",
        "name": "Beta",
        "params": [
            "concentration1",
            "concentration0",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Categorical",
        "name": "Categorical",
        "params": [
            "logits",
            "probs",
            "dtype",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Dirichlet",
        "name": "Dirichlet",
        "params": [
            "concentration",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.DirichletMultinomial",
        "name": "DirichletMultinomial",
        "params": [
            "total_count",
            "concentration",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Distribution",
        "name": "Distribution",
        "params": [
            "dtype",
            "reparameterization_type",
            "validate_args",
            "allow_nan_stats",
            "parameters",
            "graph_parents",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Exponential",
        "name": "Exponential",
        "params": [
            "rate",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Gamma",
        "name": "Gamma",
        "params": [
            "concentration",
            "rate",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Laplace",
        "name": "Laplace",
        "params": [
            "loc",
            "scale",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Multinomial",
        "name": "Multinomial",
        "params": [
            "total_count",
            "logits",
            "probs",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Normal",
        "name": "Normal",
        "params": [
            "loc",
            "scale",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.RegisterKL",
        "name": "RegisterKL",
        "params": [
            "dist_cls_a",
            "dist_cls_b"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.ReparameterizationType",
        "name": "ReparameterizationType",
        "params": [
            "rep_type"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.StudentT",
        "name": "StudentT",
        "params": [
            "df",
            "loc",
            "scale",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distributions.Uniform",
        "name": "Uniform",
        "params": [
            "low",
            "high",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.errors.raise_exception_on_not_ok_status",
        "name": "raise_exception_on_not_ok_status",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.BaselineClassifier",
        "name": "BaselineClassifier",
        "params": [
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.BaselineEstimator",
        "name": "BaselineEstimator",
        "params": [
            "head",
            "model_dir",
            "optimizer",
            "config"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.BaselineRegressor",
        "name": "BaselineRegressor",
        "params": [
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.DNNClassifier",
        "name": "DNNClassifier",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.DNNEstimator",
        "name": "DNNEstimator",
        "params": [
            "head",
            "hidden_units",
            "feature_columns",
            "model_dir",
            "optimizer",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "batch_norm"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.DNNLinearCombinedClassifier",
        "name": "DNNLinearCombinedClassifier",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.DNNLinearCombinedEstimator",
        "name": "DNNLinearCombinedEstimator",
        "params": [
            "head",
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "input_layer_partitioner",
            "config",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.DNNLinearCombinedRegressor",
        "name": "DNNLinearCombinedRegressor",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "label_dimension",
            "weight_column",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.DNNRegressor",
        "name": "DNNRegressor",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.Estimator",
        "name": "Estimator",
        "params": [
            "model_fn",
            "model_dir",
            "config",
            "params",
            "warm_start_from"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.LinearClassifier",
        "name": "LinearClassifier",
        "params": [
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "partitioner",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.LinearEstimator",
        "name": "LinearEstimator",
        "params": [
            "head",
            "feature_columns",
            "model_dir",
            "optimizer",
            "config",
            "partitioner",
            "sparse_combiner",
            "warm_start_from"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.LinearRegressor",
        "name": "LinearRegressor",
        "params": [
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "partitioner",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.ArgumentParser",
        "name": "ArgumentParser",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.ArgumentSerializer",
        "name": "ArgumentSerializer",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.BaseListParser",
        "name": "BaseListParser",
        "params": [
            "token",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.BooleanFlag",
        "name": "BooleanFlag",
        "params": [
            "name",
            "default",
            "help",
            "short_name",
            "null"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.BooleanParser",
        "name": "BooleanParser",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.CantOpenFlagFileError",
        "name": "CantOpenFlagFileError",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.CsvListSerializer",
        "name": "CsvListSerializer",
        "params": [
            "list_sep"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.DuplicateFlagError",
        "name": "DuplicateFlagError",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.EnumClassFlag",
        "name": "EnumClassFlag",
        "params": [
            "name",
            "default",
            "help",
            "enum_class",
            "short_name",
            "case_sensitive",
            "null"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.EnumClassListSerializer",
        "name": "EnumClassListSerializer",
        "params": [
            "list_sep",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.EnumClassParser",
        "name": "EnumClassParser",
        "params": [
            "enum_class",
            "case_sensitive"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.EnumClassSerializer",
        "name": "EnumClassSerializer",
        "params": [
            "lowercase"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.EnumFlag",
        "name": "EnumFlag",
        "params": [
            "name",
            "default",
            "help",
            "enum_values",
            "short_name",
            "case_sensitive",
            "null"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.EnumParser",
        "name": "EnumParser",
        "params": [
            "enum_values",
            "case_sensitive"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.Error",
        "name": "Error",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.Flag",
        "name": "Flag",
        "params": [
            "parser",
            "serializer",
            "name",
            "default",
            "help_string",
            "short_name",
            "boolean",
            "allow_override",
            "allow_override_cpp",
            "allow_hide_cpp",
            "allow_overwrite",
            "allow_using_method_names"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.FlagHolder",
        "name": "FlagHolder",
        "params": [
            "flag_values",
            "flag",
            "ensure_non_none_value"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.FlagNameConflictsWithMethodError",
        "name": "FlagNameConflictsWithMethodError",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.FlagValues",
        "name": "FlagValues",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.FloatParser",
        "name": "FloatParser",
        "params": [
            "lower_bound",
            "upper_bound"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.IllegalFlagValueError",
        "name": "IllegalFlagValueError",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.IntegerParser",
        "name": "IntegerParser",
        "params": [
            "lower_bound",
            "upper_bound"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.ListParser",
        "name": "ListParser",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.ListSerializer",
        "name": "ListSerializer",
        "params": [
            "list_sep"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.MultiEnumClassFlag",
        "name": "MultiEnumClassFlag",
        "params": [
            "name",
            "default",
            "help_string",
            "enum_class",
            "case_sensitive",
            "null"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.MultiFlag",
        "name": "MultiFlag",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.UnparsedFlagAccessError",
        "name": "UnparsedFlagAccessError",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.UnrecognizedFlagError",
        "name": "UnrecognizedFlagError",
        "params": [
            "flagname",
            "flagvalue",
            "suggestions"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.ValidationError",
        "name": "ValidationError",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.WhitespaceSeparatedListParser",
        "name": "WhitespaceSeparatedListParser",
        "params": [
            "comma_compat"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.gfile.FastGFile",
        "name": "FastGFile",
        "params": [
            "name",
            "mode"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.image.ResizeMethod",
        "name": "ResizeMethod",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.Identity",
        "name": "Identity",
        "params": [
            "gain",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.io.TFRecordCompressionType",
        "name": "TFRecordCompressionType",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.AveragePooling1D",
        "name": "AveragePooling1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.AveragePooling2D",
        "name": "AveragePooling2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.AveragePooling3D",
        "name": "AveragePooling3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.BatchNormalization",
        "name": "BatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "renorm",
            "renorm_clipping",
            "renorm_momentum",
            "fused",
            "trainable",
            "virtual_batch_size",
            "adjustment",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Conv1D",
        "name": "Conv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Conv2D",
        "name": "Conv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Conv2DTranspose",
        "name": "Conv2DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Conv3D",
        "name": "Conv3D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Conv3DTranspose",
        "name": "Conv3DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Dense",
        "name": "Dense",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Dropout",
        "name": "Dropout",
        "params": [
            "rate",
            "noise_shape",
            "seed",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Flatten",
        "name": "Flatten",
        "params": [
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.Layer",
        "name": "Layer",
        "params": [
            "trainable",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.MaxPooling1D",
        "name": "MaxPooling1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.MaxPooling2D",
        "name": "MaxPooling2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.MaxPooling3D",
        "name": "MaxPooling3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.SeparableConv1D",
        "name": "SeparableConv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.layers.SeparableConv2D",
        "name": "SeparableConv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.lite.OpHint",
        "name": "OpHint",
        "params": [
            "function_name",
            "level",
            "children_inputs_mappings",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.lite.TFLiteConverter",
        "name": "TFLiteConverter",
        "params": [
            "graph_def",
            "input_tensors",
            "output_tensors",
            "input_arrays_with_shape",
            "output_arrays",
            "experimental_debug_info_func"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.lite.TocoConverter",
        "name": "TocoConverter",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.lookup.StaticHashTable",
        "name": "StaticHashTable",
        "params": [
            "initializer",
            "default_value",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.lookup.StaticVocabularyTable",
        "name": "StaticVocabularyTable",
        "params": [
            "initializer",
            "num_oov_buckets",
            "lookup_key_dtype",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.losses.Reduction",
        "name": "Reduction",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.mixed_precision.MixedPrecisionLossScaleOptimizer",
        "name": "MixedPrecisionLossScaleOptimizer",
        "params": [
            "opt",
            "loss_scale"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.profiler.AdviceProto",
        "name": "AdviceProto",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.profiler.GraphNodeProto",
        "name": "GraphNodeProto",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.profiler.MultiGraphNodeProto",
        "name": "MultiGraphNodeProto",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.profiler.OpLogProto",
        "name": "OpLogProto",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.profiler.ProfileOptionBuilder",
        "name": "ProfileOptionBuilder",
        "params": [
            "options"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.profiler.Profiler",
        "name": "Profiler",
        "params": [
            "graph",
            "op_log"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.ragged.RaggedTensorValue",
        "name": "RaggedTensorValue",
        "params": [
            "values",
            "row_splits"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.saved_model.Builder",
        "name": "Builder",
        "params": [
            "export_dir"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.summary.FileWriter",
        "name": "FileWriter",
        "params": [
            "logdir",
            "graph",
            "max_queue",
            "flush_secs",
            "graph_def",
            "filename_suffix",
            "session"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.summary.FileWriterCache",
        "name": "FileWriterCache",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.summary.SummaryDescription",
        "name": "SummaryDescription",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.summary.TaggedRunMetadata",
        "name": "TaggedRunMetadata",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.test.StubOutForTesting",
        "name": "StubOutForTesting",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.tpu.CrossShardOptimizer",
        "name": "CrossShardOptimizer",
        "params": [
            "opt",
            "reduction",
            "name",
            "group_assignment"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.tpu.PaddingSpec",
        "name": "PaddingSpec",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.train.AdadeltaOptimizer",
        "name": "AdadeltaOptimizer",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.AdagradDAOptimizer",
        "name": "AdagradDAOptimizer",
        "params": [
            "learning_rate",
            "global_step",
            "initial_gradient_squared_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.AdagradOptimizer",
        "name": "AdagradOptimizer",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.AdamOptimizer",
        "name": "AdamOptimizer",
        "params": [
            "learning_rate",
            "beta1",
            "beta2",
            "epsilon",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.Checkpoint",
        "name": "Checkpoint",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.ChiefSessionCreator",
        "name": "ChiefSessionCreator",
        "params": [
            "scaffold",
            "master",
            "config",
            "checkpoint_dir",
            "checkpoint_filename_with_path"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.FtrlOptimizer",
        "name": "FtrlOptimizer",
        "params": [
            "learning_rate",
            "learning_rate_power",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name",
            "accum_name",
            "linear_name",
            "l2_shrinkage_regularization_strength",
            "beta"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.GradientDescentOptimizer",
        "name": "GradientDescentOptimizer",
        "params": [
            "learning_rate",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.LooperThread",
        "name": "LooperThread",
        "params": [
            "coord",
            "timer_interval_secs",
            "target",
            "args",
            "kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.MomentumOptimizer",
        "name": "MomentumOptimizer",
        "params": [
            "learning_rate",
            "momentum",
            "use_locking",
            "name",
            "use_nesterov"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.MonitoredSession",
        "name": "MonitoredSession",
        "params": [
            "session_creator",
            "hooks",
            "stop_grace_period_secs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.Optimizer",
        "name": "Optimizer",
        "params": [
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.ProximalAdagradOptimizer",
        "name": "ProximalAdagradOptimizer",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.ProximalGradientDescentOptimizer",
        "name": "ProximalGradientDescentOptimizer",
        "params": [
            "learning_rate",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.QueueRunner",
        "name": "QueueRunner",
        "params": [
            "queue",
            "enqueue_ops",
            "close_op",
            "cancel_op",
            "queue_closed_exception_types",
            "queue_runner_def",
            "import_scope"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.RMSPropOptimizer",
        "name": "RMSPropOptimizer",
        "params": [
            "learning_rate",
            "decay",
            "momentum",
            "epsilon",
            "use_locking",
            "centered",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.Saver",
        "name": "Saver",
        "params": [
            "var_list",
            "reshape",
            "sharded",
            "max_to_keep",
            "keep_checkpoint_every_n_hours",
            "name",
            "restore_sequentially",
            "saver_def",
            "builder",
            "defer_build",
            "allow_empty",
            "write_version",
            "pad_step_number",
            "save_relative_paths",
            "filename"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.SaverDef",
        "name": "SaverDef",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.train.Scaffold",
        "name": "Scaffold",
        "params": [
            "init_op",
            "init_feed_dict",
            "init_fn",
            "ready_op",
            "ready_for_local_init_op",
            "local_init_op",
            "summary_op",
            "saver",
            "copy_from_scaffold",
            "local_init_feed_dict"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.SessionCreator",
        "name": "SessionCreator",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.train.SessionManager",
        "name": "SessionManager",
        "params": [
            "local_init_op",
            "ready_op",
            "ready_for_local_init_op",
            "graph",
            "recovery_wait_secs",
            "local_init_run_options",
            "local_init_feed_dict"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.SingularMonitoredSession",
        "name": "SingularMonitoredSession",
        "params": [
            "hooks",
            "scaffold",
            "master",
            "config",
            "checkpoint_dir",
            "stop_grace_period_secs",
            "checkpoint_filename_with_path"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.Supervisor",
        "name": "Supervisor",
        "params": [
            "graph",
            "ready_op",
            "ready_for_local_init_op",
            "is_chief",
            "init_op",
            "init_feed_dict",
            "local_init_op",
            "logdir",
            "summary_op",
            "saver",
            "global_step",
            "save_summaries_secs",
            "save_model_secs",
            "recovery_wait_secs",
            "stop_grace_secs",
            "checkpoint_basename",
            "session_manager",
            "summary_writer",
            "init_fn",
            "local_init_run_options"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.SyncReplicasOptimizer",
        "name": "SyncReplicasOptimizer",
        "params": [
            "opt",
            "replicas_to_aggregate",
            "total_num_replicas",
            "variable_averages",
            "variables_to_average",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.train.WorkerSessionCreator",
        "name": "WorkerSessionCreator",
        "params": [
            "scaffold",
            "master",
            "config",
            "max_wait_secs"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.service.DispatchServer",
        "name": "DispatchServer",
        "params": [
            "config",
            "start"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.service.DispatcherConfig",
        "name": "DispatcherConfig",
        "params": [
            "port",
            "protocol",
            "work_dir",
            "fault_tolerant_mode",
            "worker_addresses",
            "job_gc_check_interval_ms",
            "job_gc_timeout_ms"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.service.ShardingPolicy",
        "name": "ShardingPolicy",
        "params": []
    },
    {
        "full_name:": "tensorflow.data.experimental.service.WorkerConfig",
        "name": "WorkerConfig",
        "params": [
            "dispatcher_address",
            "worker_address",
            "port",
            "protocol",
            "heartbeat_interval_ms",
            "dispatcher_timeout_ms"
        ]
    },
    {
        "full_name:": "tensorflow.data.experimental.service.WorkerServer",
        "name": "WorkerServer",
        "params": [
            "config",
            "start"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.partitioners.FixedShardsPartitioner",
        "name": "FixedShardsPartitioner",
        "params": [
            "num_shards"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.partitioners.MaxSizePartitioner",
        "name": "MaxSizePartitioner",
        "params": [
            "max_shard_bytes",
            "max_shards",
            "bytes_per_string"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.partitioners.MinSizePartitioner",
        "name": "MinSizePartitioner",
        "params": [
            "min_shard_bytes",
            "max_shards",
            "bytes_per_string"
        ]
    },
    {
        "full_name:": "tensorflow.distribute.experimental.partitioners.Partitioner",
        "name": "Partitioner",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.experimental.rpc.Client",
        "name": "Client",
        "params": []
    },
    {
        "full_name:": "tensorflow.distribute.experimental.rpc.Server",
        "name": "Server",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.callbacks.experimental.BackupAndRestore",
        "name": "BackupAndRestore",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.experimental.EinsumDense",
        "name": "EinsumDense",
        "params": [
            "equation",
            "output_shape",
            "activation",
            "bias_axes",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.experimental.RandomFourierFeatures",
        "name": "RandomFourierFeatures",
        "params": [
            "output_dim",
            "kernel_initializer",
            "scale",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.experimental.SyncBatchNormalization",
        "name": "SyncBatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.mixed_precision.experimental.LossScaleOptimizer",
        "name": "LossScaleOptimizer",
        "params": [
            "optimizer",
            "loss_scale"
        ]
    },
    {
        "full_name:": "tensorflow.keras.mixed_precision.experimental.Policy",
        "name": "Policy",
        "params": [
            "name",
            "loss_scale"
        ]
    },
    {
        "full_name:": "tensorflow.keras.preprocessing.image.DirectoryIterator",
        "name": "DirectoryIterator",
        "params": [
            "directory",
            "image_data_generator",
            "target_size",
            "color_mode",
            "classes",
            "class_mode",
            "batch_size",
            "shuffle",
            "seed",
            "data_format",
            "save_to_dir",
            "save_prefix",
            "save_format",
            "follow_links",
            "subset",
            "interpolation",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.preprocessing.image.ImageDataGenerator",
        "name": "ImageDataGenerator",
        "params": [
            "featurewise_center",
            "samplewise_center",
            "featurewise_std_normalization",
            "samplewise_std_normalization",
            "zca_whitening",
            "zca_epsilon",
            "rotation_range",
            "width_shift_range",
            "height_shift_range",
            "brightness_range",
            "shear_range",
            "zoom_range",
            "channel_shift_range",
            "fill_mode",
            "cval",
            "horizontal_flip",
            "vertical_flip",
            "rescale",
            "preprocessing_function",
            "data_format",
            "validation_split",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.preprocessing.image.Iterator",
        "name": "Iterator",
        "params": [
            "n",
            "batch_size",
            "shuffle",
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.keras.preprocessing.image.NumpyArrayIterator",
        "name": "NumpyArrayIterator",
        "params": [
            "x",
            "y",
            "image_data_generator",
            "batch_size",
            "shuffle",
            "sample_weight",
            "seed",
            "data_format",
            "save_to_dir",
            "save_prefix",
            "save_format",
            "subset",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.keras.preprocessing.sequence.TimeseriesGenerator",
        "name": "TimeseriesGenerator",
        "params": [
            "data",
            "targets",
            "length",
            "sampling_rate",
            "stride",
            "start_index",
            "end_index",
            "shuffle",
            "reverse",
            "batch_size"
        ]
    },
    {
        "full_name:": "tensorflow.keras.preprocessing.text.Tokenizer",
        "name": "Tokenizer",
        "params": [
            "num_words",
            "filters",
            "lower",
            "split",
            "char_level",
            "oov_token",
            "document_count",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.utils.experimental.DatasetCreator",
        "name": "DatasetCreator",
        "params": [
            "dataset_fn",
            "input_options"
        ]
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.Adagrad",
        "name": "Adagrad",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.Adam",
        "name": "Adam",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.FTRL",
        "name": "FTRL",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.FeatureConfig",
        "name": "FeatureConfig",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.SGD",
        "name": "SGD",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.TPUEmbedding",
        "name": "TPUEmbedding",
        "params": []
    },
    {
        "full_name:": "tensorflow.tpu.experimental.embedding.TableConfig",
        "name": "TableConfig",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.data.experimental.CsvDataset",
        "name": "CsvDataset",
        "params": [
            "filenames",
            "record_defaults",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "exclude_cols"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.data.experimental.RandomDataset",
        "name": "RandomDataset",
        "params": [
            "seed",
            "name"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.data.experimental.SqlDataset",
        "name": "SqlDataset",
        "params": [
            "driver_name",
            "data_source_name",
            "query",
            "output_types"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.experimental.CentralStorageStrategy",
        "name": "CentralStorageStrategy",
        "params": [
            "compute_devices",
            "parameter_device"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.experimental.MultiWorkerMirroredStrategy",
        "name": "MultiWorkerMirroredStrategy",
        "params": [
            "communication",
            "cluster_resolver"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.experimental.ParameterServerStrategy",
        "name": "ParameterServerStrategy",
        "params": [
            "cluster_resolver"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.distribute.experimental.TPUStrategy",
        "name": "TPUStrategy",
        "params": [
            "tpu_cluster_resolver",
            "steps_per_run",
            "device_assignment"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.experimental.KMeans",
        "name": "KMeans",
        "params": [
            "num_clusters",
            "model_dir",
            "initial_clusters",
            "distance_metric",
            "seed",
            "use_mini_batch",
            "mini_batch_steps_per_iteration",
            "kmeans_plus_plus_num_retries",
            "relative_tolerance",
            "config",
            "feature_columns"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.tpu.InputPipelineConfig",
        "name": "InputPipelineConfig",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.tpu.RunConfig",
        "name": "RunConfig",
        "params": [
            "tpu_config",
            "evaluation_master",
            "master",
            "cluster",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.tpu.TPUConfig",
        "name": "TPUConfig",
        "params": [
            "iterations_per_loop",
            "num_shards",
            "num_cores_per_replica",
            "per_host_input_for_training",
            "tpu_job_name",
            "initial_infeed_sleep_secs",
            "input_partition_dims",
            "eval_training_input_configuration",
            "experimental_host_call_every_n_steps",
            "experimental_allow_per_host_v2_parallel_get_next",
            "experimental_feed_hook"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.tpu.TPUEstimator",
        "name": "TPUEstimator",
        "params": [
            "model_fn",
            "model_dir",
            "config",
            "params",
            "use_tpu",
            "train_batch_size",
            "eval_batch_size",
            "predict_batch_size",
            "batch_axis",
            "eval_on_tpu",
            "export_to_tpu",
            "export_to_cpu",
            "warm_start_from",
            "embedding_config_spec",
            "export_saved_model_api_version"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec",
        "name": "TPUEstimatorSpec",
        "params": [
            "mode",
            "predictions",
            "loss",
            "train_op",
            "eval_metrics",
            "export_outputs",
            "scaffold_fn",
            "host_call",
            "training_hooks",
            "evaluation_hooks",
            "prediction_hooks"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.flags.tensorflow_decorator.TFDecorator",
        "name": "TFDecorator",
        "params": [
            "decorator_name",
            "target",
            "decorator_doc",
            "decorator_argspec"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.callbacks.TensorBoard",
        "name": "TensorBoard",
        "params": [
            "log_dir",
            "histogram_freq",
            "batch_size",
            "write_graph",
            "write_grads",
            "write_images",
            "embeddings_freq",
            "embeddings_layer_names",
            "embeddings_metadata",
            "embeddings_data",
            "update_freq",
            "profile_batch"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.RandomNormal",
        "name": "RandomNormal",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.RandomUniform",
        "name": "RandomUniform",
        "params": [
            "minval",
            "maxval",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.TruncatedNormal",
        "name": "TruncatedNormal",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.he_normal",
        "name": "he_normal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.he_uniform",
        "name": "he_uniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.lecun_normal",
        "name": "lecun_normal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.initializers.lecun_uniform",
        "name": "lecun_uniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.BatchNormalization",
        "name": "BatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "renorm",
            "renorm_clipping",
            "renorm_momentum",
            "fused",
            "trainable",
            "virtual_batch_size",
            "adjustment",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.CuDNNGRU",
        "name": "CuDNNGRU",
        "params": [
            "units",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.CuDNNLSTM",
        "name": "CuDNNLSTM",
        "params": [
            "units",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.DenseFeatures",
        "name": "DenseFeatures",
        "params": [
            "feature_columns",
            "trainable",
            "name",
            "partitioner",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.GRU",
        "name": "GRU",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.GRUCell",
        "name": "GRUCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.LSTM",
        "name": "LSTM",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.layers.LSTMCell",
        "name": "LSTMCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.keras.utils.DeterministicRandomTestTool",
        "name": "DeterministicRandomTestTool",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.BasicLSTMCell",
        "name": "BasicLSTMCell",
        "params": [
            "num_units",
            "forget_bias",
            "state_is_tuple",
            "activation",
            "reuse",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.BasicRNNCell",
        "name": "BasicRNNCell",
        "params": [
            "num_units",
            "activation",
            "reuse",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.DeviceWrapper",
        "name": "DeviceWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.DropoutWrapper",
        "name": "DropoutWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.GRUCell",
        "name": "GRUCell",
        "params": [
            "num_units",
            "activation",
            "reuse",
            "kernel_initializer",
            "bias_initializer",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.LSTMCell",
        "name": "LSTMCell",
        "params": [
            "num_units",
            "use_peepholes",
            "cell_clip",
            "initializer",
            "num_proj",
            "proj_clip",
            "num_unit_shards",
            "num_proj_shards",
            "forget_bias",
            "state_is_tuple",
            "activation",
            "reuse",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.LSTMStateTuple",
        "name": "LSTMStateTuple",
        "params": [
            "c",
            "h"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.MultiRNNCell",
        "name": "MultiRNNCell",
        "params": [
            "cells",
            "state_is_tuple"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.RNNCell",
        "name": "RNNCell",
        "params": [
            "trainable",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.nn.rnn_cell.ResidualWrapper",
        "name": "ResidualWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.saved_model.signature_def_utils.MethodNameUpdater",
        "name": "MethodNameUpdater",
        "params": [
            "export_dir"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.tpu.experimental.AdagradParameters",
        "name": "AdagradParameters",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.tpu.experimental.AdamParameters",
        "name": "AdamParameters",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.tpu.experimental.FtrlParameters",
        "name": "FtrlParameters",
        "params": []
    },
    {
        "full_name:": "tensorflow.compat.v1.tpu.experimental.StochasticGradientDescentParameters",
        "name": "StochasticGradientDescentParameters",
        "params": []
    },
    {
        "full_name:": "tensorflow.keras.layers.experimental.preprocessing.HashedCrossing",
        "name": "HashedCrossing",
        "params": [
            "num_bins",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.keras.layers.experimental.preprocessing.PreprocessingLayer",
        "name": "PreprocessingLayer",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name:": "tensorflow.compat.v1.estimator.tpu.experimental.EmbeddingConfigSpec",
        "name": "EmbeddingConfigSpec",
        "params": [
            "feature_columns",
            "optimization_parameters",
            "clipping_limit",
            "pipeline_execution_with_tensor_core",
            "experimental_gradient_multiplier_fn",
            "feature_to_config_dict",
            "table_to_config_dict",
            "partition_strategy",
            "profile_data_directory"
        ]
    }
]