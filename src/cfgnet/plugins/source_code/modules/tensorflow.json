[
    {
        "full_name": "tensorflow.AggregationMethod",
        "name": "AggregationMethod",
        "params": []
    },
    {
        "full_name": "tensorflow.CriticalSection",
        "name": "CriticalSection",
        "params": [
            "name",
            "shared_name",
            "critical_section_def",
            "import_scope"
        ]
    },
    {
        "full_name": "tensorflow.dtypes.DType",
        "name": "DType",
        "params": []
    },
    {
        "full_name": "tensorflow.DeviceSpec",
        "name": "DeviceSpec",
        "params": [
            "job",
            "replica",
            "task",
            "device_type",
            "device_index"
        ]
    },
    {
        "full_name": "tensorflow.GradientTape",
        "name": "GradientTape",
        "params": [
            "persistent",
            "watch_accessed_variables"
        ]
    },
    {
        "full_name": "tensorflow.Graph",
        "name": "Graph",
        "params": []
    },
    {
        "full_name": "tensorflow.IndexedSlices",
        "name": "IndexedSlices",
        "params": [
            "values",
            "indices",
            "dense_shape"
        ]
    },
    {
        "full_name": "tensorflow.IndexedSlicesSpec",
        "name": "IndexedSlicesSpec",
        "params": [
            "shape",
            "dtype",
            "indices_dtype",
            "dense_shape_dtype",
            "indices_shape"
        ]
    },
    {
        "full_name": "tensorflow.Module",
        "name": "Module",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.Operation",
        "name": "Operation",
        "params": [
            "node_def",
            "g",
            "inputs",
            "output_types",
            "control_inputs",
            "input_types",
            "original_op",
            "op_def"
        ]
    },
    {
        "full_name": "tensorflow.OptionalSpec",
        "name": "OptionalSpec",
        "params": [
            "element_spec"
        ]
    },
    {
        "full_name": "tensorflow.RaggedTensor",
        "name": "RaggedTensor",
        "params": []
    },
    {
        "full_name": "tensorflow.RaggedTensorSpec",
        "name": "RaggedTensorSpec",
        "params": [
            "shape",
            "dtype",
            "ragged_rank",
            "row_splits_dtype",
            "flat_values_spec"
        ]
    },
    {
        "full_name": "tensorflow.RegisterGradient",
        "name": "RegisterGradient",
        "params": [
            "op_type"
        ]
    },
    {
        "full_name": "tensorflow.sparse.SparseTensor",
        "name": "SparseTensor",
        "params": [
            "indices",
            "values",
            "dense_shape"
        ]
    },
    {
        "full_name": "tensorflow.SparseTensorSpec",
        "name": "SparseTensorSpec",
        "params": [
            "shape",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.Tensor",
        "name": "Tensor",
        "params": [
            "op",
            "value_index",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.TensorArray",
        "name": "TensorArray",
        "params": [
            "dtype",
            "size",
            "dynamic_size",
            "clear_after_read",
            "tensor_array_name",
            "handle",
            "flow",
            "infer_shape",
            "element_shape",
            "colocate_with_first_write_call",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.TensorArraySpec",
        "name": "TensorArraySpec",
        "params": [
            "element_shape",
            "dtype",
            "dynamic_size",
            "infer_shape"
        ]
    },
    {
        "full_name": "tensorflow.TensorShape",
        "name": "TensorShape",
        "params": [
            "dims"
        ]
    },
    {
        "full_name": "tensorflow.TensorSpec",
        "name": "TensorSpec",
        "params": [
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.TypeSpec",
        "name": "TypeSpec",
        "params": []
    },
    {
        "full_name": "tensorflow.UnconnectedGradients",
        "name": "UnconnectedGradients",
        "params": []
    },
    {
        "full_name": "tensorflow.Variable",
        "name": "Variable",
        "params": [
            "initial_value",
            "trainable",
            "validate_shape",
            "caching_device",
            "name",
            "variable_def",
            "dtype",
            "import_scope",
            "constraint",
            "synchronization",
            "aggregation",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.VariableAggregation",
        "name": "VariableAggregation",
        "params": []
    },
    {
        "full_name": "tensorflow.VariableSynchronization",
        "name": "VariableSynchronization",
        "params": []
    },
    {
        "full_name": "tensorflow.constant_initializer",
        "name": "constant_initializer",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.name_scope",
        "name": "name_scope",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ones_initializer",
        "name": "ones_initializer",
        "params": []
    },
    {
        "full_name": "tensorflow.random_normal_initializer",
        "name": "random_normal_initializer",
        "params": [
            "mean",
            "stddev",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.random_uniform_initializer",
        "name": "random_uniform_initializer",
        "params": [
            "minval",
            "maxval",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.zeros_initializer",
        "name": "zeros_initializer",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.Assert",
        "name": "Assert",
        "params": [
            "condition",
            "data",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.abs",
        "name": "abs",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.acos",
        "name": "acos",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.acosh",
        "name": "acosh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.add",
        "name": "add",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.add_n",
        "name": "add_n",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.argmax",
        "name": "argmax",
        "params": [
            "input",
            "axis",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.argmin",
        "name": "argmin",
        "params": [
            "input",
            "axis",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.argsort",
        "name": "argsort",
        "params": [
            "values",
            "axis",
            "direction",
            "stable",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.dtypes.as_dtype",
        "name": "as_dtype",
        "params": [
            "type_value"
        ]
    },
    {
        "full_name": "tensorflow.strings.as_string",
        "name": "as_string",
        "params": [
            "input",
            "precision",
            "scientific",
            "shortest",
            "width",
            "fill",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.asin",
        "name": "asin",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.asinh",
        "name": "asinh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_equal",
        "name": "assert_equal",
        "params": [
            "x",
            "y",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_greater",
        "name": "assert_greater",
        "params": [
            "x",
            "y",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_less",
        "name": "assert_less",
        "params": [
            "x",
            "y",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_rank",
        "name": "assert_rank",
        "params": [
            "x",
            "rank",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.atan",
        "name": "atan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.atan2",
        "name": "atan2",
        "params": [
            "y",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.atanh",
        "name": "atanh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.batch_to_space",
        "name": "batch_to_space",
        "params": [
            "input",
            "block_shape",
            "crops",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.bitcast",
        "name": "bitcast",
        "params": [
            "input",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.boolean_mask",
        "name": "boolean_mask",
        "params": [
            "tensor",
            "mask",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.broadcast_dynamic_shape",
        "name": "broadcast_dynamic_shape",
        "params": [
            "shape_x",
            "shape_y"
        ]
    },
    {
        "full_name": "tensorflow.broadcast_static_shape",
        "name": "broadcast_static_shape",
        "params": [
            "shape_x",
            "shape_y"
        ]
    },
    {
        "full_name": "tensorflow.broadcast_to",
        "name": "broadcast_to",
        "params": [
            "input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.case",
        "name": "case",
        "params": [
            "pred_fn_pairs",
            "default",
            "exclusive",
            "strict",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.cast",
        "name": "cast",
        "params": [
            "x",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.clip_by_global_norm",
        "name": "clip_by_global_norm",
        "params": [
            "t_list",
            "clip_norm",
            "use_norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.clip_by_norm",
        "name": "clip_by_norm",
        "params": [
            "t",
            "clip_norm",
            "axes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.clip_by_value",
        "name": "clip_by_value",
        "params": [
            "t",
            "clip_value_min",
            "clip_value_max",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.dtypes.complex",
        "name": "complex",
        "params": [
            "real",
            "imag",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.concat",
        "name": "concat",
        "params": [
            "values",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.cond",
        "name": "cond",
        "params": [
            "pred",
            "true_fn",
            "false_fn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.constant",
        "name": "constant",
        "params": [
            "value",
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.control_dependencies",
        "name": "control_dependencies",
        "params": [
            "control_inputs"
        ]
    },
    {
        "full_name": "tensorflow.convert_to_tensor",
        "name": "convert_to_tensor",
        "params": [
            "value",
            "dtype",
            "dtype_hint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.cos",
        "name": "cos",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.cosh",
        "name": "cosh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.cumsum",
        "name": "cumsum",
        "params": [
            "x",
            "axis",
            "exclusive",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.custom_gradient",
        "name": "custom_gradient",
        "params": [
            "f"
        ]
    },
    {
        "full_name": "tensorflow.device",
        "name": "device",
        "params": [
            "device_name"
        ]
    },
    {
        "full_name": "tensorflow.math.divide",
        "name": "divide",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.dynamic_partition",
        "name": "dynamic_partition",
        "params": [
            "data",
            "partitions",
            "num_partitions",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.dynamic_stitch",
        "name": "dynamic_stitch",
        "params": [
            "indices",
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.edit_distance",
        "name": "edit_distance",
        "params": [
            "hypothesis",
            "truth",
            "normalize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.eig",
        "name": "eig",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.eigvals",
        "name": "eigvals",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.einsum",
        "name": "einsum",
        "params": [
            "equation",
            "*inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.ensure_shape",
        "name": "ensure_shape",
        "params": [
            "x",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.equal",
        "name": "equal",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.executing_eagerly",
        "name": "executing_eagerly",
        "params": []
    },
    {
        "full_name": "tensorflow.math.exp",
        "name": "exp",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.expand_dims",
        "name": "expand_dims",
        "params": [
            "input",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.extract_volume_patches",
        "name": "extract_volume_patches",
        "params": [
            "input",
            "ksizes",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.eye",
        "name": "eye",
        "params": [
            "num_rows",
            "num_columns",
            "batch_shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.fill",
        "name": "fill",
        "params": [
            "dims",
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.fingerprint",
        "name": "fingerprint",
        "params": [
            "data",
            "method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.floor",
        "name": "floor",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.foldl",
        "name": "foldl",
        "params": [
            "fn",
            "elems",
            "initializer",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.foldr",
        "name": "foldr",
        "params": [
            "fn",
            "elems",
            "initializer",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.function",
        "name": "function",
        "params": []
    },
    {
        "full_name": "tensorflow.gather",
        "name": "gather",
        "params": [
            "params",
            "indices",
            "validate_indices",
            "axis",
            "batch_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.gather_nd",
        "name": "gather_nd",
        "params": [
            "params",
            "indices",
            "batch_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.get_current_name_scope",
        "name": "get_current_name_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.get_logger",
        "name": "get_logger",
        "params": []
    },
    {
        "full_name": "tensorflow.get_static_value",
        "name": "get_static_value",
        "params": [
            "tensor",
            "partial"
        ]
    },
    {
        "full_name": "tensorflow.grad_pass_through",
        "name": "grad_pass_through",
        "params": [
            "f"
        ]
    },
    {
        "full_name": "tensorflow.gradients",
        "name": "gradients",
        "params": [
            "ys",
            "xs",
            "grad_ys",
            "name",
            "gate_gradients",
            "aggregation_method",
            "stop_gradients",
            "unconnected_gradients"
        ]
    },
    {
        "full_name": "tensorflow.math.greater",
        "name": "greater",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.greater_equal",
        "name": "greater_equal",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.group",
        "name": "group",
        "params": [
            "*inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.guarantee_const",
        "name": "guarantee_const",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.hessians",
        "name": "hessians",
        "params": [
            "ys",
            "xs",
            "gate_gradients",
            "aggregation_method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.histogram_fixed_width",
        "name": "histogram_fixed_width",
        "params": [
            "values",
            "value_range",
            "nbins",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.histogram_fixed_width_bins",
        "name": "histogram_fixed_width_bins",
        "params": [
            "values",
            "value_range",
            "nbins",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.identity",
        "name": "identity",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.identity_n",
        "name": "identity_n",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.graph_util.import_graph_def",
        "name": "import_graph_def",
        "params": [
            "graph_def",
            "input_map",
            "return_elements",
            "name",
            "op_dict",
            "producer_op_list"
        ]
    },
    {
        "full_name": "tensorflow.init_scope",
        "name": "init_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.inside_function",
        "name": "inside_function",
        "params": []
    },
    {
        "full_name": "tensorflow.is_tensor",
        "name": "is_tensor",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.math.less",
        "name": "less",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.less_equal",
        "name": "less_equal",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linspace",
        "name": "linspace",
        "params": [
            "start",
            "stop",
            "num",
            "name",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.load_library",
        "name": "load_library",
        "params": [
            "library_location"
        ]
    },
    {
        "full_name": "tensorflow.load_op_library",
        "name": "load_op_library",
        "params": [
            "library_filename"
        ]
    },
    {
        "full_name": "tensorflow.math.logical_and",
        "name": "logical_and",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.logical_not",
        "name": "logical_not",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.logical_or",
        "name": "logical_or",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.make_ndarray",
        "name": "make_ndarray",
        "params": [
            "tensor"
        ]
    },
    {
        "full_name": "tensorflow.make_tensor_proto",
        "name": "make_tensor_proto",
        "params": [
            "values",
            "dtype",
            "shape",
            "verify_shape",
            "allow_broadcast"
        ]
    },
    {
        "full_name": "tensorflow.map_fn",
        "name": "map_fn",
        "params": [
            "fn",
            "elems",
            "dtype",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "infer_shape",
            "name",
            "fn_output_signature"
        ]
    },
    {
        "full_name": "tensorflow.linalg.matmul",
        "name": "matmul",
        "params": [
            "a",
            "b",
            "transpose_a",
            "transpose_b",
            "adjoint_a",
            "adjoint_b",
            "a_is_sparse",
            "b_is_sparse",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.sqrtm",
        "name": "sqrtm",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.maximum",
        "name": "maximum",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.meshgrid",
        "name": "meshgrid",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.math.minimum",
        "name": "minimum",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.multiply",
        "name": "multiply",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.negative",
        "name": "negative",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.no_gradient",
        "name": "no_gradient",
        "params": [
            "op_type"
        ]
    },
    {
        "full_name": "tensorflow.no_op",
        "name": "no_op",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nondifferentiable_batch_function",
        "name": "nondifferentiable_batch_function",
        "params": [
            "num_batch_threads",
            "max_batch_size",
            "batch_timeout_micros",
            "allowed_batch_sizes",
            "max_enqueued_batches",
            "autograph",
            "enable_large_batch_splitting"
        ]
    },
    {
        "full_name": "tensorflow.norm",
        "name": "norm",
        "params": [
            "tensor",
            "ord",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.not_equal",
        "name": "not_equal",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.numpy_function",
        "name": "numpy_function",
        "params": [
            "func",
            "inp",
            "Tout",
            "stateful",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.one_hot",
        "name": "one_hot",
        "params": [
            "indices",
            "depth",
            "on_value",
            "off_value",
            "axis",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ones",
        "name": "ones",
        "params": [
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ones_like",
        "name": "ones_like",
        "params": [
            "input",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.pad",
        "name": "pad",
        "params": [
            "tensor",
            "paddings",
            "mode",
            "constant_values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.parallel_stack",
        "name": "parallel_stack",
        "params": [
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.pow",
        "name": "pow",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.print",
        "name": "print",
        "params": [
            "*inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.py_function",
        "name": "py_function",
        "params": [
            "func",
            "inp",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random_index_shuffle",
        "name": "random_index_shuffle",
        "params": [
            "index",
            "seed",
            "max_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.range",
        "name": "range",
        "params": []
    },
    {
        "full_name": "tensorflow.rank",
        "name": "rank",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.realdiv",
        "name": "realdiv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.recompute_grad",
        "name": "recompute_grad",
        "params": [
            "f"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_all",
        "name": "reduce_all",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_any",
        "name": "reduce_any",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_logsumexp",
        "name": "reduce_logsumexp",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_max",
        "name": "reduce_max",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_mean",
        "name": "reduce_mean",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_min",
        "name": "reduce_min",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_prod",
        "name": "reduce_prod",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_sum",
        "name": "reduce_sum",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.register_tensor_conversion_function",
        "name": "register_tensor_conversion_function",
        "params": [
            "base_type",
            "conversion_func",
            "priority"
        ]
    },
    {
        "full_name": "tensorflow.repeat",
        "name": "repeat",
        "params": [
            "input",
            "repeats",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.required_space_to_batch_paddings",
        "name": "required_space_to_batch_paddings",
        "params": [
            "input_shape",
            "block_shape",
            "base_paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.reshape",
        "name": "reshape",
        "params": [
            "tensor",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.reverse",
        "name": "reverse",
        "params": [
            "tensor",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.reverse_sequence",
        "name": "reverse_sequence",
        "params": [
            "input",
            "seq_lengths",
            "seq_axis",
            "batch_axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.roll",
        "name": "roll",
        "params": [
            "input",
            "shift",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.round",
        "name": "round",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.dtypes.saturate_cast",
        "name": "saturate_cast",
        "params": [
            "value",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.scalar_mul",
        "name": "scalar_mul",
        "params": [
            "scalar",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.scan",
        "name": "scan",
        "params": [
            "fn",
            "elems",
            "initializer",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "infer_shape",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.scatter_nd",
        "name": "scatter_nd",
        "params": [
            "indices",
            "updates",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.searchsorted",
        "name": "searchsorted",
        "params": [
            "sorted_sequence",
            "values",
            "side",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sequence_mask",
        "name": "sequence_mask",
        "params": [
            "lengths",
            "maxlen",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.shape",
        "name": "shape",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.shape_n",
        "name": "shape_n",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.sigmoid",
        "name": "sigmoid",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.sign",
        "name": "sign",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.sin",
        "name": "sin",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.sinh",
        "name": "sinh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.size",
        "name": "size",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.slice",
        "name": "slice",
        "params": [
            "input_",
            "begin",
            "size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sort",
        "name": "sort",
        "params": [
            "values",
            "axis",
            "direction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.space_to_batch",
        "name": "space_to_batch",
        "params": [
            "input",
            "block_shape",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.space_to_batch_nd",
        "name": "space_to_batch_nd",
        "params": [
            "input",
            "block_shape",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.split",
        "name": "split",
        "params": [
            "value",
            "num_or_size_splits",
            "axis",
            "num",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.sqrt",
        "name": "sqrt",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.square",
        "name": "square",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.squeeze",
        "name": "squeeze",
        "params": [
            "input",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.stack",
        "name": "stack",
        "params": [
            "values",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.stop_gradient",
        "name": "stop_gradient",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strided_slice",
        "name": "strided_slice",
        "params": [
            "input_",
            "begin",
            "end",
            "strides",
            "begin_mask",
            "end_mask",
            "ellipsis_mask",
            "new_axis_mask",
            "shrink_axis_mask",
            "var",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.subtract",
        "name": "subtract",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.switch_case",
        "name": "switch_case",
        "params": [
            "branch_index",
            "branch_fns",
            "default",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.tan",
        "name": "tan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.tanh",
        "name": "tanh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tensor_scatter_nd_add",
        "name": "tensor_scatter_nd_add",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tensor_scatter_nd_max",
        "name": "tensor_scatter_nd_max",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tensor_scatter_nd_min",
        "name": "tensor_scatter_nd_min",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tensor_scatter_nd_sub",
        "name": "tensor_scatter_nd_sub",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tensor_scatter_nd_update",
        "name": "tensor_scatter_nd_update",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tensordot",
        "name": "tensordot",
        "params": [
            "a",
            "b",
            "axes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tile",
        "name": "tile",
        "params": [
            "input",
            "multiples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.timestamp",
        "name": "timestamp",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.transpose",
        "name": "transpose",
        "params": [
            "a",
            "perm",
            "conjugate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.truediv",
        "name": "truediv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.truncatediv",
        "name": "truncatediv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.truncatemod",
        "name": "truncatemod",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.tuple",
        "name": "tuple",
        "params": [
            "tensors",
            "control_inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.type_spec_from_value",
        "name": "type_spec_from_value",
        "params": []
    },
    {
        "full_name": "tensorflow.unique",
        "name": "unique",
        "params": [
            "x",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.unique_with_counts",
        "name": "unique_with_counts",
        "params": [
            "x",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.unravel_index",
        "name": "unravel_index",
        "params": [
            "indices",
            "dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.unstack",
        "name": "unstack",
        "params": [
            "value",
            "num",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.variable_creator_scope",
        "name": "variable_creator_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.vectorized_map",
        "name": "vectorized_map",
        "params": [
            "fn",
            "elems",
            "fallback_to_while_loop"
        ]
    },
    {
        "full_name": "tensorflow.where",
        "name": "where",
        "params": [
            "condition",
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.while_loop",
        "name": "while_loop",
        "params": [
            "cond",
            "body",
            "loop_vars",
            "shape_invariants",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "maximum_iterations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.zeros",
        "name": "zeros",
        "params": [
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.zeros_like",
        "name": "zeros_like",
        "params": [
            "input",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.audio.decode_wav",
        "name": "decode_wav",
        "params": [
            "contents",
            "desired_channels",
            "desired_samples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.audio.encode_wav",
        "name": "encode_wav",
        "params": [
            "audio",
            "sample_rate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.autodiff.ForwardAccumulator",
        "name": "ForwardAccumulator",
        "params": [
            "primals",
            "tangents"
        ]
    },
    {
        "full_name": "tensorflow.autograph.set_verbosity",
        "name": "set_verbosity",
        "params": [
            "level",
            "alsologtostdout"
        ]
    },
    {
        "full_name": "tensorflow.autograph.to_code",
        "name": "to_code",
        "params": [
            "entity",
            "recursive",
            "experimental_optional_features"
        ]
    },
    {
        "full_name": "tensorflow.autograph.to_graph",
        "name": "to_graph",
        "params": [
            "entity",
            "recursive",
            "experimental_optional_features"
        ]
    },
    {
        "full_name": "tensorflow.autograph.trace",
        "name": "trace",
        "params": [
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.bitwise.bitwise_and",
        "name": "bitwise_and",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.bitwise.bitwise_or",
        "name": "bitwise_or",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.bitwise.bitwise_xor",
        "name": "bitwise_xor",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.bitwise.invert",
        "name": "invert",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.bitwise.left_shift",
        "name": "left_shift",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.bitwise.right_shift",
        "name": "right_shift",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.as_bytes",
        "name": "as_bytes",
        "params": [
            "bytes_or_text",
            "encoding"
        ]
    },
    {
        "full_name": "tensorflow.compat.as_str",
        "name": "as_str",
        "params": [
            "bytes_or_text",
            "encoding"
        ]
    },
    {
        "full_name": "tensorflow.compat.as_str_any",
        "name": "as_str_any",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.compat.as_text",
        "name": "as_text",
        "params": [
            "bytes_or_text",
            "encoding"
        ]
    },
    {
        "full_name": "tensorflow.compat.dimension_at_index",
        "name": "dimension_at_index",
        "params": [
            "shape",
            "index"
        ]
    },
    {
        "full_name": "tensorflow.compat.dimension_value",
        "name": "dimension_value",
        "params": [
            "dimension"
        ]
    },
    {
        "full_name": "tensorflow.compat.forward_compatibility_horizon",
        "name": "forward_compatibility_horizon",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.forward_compatible",
        "name": "forward_compatible",
        "params": [
            "year",
            "month",
            "day"
        ]
    },
    {
        "full_name": "tensorflow.compat.path_to_str",
        "name": "path_to_str",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.config.LogicalDevice",
        "name": "LogicalDevice",
        "params": [
            "name",
            "device_type"
        ]
    },
    {
        "full_name": "tensorflow.config.LogicalDeviceConfiguration",
        "name": "LogicalDeviceConfiguration",
        "params": [
            "memory_limit",
            "experimental_priority"
        ]
    },
    {
        "full_name": "tensorflow.config.PhysicalDevice",
        "name": "PhysicalDevice",
        "params": [
            "name",
            "device_type"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental_connect_to_cluster",
        "name": "experimental_connect_to_cluster",
        "params": [
            "cluster_spec_or_resolver",
            "job_name",
            "task_index",
            "protocol",
            "make_master_device_default",
            "cluster_device_filters"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental_connect_to_host",
        "name": "experimental_connect_to_host",
        "params": [
            "remote_host",
            "job_name"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental_functions_run_eagerly",
        "name": "experimental_functions_run_eagerly",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental_run_functions_eagerly",
        "name": "experimental_run_functions_eagerly",
        "params": [
            "run_eagerly"
        ]
    },
    {
        "full_name": "tensorflow.config.functions_run_eagerly",
        "name": "functions_run_eagerly",
        "params": []
    },
    {
        "full_name": "tensorflow.config.get_logical_device_configuration",
        "name": "get_logical_device_configuration",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.config.get_soft_device_placement",
        "name": "get_soft_device_placement",
        "params": []
    },
    {
        "full_name": "tensorflow.config.get_visible_devices",
        "name": "get_visible_devices",
        "params": [
            "device_type"
        ]
    },
    {
        "full_name": "tensorflow.config.list_logical_devices",
        "name": "list_logical_devices",
        "params": [
            "device_type"
        ]
    },
    {
        "full_name": "tensorflow.config.list_physical_devices",
        "name": "list_physical_devices",
        "params": [
            "device_type"
        ]
    },
    {
        "full_name": "tensorflow.config.run_functions_eagerly",
        "name": "run_functions_eagerly",
        "params": [
            "run_eagerly"
        ]
    },
    {
        "full_name": "tensorflow.config.set_logical_device_configuration",
        "name": "set_logical_device_configuration",
        "params": [
            "device",
            "logical_devices"
        ]
    },
    {
        "full_name": "tensorflow.config.set_soft_device_placement",
        "name": "set_soft_device_placement",
        "params": [
            "enabled"
        ]
    },
    {
        "full_name": "tensorflow.config.set_visible_devices",
        "name": "set_visible_devices",
        "params": [
            "devices",
            "device_type"
        ]
    },
    {
        "full_name": "tensorflow.data.Dataset",
        "name": "Dataset",
        "params": [
            "variant_tensor"
        ]
    },
    {
        "full_name": "tensorflow.data.DatasetSpec",
        "name": "DatasetSpec",
        "params": [
            "element_spec",
            "dataset_shape"
        ]
    },
    {
        "full_name": "tensorflow.data.FixedLengthRecordDataset",
        "name": "FixedLengthRecordDataset",
        "params": [
            "filenames",
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "buffer_size",
            "compression_type",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.data.Iterator",
        "name": "Iterator",
        "params": []
    },
    {
        "full_name": "tensorflow.data.IteratorSpec",
        "name": "IteratorSpec",
        "params": [
            "element_spec"
        ]
    },
    {
        "full_name": "tensorflow.data.Options",
        "name": "Options",
        "params": []
    },
    {
        "full_name": "tensorflow.data.TFRecordDataset",
        "name": "TFRecordDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.data.TextLineDataset",
        "name": "TextLineDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.data.ThreadingOptions",
        "name": "ThreadingOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.assert_all_finite",
        "name": "assert_all_finite",
        "params": [
            "x",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_greater_equal",
        "name": "assert_greater_equal",
        "params": [
            "x",
            "y",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_integer",
        "name": "assert_integer",
        "params": [
            "x",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_less_equal",
        "name": "assert_less_equal",
        "params": [
            "x",
            "y",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_near",
        "name": "assert_near",
        "params": [
            "x",
            "y",
            "rtol",
            "atol",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_negative",
        "name": "assert_negative",
        "params": [
            "x",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_non_negative",
        "name": "assert_non_negative",
        "params": [
            "x",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_non_positive",
        "name": "assert_non_positive",
        "params": [
            "x",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_none_equal",
        "name": "assert_none_equal",
        "params": [
            "x",
            "y",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_positive",
        "name": "assert_positive",
        "params": [
            "x",
            "message",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_proper_iterable",
        "name": "assert_proper_iterable",
        "params": [
            "values"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_rank_at_least",
        "name": "assert_rank_at_least",
        "params": [
            "x",
            "rank",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_rank_in",
        "name": "assert_rank_in",
        "params": [
            "x",
            "ranks",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_same_float_dtype",
        "name": "assert_same_float_dtype",
        "params": [
            "tensors",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_scalar",
        "name": "assert_scalar",
        "params": [
            "tensor",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_shapes",
        "name": "assert_shapes",
        "params": [
            "shapes",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.assert_type",
        "name": "assert_type",
        "params": [
            "tensor",
            "tf_type",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.check_numerics",
        "name": "check_numerics",
        "params": [
            "tensor",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.debugging.disable_check_numerics",
        "name": "disable_check_numerics",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.disable_traceback_filtering",
        "name": "disable_traceback_filtering",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.enable_check_numerics",
        "name": "enable_check_numerics",
        "params": [
            "stack_height_limit",
            "path_length_limit"
        ]
    },
    {
        "full_name": "tensorflow.debugging.enable_traceback_filtering",
        "name": "enable_traceback_filtering",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.get_log_device_placement",
        "name": "get_log_device_placement",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.is_numeric_tensor",
        "name": "is_numeric_tensor",
        "params": [
            "tensor"
        ]
    },
    {
        "full_name": "tensorflow.debugging.is_traceback_filtering_enabled",
        "name": "is_traceback_filtering_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.set_log_device_placement",
        "name": "set_log_device_placement",
        "params": [
            "enabled"
        ]
    },
    {
        "full_name": "tensorflow.distribute.CrossDeviceOps",
        "name": "CrossDeviceOps",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.DistributedDataset",
        "name": "DistributedDataset",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.DistributedIterator",
        "name": "DistributedIterator",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.DistributedValues",
        "name": "DistributedValues",
        "params": [
            "values"
        ]
    },
    {
        "full_name": "tensorflow.distribute.HierarchicalCopyAllReduce",
        "name": "HierarchicalCopyAllReduce",
        "params": [
            "num_packs"
        ]
    },
    {
        "full_name": "tensorflow.distribute.InputContext",
        "name": "InputContext",
        "params": [
            "num_input_pipelines",
            "input_pipeline_id",
            "num_replicas_in_sync"
        ]
    },
    {
        "full_name": "tensorflow.distribute.InputOptions",
        "name": "InputOptions",
        "params": [
            "experimental_fetch_to_device",
            "experimental_replication_mode",
            "experimental_place_dataset_on_device",
            "experimental_per_replica_buffer_size"
        ]
    },
    {
        "full_name": "tensorflow.distribute.InputReplicationMode",
        "name": "InputReplicationMode",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.MirroredStrategy",
        "name": "MirroredStrategy",
        "params": [
            "devices",
            "cross_device_ops"
        ]
    },
    {
        "full_name": "tensorflow.distribute.MultiWorkerMirroredStrategy",
        "name": "MultiWorkerMirroredStrategy",
        "params": [
            "cluster_resolver",
            "communication_options"
        ]
    },
    {
        "full_name": "tensorflow.distribute.NcclAllReduce",
        "name": "NcclAllReduce",
        "params": [
            "num_packs"
        ]
    },
    {
        "full_name": "tensorflow.distribute.OneDeviceStrategy",
        "name": "OneDeviceStrategy",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.ParameterServerStrategy",
        "name": "ParameterServerStrategy",
        "params": [
            "cluster_resolver",
            "variable_partitioner"
        ]
    },
    {
        "full_name": "tensorflow.distribute.ReduceOp",
        "name": "ReduceOp",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.ReductionToOneDevice",
        "name": "ReductionToOneDevice",
        "params": [
            "reduce_to_device",
            "accumulation_fn"
        ]
    },
    {
        "full_name": "tensorflow.distribute.ReplicaContext",
        "name": "ReplicaContext",
        "params": [
            "strategy",
            "replica_id_in_sync_group"
        ]
    },
    {
        "full_name": "tensorflow.distribute.RunOptions",
        "name": "RunOptions",
        "params": [
            "experimental_enable_dynamic_batch_size",
            "experimental_bucketizing_dynamic_shape",
            "experimental_xla_options"
        ]
    },
    {
        "full_name": "tensorflow.distribute.Server",
        "name": "Server",
        "params": [
            "server_or_cluster_def",
            "job_name",
            "task_index",
            "protocol",
            "config",
            "start"
        ]
    },
    {
        "full_name": "tensorflow.distribute.Strategy",
        "name": "Strategy",
        "params": [
            "extended"
        ]
    },
    {
        "full_name": "tensorflow.distribute.StrategyExtended",
        "name": "StrategyExtended",
        "params": [
            "container_strategy"
        ]
    },
    {
        "full_name": "tensorflow.distribute.TPUStrategy",
        "name": "TPUStrategy",
        "params": [
            "tpu_cluster_resolver",
            "experimental_device_assignment",
            "experimental_spmd_xla_partitioning"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental_set_strategy",
        "name": "experimental_set_strategy",
        "params": [
            "strategy"
        ]
    },
    {
        "full_name": "tensorflow.distribute.get_replica_context",
        "name": "get_replica_context",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.get_strategy",
        "name": "get_strategy",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.has_strategy",
        "name": "has_strategy",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.in_cross_replica_context",
        "name": "in_cross_replica_context",
        "params": []
    },
    {
        "full_name": "tensorflow.errors.AbortedError",
        "name": "AbortedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.AlreadyExistsError",
        "name": "AlreadyExistsError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.CancelledError",
        "name": "CancelledError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.DataLossError",
        "name": "DataLossError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.DeadlineExceededError",
        "name": "DeadlineExceededError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.FailedPreconditionError",
        "name": "FailedPreconditionError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.InternalError",
        "name": "InternalError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.InvalidArgumentError",
        "name": "InvalidArgumentError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.NotFoundError",
        "name": "NotFoundError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.OpError",
        "name": "OpError",
        "params": [
            "node_def",
            "op",
            "message",
            "error_code",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.OperatorNotAllowedInGraphError",
        "name": "OperatorNotAllowedInGraphError",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.errors.OutOfRangeError",
        "name": "OutOfRangeError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.PermissionDeniedError",
        "name": "PermissionDeniedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.ResourceExhaustedError",
        "name": "ResourceExhaustedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.UnauthenticatedError",
        "name": "UnauthenticatedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.UnavailableError",
        "name": "UnavailableError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.UnimplementedError",
        "name": "UnimplementedError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.errors.UnknownError",
        "name": "UnknownError",
        "params": [
            "node_def",
            "op",
            "message",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.estimator.BaselineClassifier",
        "name": "BaselineClassifier",
        "params": [
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name": "tensorflow.estimator.BaselineEstimator",
        "name": "BaselineEstimator",
        "params": [
            "head",
            "model_dir",
            "optimizer",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.estimator.BaselineRegressor",
        "name": "BaselineRegressor",
        "params": [
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name": "tensorflow.estimator.BestExporter",
        "name": "BestExporter",
        "params": [
            "name",
            "serving_input_receiver_fn",
            "event_file_pattern",
            "compare_fn",
            "assets_extra",
            "as_text",
            "exports_to_keep"
        ]
    },
    {
        "full_name": "tensorflow.estimator.BinaryClassHead",
        "name": "BinaryClassHead",
        "params": [
            "weight_column",
            "thresholds",
            "label_vocabulary",
            "loss_reduction",
            "loss_fn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.CheckpointSaverHook",
        "name": "CheckpointSaverHook",
        "params": [
            "checkpoint_dir",
            "save_secs",
            "save_steps",
            "saver",
            "checkpoint_basename",
            "scaffold",
            "listeners",
            "save_graph_def"
        ]
    },
    {
        "full_name": "tensorflow.estimator.CheckpointSaverListener",
        "name": "CheckpointSaverListener",
        "params": []
    },
    {
        "full_name": "tensorflow.estimator.DNNClassifier",
        "name": "DNNClassifier",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "activation_fn",
            "dropout",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.estimator.DNNEstimator",
        "name": "DNNEstimator",
        "params": [
            "head",
            "hidden_units",
            "feature_columns",
            "model_dir",
            "optimizer",
            "activation_fn",
            "dropout",
            "config",
            "warm_start_from",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.estimator.DNNLinearCombinedClassifier",
        "name": "DNNLinearCombinedClassifier",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.estimator.DNNLinearCombinedEstimator",
        "name": "DNNLinearCombinedEstimator",
        "params": [
            "head",
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "config",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.estimator.DNNLinearCombinedRegressor",
        "name": "DNNLinearCombinedRegressor",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "label_dimension",
            "weight_column",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.estimator.DNNRegressor",
        "name": "DNNRegressor",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "activation_fn",
            "dropout",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.estimator.Estimator",
        "name": "Estimator",
        "params": [
            "model_fn",
            "model_dir",
            "config",
            "params",
            "warm_start_from"
        ]
    },
    {
        "full_name": "tensorflow.estimator.EstimatorSpec",
        "name": "EstimatorSpec",
        "params": [
            "mode",
            "predictions",
            "loss",
            "train_op",
            "eval_metric_ops",
            "export_outputs",
            "training_chief_hooks",
            "training_hooks",
            "scaffold",
            "evaluation_hooks",
            "prediction_hooks"
        ]
    },
    {
        "full_name": "tensorflow.estimator.EvalSpec",
        "name": "EvalSpec",
        "params": [
            "input_fn",
            "steps",
            "name",
            "hooks",
            "exporters",
            "start_delay_secs",
            "throttle_secs"
        ]
    },
    {
        "full_name": "tensorflow.estimator.Exporter",
        "name": "Exporter",
        "params": []
    },
    {
        "full_name": "tensorflow.estimator.FeedFnHook",
        "name": "FeedFnHook",
        "params": [
            "feed_fn"
        ]
    },
    {
        "full_name": "tensorflow.estimator.FinalExporter",
        "name": "FinalExporter",
        "params": [
            "name",
            "serving_input_receiver_fn",
            "assets_extra",
            "as_text"
        ]
    },
    {
        "full_name": "tensorflow.estimator.FinalOpsHook",
        "name": "FinalOpsHook",
        "params": [
            "final_ops",
            "final_ops_feed_dict"
        ]
    },
    {
        "full_name": "tensorflow.estimator.GlobalStepWaiterHook",
        "name": "GlobalStepWaiterHook",
        "params": [
            "wait_until_step"
        ]
    },
    {
        "full_name": "tensorflow.estimator.Head",
        "name": "Head",
        "params": []
    },
    {
        "full_name": "tensorflow.estimator.LatestExporter",
        "name": "LatestExporter",
        "params": [
            "name",
            "serving_input_receiver_fn",
            "assets_extra",
            "as_text",
            "exports_to_keep"
        ]
    },
    {
        "full_name": "tensorflow.estimator.LinearClassifier",
        "name": "LinearClassifier",
        "params": [
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.estimator.LinearEstimator",
        "name": "LinearEstimator",
        "params": [
            "head",
            "feature_columns",
            "model_dir",
            "optimizer",
            "config",
            "sparse_combiner",
            "warm_start_from"
        ]
    },
    {
        "full_name": "tensorflow.estimator.LinearRegressor",
        "name": "LinearRegressor",
        "params": [
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.estimator.LoggingTensorHook",
        "name": "LoggingTensorHook",
        "params": [
            "tensors",
            "every_n_iter",
            "every_n_secs",
            "at_end",
            "formatter"
        ]
    },
    {
        "full_name": "tensorflow.estimator.LogisticRegressionHead",
        "name": "LogisticRegressionHead",
        "params": [
            "weight_column",
            "loss_reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.ModeKeys",
        "name": "ModeKeys",
        "params": []
    },
    {
        "full_name": "tensorflow.estimator.MultiClassHead",
        "name": "MultiClassHead",
        "params": [
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "loss_reduction",
            "loss_fn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.MultiHead",
        "name": "MultiHead",
        "params": [
            "heads",
            "head_weights"
        ]
    },
    {
        "full_name": "tensorflow.estimator.MultiLabelHead",
        "name": "MultiLabelHead",
        "params": [
            "n_classes",
            "weight_column",
            "thresholds",
            "label_vocabulary",
            "loss_reduction",
            "loss_fn",
            "classes_for_class_based_metrics",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.NanLossDuringTrainingError",
        "name": "NanLossDuringTrainingError",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.estimator.NanTensorHook",
        "name": "NanTensorHook",
        "params": [
            "loss_tensor",
            "fail_on_nan_loss"
        ]
    },
    {
        "full_name": "tensorflow.estimator.PoissonRegressionHead",
        "name": "PoissonRegressionHead",
        "params": [
            "label_dimension",
            "weight_column",
            "loss_reduction",
            "compute_full_loss",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.ProfilerHook",
        "name": "ProfilerHook",
        "params": [
            "save_steps",
            "save_secs",
            "output_dir",
            "show_dataflow",
            "show_memory"
        ]
    },
    {
        "full_name": "tensorflow.estimator.RegressionHead",
        "name": "RegressionHead",
        "params": [
            "label_dimension",
            "weight_column",
            "loss_reduction",
            "loss_fn",
            "inverse_link_fn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.RunConfig",
        "name": "RunConfig",
        "params": [
            "model_dir",
            "tf_random_seed",
            "save_summary_steps",
            "save_checkpoints_steps",
            "save_checkpoints_secs",
            "session_config",
            "keep_checkpoint_max",
            "keep_checkpoint_every_n_hours",
            "log_step_count_steps",
            "train_distribute",
            "device_fn",
            "protocol",
            "eval_distribute",
            "experimental_distribute",
            "experimental_max_worker_delay_secs",
            "session_creation_timeout_secs",
            "checkpoint_save_graph_def"
        ]
    },
    {
        "full_name": "tensorflow.estimator.SecondOrStepTimer",
        "name": "SecondOrStepTimer",
        "params": [
            "every_secs",
            "every_steps"
        ]
    },
    {
        "full_name": "tensorflow.estimator.SessionRunArgs",
        "name": "SessionRunArgs",
        "params": [
            "fetches",
            "feed_dict",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.estimator.SessionRunContext",
        "name": "SessionRunContext",
        "params": [
            "original_args",
            "session"
        ]
    },
    {
        "full_name": "tensorflow.estimator.SessionRunHook",
        "name": "SessionRunHook",
        "params": []
    },
    {
        "full_name": "tensorflow.estimator.SessionRunValues",
        "name": "SessionRunValues",
        "params": [
            "results",
            "options",
            "run_metadata"
        ]
    },
    {
        "full_name": "tensorflow.estimator.StepCounterHook",
        "name": "StepCounterHook",
        "params": [
            "every_n_steps",
            "every_n_secs",
            "output_dir",
            "summary_writer"
        ]
    },
    {
        "full_name": "tensorflow.estimator.StopAtStepHook",
        "name": "StopAtStepHook",
        "params": [
            "num_steps",
            "last_step"
        ]
    },
    {
        "full_name": "tensorflow.estimator.SummarySaverHook",
        "name": "SummarySaverHook",
        "params": [
            "save_steps",
            "save_secs",
            "output_dir",
            "summary_writer",
            "scaffold",
            "summary_op"
        ]
    },
    {
        "full_name": "tensorflow.estimator.TrainSpec",
        "name": "TrainSpec",
        "params": [
            "input_fn",
            "max_steps",
            "hooks",
            "saving_listeners"
        ]
    },
    {
        "full_name": "tensorflow.estimator.VocabInfo",
        "name": "VocabInfo",
        "params": [
            "new_vocab",
            "new_vocab_size",
            "num_oov_buckets",
            "old_vocab",
            "old_vocab_size",
            "backup_initializer",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.estimator.WarmStartSettings",
        "name": "WarmStartSettings",
        "params": [
            "ckpt_to_initialize_from",
            "vars_to_warm_start",
            "var_name_to_vocab_info",
            "var_name_to_prev_var_name"
        ]
    },
    {
        "full_name": "tensorflow.estimator.add_metrics",
        "name": "add_metrics",
        "params": [
            "estimator",
            "metric_fn"
        ]
    },
    {
        "full_name": "tensorflow.estimator.classifier_parse_example_spec",
        "name": "classifier_parse_example_spec",
        "params": [
            "feature_columns",
            "label_key",
            "label_dtype",
            "label_default",
            "weight_column"
        ]
    },
    {
        "full_name": "tensorflow.estimator.regressor_parse_example_spec",
        "name": "regressor_parse_example_spec",
        "params": [
            "feature_columns",
            "label_key",
            "label_dtype",
            "label_default",
            "label_dimension",
            "weight_column"
        ]
    },
    {
        "full_name": "tensorflow.estimator.train_and_evaluate",
        "name": "train_and_evaluate",
        "params": [
            "estimator",
            "train_spec",
            "eval_spec"
        ]
    },
    {
        "full_name": "tensorflow.experimental.BatchableExtensionType",
        "name": "BatchableExtensionType",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.DynamicRaggedShape",
        "name": "DynamicRaggedShape",
        "params": [
            "row_partitions",
            "inner_shape",
            "dtype",
            "validate"
        ]
    },
    {
        "full_name": "tensorflow.experimental.ExtensionType",
        "name": "ExtensionType",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.ExtensionTypeBatchEncoder",
        "name": "ExtensionTypeBatchEncoder",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.Optional",
        "name": "Optional",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.RowPartition",
        "name": "RowPartition",
        "params": [
            "row_splits",
            "row_lengths",
            "value_rowids",
            "nrows",
            "uniform_row_length",
            "nvals",
            "internal"
        ]
    },
    {
        "full_name": "tensorflow.experimental.async_clear_error",
        "name": "async_clear_error",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.async_scope",
        "name": "async_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dispatch_for_api",
        "name": "dispatch_for_api",
        "params": [
            "api",
            "*signatures"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dispatch_for_binary_elementwise_apis",
        "name": "dispatch_for_binary_elementwise_apis",
        "params": [
            "x_type",
            "y_type"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dispatch_for_unary_elementwise_apis",
        "name": "dispatch_for_unary_elementwise_apis",
        "params": [
            "x_type"
        ]
    },
    {
        "full_name": "tensorflow.experimental.function_executor_type",
        "name": "function_executor_type",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.register_filesystem_plugin",
        "name": "register_filesystem_plugin",
        "params": [
            "plugin_location"
        ]
    },
    {
        "full_name": "tensorflow.experimental.unregister_dispatch_for",
        "name": "unregister_dispatch_for",
        "params": [
            "dispatch_target"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.bucketized_column",
        "name": "bucketized_column",
        "params": [
            "source_column",
            "boundaries"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.categorical_column_with_hash_bucket",
        "name": "categorical_column_with_hash_bucket",
        "params": [
            "key",
            "hash_bucket_size",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.categorical_column_with_identity",
        "name": "categorical_column_with_identity",
        "params": [
            "key",
            "num_buckets",
            "default_value"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.categorical_column_with_vocabulary_file",
        "name": "categorical_column_with_vocabulary_file",
        "params": [
            "key",
            "vocabulary_file",
            "vocabulary_size",
            "dtype",
            "default_value",
            "num_oov_buckets",
            "file_format"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.categorical_column_with_vocabulary_list",
        "name": "categorical_column_with_vocabulary_list",
        "params": [
            "key",
            "vocabulary_list",
            "dtype",
            "default_value",
            "num_oov_buckets"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.crossed_column",
        "name": "crossed_column",
        "params": [
            "keys",
            "hash_bucket_size",
            "hash_key"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.embedding_column",
        "name": "embedding_column",
        "params": [
            "categorical_column",
            "dimension",
            "combiner",
            "initializer",
            "ckpt_to_load_from",
            "tensor_name_in_ckpt",
            "max_norm",
            "trainable",
            "use_safe_embedding_lookup"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.indicator_column",
        "name": "indicator_column",
        "params": [
            "categorical_column"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.make_parse_example_spec",
        "name": "make_parse_example_spec",
        "params": [
            "feature_columns"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.numeric_column",
        "name": "numeric_column",
        "params": [
            "key",
            "shape",
            "default_value",
            "dtype",
            "normalizer_fn"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.sequence_categorical_column_with_hash_bucket",
        "name": "sequence_categorical_column_with_hash_bucket",
        "params": [
            "key",
            "hash_bucket_size",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.sequence_categorical_column_with_identity",
        "name": "sequence_categorical_column_with_identity",
        "params": [
            "key",
            "num_buckets",
            "default_value"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.sequence_categorical_column_with_vocabulary_file",
        "name": "sequence_categorical_column_with_vocabulary_file",
        "params": [
            "key",
            "vocabulary_file",
            "vocabulary_size",
            "num_oov_buckets",
            "default_value",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.sequence_categorical_column_with_vocabulary_list",
        "name": "sequence_categorical_column_with_vocabulary_list",
        "params": [
            "key",
            "vocabulary_list",
            "dtype",
            "default_value",
            "num_oov_buckets"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.sequence_numeric_column",
        "name": "sequence_numeric_column",
        "params": [
            "key",
            "shape",
            "default_value",
            "dtype",
            "normalizer_fn"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.shared_embeddings",
        "name": "shared_embeddings",
        "params": [
            "categorical_columns",
            "dimension",
            "combiner",
            "initializer",
            "shared_embedding_collection_name",
            "ckpt_to_load_from",
            "tensor_name_in_ckpt",
            "max_norm",
            "trainable",
            "use_safe_embedding_lookup"
        ]
    },
    {
        "full_name": "tensorflow.feature_column.weighted_categorical_column",
        "name": "weighted_categorical_column",
        "params": [
            "categorical_column",
            "weight_feature_key",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.image.ResizeMethod",
        "name": "ResizeMethod",
        "params": []
    },
    {
        "full_name": "tensorflow.image.adjust_brightness",
        "name": "adjust_brightness",
        "params": [
            "image",
            "delta"
        ]
    },
    {
        "full_name": "tensorflow.image.adjust_contrast",
        "name": "adjust_contrast",
        "params": [
            "images",
            "contrast_factor"
        ]
    },
    {
        "full_name": "tensorflow.image.adjust_gamma",
        "name": "adjust_gamma",
        "params": [
            "image",
            "gamma",
            "gain"
        ]
    },
    {
        "full_name": "tensorflow.image.adjust_hue",
        "name": "adjust_hue",
        "params": [
            "image",
            "delta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.adjust_jpeg_quality",
        "name": "adjust_jpeg_quality",
        "params": [
            "image",
            "jpeg_quality",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.adjust_saturation",
        "name": "adjust_saturation",
        "params": [
            "image",
            "saturation_factor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.central_crop",
        "name": "central_crop",
        "params": [
            "image",
            "central_fraction"
        ]
    },
    {
        "full_name": "tensorflow.image.combined_non_max_suppression",
        "name": "combined_non_max_suppression",
        "params": [
            "boxes",
            "scores",
            "max_output_size_per_class",
            "max_total_size",
            "iou_threshold",
            "score_threshold",
            "pad_per_class",
            "clip_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.convert_image_dtype",
        "name": "convert_image_dtype",
        "params": [
            "image",
            "dtype",
            "saturate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.crop_and_resize",
        "name": "crop_and_resize",
        "params": [
            "image",
            "boxes",
            "box_indices",
            "crop_size",
            "method",
            "extrapolation_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.crop_to_bounding_box",
        "name": "crop_to_bounding_box",
        "params": [
            "image",
            "offset_height",
            "offset_width",
            "target_height",
            "target_width"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_and_crop_jpeg",
        "name": "decode_and_crop_jpeg",
        "params": [
            "contents",
            "crop_window",
            "channels",
            "ratio",
            "fancy_upscaling",
            "try_recover_truncated",
            "acceptable_fraction",
            "dct_method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_bmp",
        "name": "decode_bmp",
        "params": [
            "contents",
            "channels",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_gif",
        "name": "decode_gif",
        "params": [
            "contents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_image",
        "name": "decode_image",
        "params": [
            "contents",
            "channels",
            "dtype",
            "name",
            "expand_animations"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_jpeg",
        "name": "decode_jpeg",
        "params": [
            "contents",
            "channels",
            "ratio",
            "fancy_upscaling",
            "try_recover_truncated",
            "acceptable_fraction",
            "dct_method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_png",
        "name": "decode_png",
        "params": [
            "contents",
            "channels",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.draw_bounding_boxes",
        "name": "draw_bounding_boxes",
        "params": [
            "images",
            "boxes",
            "colors",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.encode_jpeg",
        "name": "encode_jpeg",
        "params": [
            "image",
            "format",
            "quality",
            "progressive",
            "optimize_size",
            "chroma_downsampling",
            "density_unit",
            "x_density",
            "y_density",
            "xmp_metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.encode_png",
        "name": "encode_png",
        "params": [
            "image",
            "compression",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.extract_glimpse",
        "name": "extract_glimpse",
        "params": [
            "input",
            "size",
            "offsets",
            "centered",
            "normalized",
            "noise",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.extract_jpeg_shape",
        "name": "extract_jpeg_shape",
        "params": [
            "contents",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.extract_patches",
        "name": "extract_patches",
        "params": [
            "images",
            "sizes",
            "strides",
            "rates",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.flip_left_right",
        "name": "flip_left_right",
        "params": [
            "image"
        ]
    },
    {
        "full_name": "tensorflow.image.flip_up_down",
        "name": "flip_up_down",
        "params": [
            "image"
        ]
    },
    {
        "full_name": "tensorflow.image.generate_bounding_box_proposals",
        "name": "generate_bounding_box_proposals",
        "params": [
            "scores",
            "bbox_deltas",
            "image_info",
            "anchors",
            "nms_threshold",
            "pre_nms_topn",
            "min_size",
            "post_nms_topn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.grayscale_to_rgb",
        "name": "grayscale_to_rgb",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.hsv_to_rgb",
        "name": "hsv_to_rgb",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.image_gradients",
        "name": "image_gradients",
        "params": [
            "image"
        ]
    },
    {
        "full_name": "tensorflow.io.is_jpeg",
        "name": "is_jpeg",
        "params": [
            "contents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.non_max_suppression",
        "name": "non_max_suppression",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "score_threshold",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.non_max_suppression_overlaps",
        "name": "non_max_suppression_overlaps",
        "params": [
            "overlaps",
            "scores",
            "max_output_size",
            "overlap_threshold",
            "score_threshold",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.non_max_suppression_padded",
        "name": "non_max_suppression_padded",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "score_threshold",
            "pad_to_max_output_size",
            "name",
            "sorted_input",
            "canonicalized_coordinates",
            "tile_size"
        ]
    },
    {
        "full_name": "tensorflow.image.non_max_suppression_with_scores",
        "name": "non_max_suppression_with_scores",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "score_threshold",
            "soft_nms_sigma",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.pad_to_bounding_box",
        "name": "pad_to_bounding_box",
        "params": [
            "image",
            "offset_height",
            "offset_width",
            "target_height",
            "target_width"
        ]
    },
    {
        "full_name": "tensorflow.image.per_image_standardization",
        "name": "per_image_standardization",
        "params": [
            "image"
        ]
    },
    {
        "full_name": "tensorflow.image.psnr",
        "name": "psnr",
        "params": [
            "a",
            "b",
            "max_val",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.random_brightness",
        "name": "random_brightness",
        "params": [
            "image",
            "max_delta",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.random_contrast",
        "name": "random_contrast",
        "params": [
            "image",
            "lower",
            "upper",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.random_crop",
        "name": "random_crop",
        "params": [
            "value",
            "size",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.random_flip_left_right",
        "name": "random_flip_left_right",
        "params": [
            "image",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.random_flip_up_down",
        "name": "random_flip_up_down",
        "params": [
            "image",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.random_hue",
        "name": "random_hue",
        "params": [
            "image",
            "max_delta",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.random_jpeg_quality",
        "name": "random_jpeg_quality",
        "params": [
            "image",
            "min_jpeg_quality",
            "max_jpeg_quality",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.random_saturation",
        "name": "random_saturation",
        "params": [
            "image",
            "lower",
            "upper",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.resize",
        "name": "resize",
        "params": [
            "images",
            "size",
            "method",
            "preserve_aspect_ratio",
            "antialias",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.resize_with_crop_or_pad",
        "name": "resize_with_crop_or_pad",
        "params": [
            "image",
            "target_height",
            "target_width"
        ]
    },
    {
        "full_name": "tensorflow.image.resize_with_pad",
        "name": "resize_with_pad",
        "params": [
            "image",
            "target_height",
            "target_width",
            "method",
            "antialias"
        ]
    },
    {
        "full_name": "tensorflow.image.rgb_to_grayscale",
        "name": "rgb_to_grayscale",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.rgb_to_hsv",
        "name": "rgb_to_hsv",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.rgb_to_yiq",
        "name": "rgb_to_yiq",
        "params": [
            "images"
        ]
    },
    {
        "full_name": "tensorflow.image.rgb_to_yuv",
        "name": "rgb_to_yuv",
        "params": [
            "images"
        ]
    },
    {
        "full_name": "tensorflow.image.rot90",
        "name": "rot90",
        "params": [
            "image",
            "k",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.sample_distorted_bounding_box",
        "name": "sample_distorted_bounding_box",
        "params": [
            "image_size",
            "bounding_boxes",
            "seed",
            "min_object_covered",
            "aspect_ratio_range",
            "area_range",
            "max_attempts",
            "use_image_if_no_bounding_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.sobel_edges",
        "name": "sobel_edges",
        "params": [
            "image"
        ]
    },
    {
        "full_name": "tensorflow.image.ssim",
        "name": "ssim",
        "params": [
            "img1",
            "img2",
            "max_val",
            "filter_size",
            "filter_sigma",
            "k1",
            "k2"
        ]
    },
    {
        "full_name": "tensorflow.image.ssim_multiscale",
        "name": "ssim_multiscale",
        "params": [
            "img1",
            "img2",
            "max_val",
            "power_factors",
            "filter_size",
            "filter_sigma",
            "k1",
            "k2"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_brightness",
        "name": "stateless_random_brightness",
        "params": [
            "image",
            "max_delta",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_contrast",
        "name": "stateless_random_contrast",
        "params": [
            "image",
            "lower",
            "upper",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_crop",
        "name": "stateless_random_crop",
        "params": [
            "value",
            "size",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_flip_left_right",
        "name": "stateless_random_flip_left_right",
        "params": [
            "image",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_flip_up_down",
        "name": "stateless_random_flip_up_down",
        "params": [
            "image",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_hue",
        "name": "stateless_random_hue",
        "params": [
            "image",
            "max_delta",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_jpeg_quality",
        "name": "stateless_random_jpeg_quality",
        "params": [
            "image",
            "min_jpeg_quality",
            "max_jpeg_quality",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_random_saturation",
        "name": "stateless_random_saturation",
        "params": [
            "image",
            "lower",
            "upper",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.image.stateless_sample_distorted_bounding_box",
        "name": "stateless_sample_distorted_bounding_box",
        "params": [
            "image_size",
            "bounding_boxes",
            "seed",
            "min_object_covered",
            "aspect_ratio_range",
            "area_range",
            "max_attempts",
            "use_image_if_no_bounding_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.total_variation",
        "name": "total_variation",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.transpose",
        "name": "transpose",
        "params": [
            "image",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.image.yiq_to_rgb",
        "name": "yiq_to_rgb",
        "params": [
            "images"
        ]
    },
    {
        "full_name": "tensorflow.image.yuv_to_rgb",
        "name": "yuv_to_rgb",
        "params": [
            "images"
        ]
    },
    {
        "full_name": "tensorflow.io.FixedLenFeature",
        "name": "FixedLenFeature",
        "params": [
            "shape",
            "dtype",
            "default_value"
        ]
    },
    {
        "full_name": "tensorflow.io.FixedLenSequenceFeature",
        "name": "FixedLenSequenceFeature",
        "params": [
            "shape",
            "dtype",
            "allow_missing",
            "default_value"
        ]
    },
    {
        "full_name": "tensorflow.io.RaggedFeature",
        "name": "RaggedFeature",
        "params": [
            "dtype",
            "value_key",
            "partitions",
            "row_splits_dtype",
            "validate"
        ]
    },
    {
        "full_name": "tensorflow.io.SparseFeature",
        "name": "SparseFeature",
        "params": [
            "index_key",
            "value_key",
            "dtype",
            "size",
            "already_sorted"
        ]
    },
    {
        "full_name": "tensorflow.io.TFRecordOptions",
        "name": "TFRecordOptions",
        "params": [
            "compression_type",
            "flush_mode",
            "input_buffer_size",
            "output_buffer_size",
            "window_bits",
            "compression_level",
            "compression_method",
            "mem_level",
            "compression_strategy"
        ]
    },
    {
        "full_name": "tensorflow.io.TFRecordWriter",
        "name": "TFRecordWriter",
        "params": [
            "path",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.io.VarLenFeature",
        "name": "VarLenFeature",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_base64",
        "name": "decode_base64",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_compressed",
        "name": "decode_compressed",
        "params": [
            "bytes",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_csv",
        "name": "decode_csv",
        "params": [
            "records",
            "record_defaults",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_json_example",
        "name": "decode_json_example",
        "params": [
            "json_examples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_proto",
        "name": "decode_proto",
        "params": [
            "bytes",
            "message_type",
            "field_names",
            "output_types",
            "descriptor_source",
            "message_format",
            "sanitize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.decode_raw",
        "name": "decode_raw",
        "params": [
            "input_bytes",
            "out_type",
            "little_endian",
            "fixed_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.deserialize_many_sparse",
        "name": "deserialize_many_sparse",
        "params": [
            "serialized_sparse",
            "dtype",
            "rank",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.encode_base64",
        "name": "encode_base64",
        "params": [
            "input",
            "pad",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.encode_proto",
        "name": "encode_proto",
        "params": [
            "sizes",
            "values",
            "field_names",
            "message_type",
            "descriptor_source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.match_filenames_once",
        "name": "match_filenames_once",
        "params": [
            "pattern",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.matching_files",
        "name": "matching_files",
        "params": [
            "pattern",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.parse_example",
        "name": "parse_example",
        "params": [
            "serialized",
            "features",
            "example_names",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.parse_sequence_example",
        "name": "parse_sequence_example",
        "params": [
            "serialized",
            "context_features",
            "sequence_features",
            "example_names",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.parse_single_example",
        "name": "parse_single_example",
        "params": [
            "serialized",
            "features",
            "example_names",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.parse_single_sequence_example",
        "name": "parse_single_sequence_example",
        "params": [
            "serialized",
            "context_features",
            "sequence_features",
            "example_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.parse_tensor",
        "name": "parse_tensor",
        "params": [
            "serialized",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.read_file",
        "name": "read_file",
        "params": [
            "filename",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.serialize_many_sparse",
        "name": "serialize_many_sparse",
        "params": [
            "sp_input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.serialize_sparse",
        "name": "serialize_sparse",
        "params": [
            "sp_input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.serialize_tensor",
        "name": "serialize_tensor",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.write_file",
        "name": "write_file",
        "params": [
            "filename",
            "contents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.io.write_graph",
        "name": "write_graph",
        "params": [
            "graph_or_graph_def",
            "logdir",
            "name",
            "as_text"
        ]
    },
    {
        "full_name": "tensorflow.keras.Model",
        "name": "Model",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.Sequential",
        "name": "Sequential",
        "params": [
            "layers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.Input",
        "name": "Input",
        "params": [
            "shape",
            "batch_size",
            "name",
            "dtype",
            "sparse",
            "tensor",
            "ragged",
            "type_spec",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperator",
        "name": "LinearOperator",
        "params": [
            "dtype",
            "graph_parents",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name",
            "parameters"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorAdjoint",
        "name": "LinearOperatorAdjoint",
        "params": [
            "operator",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorBlockDiag",
        "name": "LinearOperatorBlockDiag",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorBlockLowerTriangular",
        "name": "LinearOperatorBlockLowerTriangular",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorCirculant",
        "name": "LinearOperatorCirculant",
        "params": [
            "spectrum",
            "input_output_dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorCirculant2D",
        "name": "LinearOperatorCirculant2D",
        "params": [
            "spectrum",
            "input_output_dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorCirculant3D",
        "name": "LinearOperatorCirculant3D",
        "params": [
            "spectrum",
            "input_output_dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorComposition",
        "name": "LinearOperatorComposition",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorDiag",
        "name": "LinearOperatorDiag",
        "params": [
            "diag",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorFullMatrix",
        "name": "LinearOperatorFullMatrix",
        "params": [
            "matrix",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorHouseholder",
        "name": "LinearOperatorHouseholder",
        "params": [
            "reflection_axis",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorIdentity",
        "name": "LinearOperatorIdentity",
        "params": [
            "num_rows",
            "batch_shape",
            "dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "assert_proper_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorInversion",
        "name": "LinearOperatorInversion",
        "params": [
            "operator",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorKronecker",
        "name": "LinearOperatorKronecker",
        "params": [
            "operators",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorLowRankUpdate",
        "name": "LinearOperatorLowRankUpdate",
        "params": [
            "base_operator",
            "u",
            "diag_update",
            "v",
            "is_diag_update_positive",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorLowerTriangular",
        "name": "LinearOperatorLowerTriangular",
        "params": [
            "tril",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorPermutation",
        "name": "LinearOperatorPermutation",
        "params": [
            "perm",
            "dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorScaledIdentity",
        "name": "LinearOperatorScaledIdentity",
        "params": [
            "num_rows",
            "multiplier",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "assert_proper_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorToeplitz",
        "name": "LinearOperatorToeplitz",
        "params": [
            "col",
            "row",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorTridiag",
        "name": "LinearOperatorTridiag",
        "params": [
            "diagonals",
            "diagonals_format",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.LinearOperatorZeros",
        "name": "LinearOperatorZeros",
        "params": [
            "num_rows",
            "num_columns",
            "batch_shape",
            "dtype",
            "is_non_singular",
            "is_self_adjoint",
            "is_positive_definite",
            "is_square",
            "assert_proper_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.adjoint",
        "name": "adjoint",
        "params": [
            "matrix",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.band_part",
        "name": "band_part",
        "params": [
            "input",
            "num_lower",
            "num_upper",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.banded_triangular_solve",
        "name": "banded_triangular_solve",
        "params": [
            "bands",
            "rhs",
            "lower",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.cholesky",
        "name": "cholesky",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.cholesky_solve",
        "name": "cholesky_solve",
        "params": [
            "chol",
            "rhs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.cross",
        "name": "cross",
        "params": [
            "a",
            "b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.det",
        "name": "det",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.diag",
        "name": "diag",
        "params": [
            "diagonal",
            "name",
            "k",
            "num_rows",
            "num_cols",
            "padding_value",
            "align"
        ]
    },
    {
        "full_name": "tensorflow.linalg.diag_part",
        "name": "diag_part",
        "params": [
            "input",
            "name",
            "k",
            "padding_value",
            "align"
        ]
    },
    {
        "full_name": "tensorflow.linalg.eigh",
        "name": "eigh",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.eigh_tridiagonal",
        "name": "eigh_tridiagonal",
        "params": [
            "alpha",
            "beta",
            "eigvals_only",
            "select",
            "select_range",
            "tol",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.eigvalsh",
        "name": "eigvalsh",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.expm",
        "name": "expm",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.global_norm",
        "name": "global_norm",
        "params": [
            "t_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.inv",
        "name": "inv",
        "params": [
            "input",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.l2_normalize",
        "name": "l2_normalize",
        "params": [
            "x",
            "axis",
            "epsilon",
            "name",
            "dim"
        ]
    },
    {
        "full_name": "tensorflow.linalg.logdet",
        "name": "logdet",
        "params": [
            "matrix",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.logm",
        "name": "logm",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.lstsq",
        "name": "lstsq",
        "params": [
            "matrix",
            "rhs",
            "l2_regularizer",
            "fast",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.lu",
        "name": "lu",
        "params": [
            "input",
            "output_idx_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.lu_matrix_inverse",
        "name": "lu_matrix_inverse",
        "params": [
            "lower_upper",
            "perm",
            "validate_args",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.lu_reconstruct",
        "name": "lu_reconstruct",
        "params": [
            "lower_upper",
            "perm",
            "validate_args",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.lu_solve",
        "name": "lu_solve",
        "params": [
            "lower_upper",
            "perm",
            "rhs",
            "validate_args",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.matrix_rank",
        "name": "matrix_rank",
        "params": [
            "a",
            "tol",
            "validate_args",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.matrix_transpose",
        "name": "matrix_transpose",
        "params": [
            "a",
            "name",
            "conjugate"
        ]
    },
    {
        "full_name": "tensorflow.linalg.matvec",
        "name": "matvec",
        "params": [
            "a",
            "b",
            "transpose_a",
            "adjoint_a",
            "a_is_sparse",
            "b_is_sparse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.normalize",
        "name": "normalize",
        "params": [
            "tensor",
            "ord",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.pinv",
        "name": "pinv",
        "params": [
            "a",
            "rcond",
            "validate_args",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.qr",
        "name": "qr",
        "params": [
            "input",
            "full_matrices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.set_diag",
        "name": "set_diag",
        "params": [
            "input",
            "diagonal",
            "name",
            "k",
            "align"
        ]
    },
    {
        "full_name": "tensorflow.linalg.slogdet",
        "name": "slogdet",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.solve",
        "name": "solve",
        "params": [
            "matrix",
            "rhs",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.svd",
        "name": "svd",
        "params": [
            "tensor",
            "full_matrices",
            "compute_uv",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.tensor_diag",
        "name": "tensor_diag",
        "params": [
            "diagonal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.tensor_diag_part",
        "name": "tensor_diag_part",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.trace",
        "name": "trace",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.triangular_solve",
        "name": "triangular_solve",
        "params": [
            "matrix",
            "rhs",
            "lower",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.tridiagonal_matmul",
        "name": "tridiagonal_matmul",
        "params": [
            "diagonals",
            "rhs",
            "diagonals_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.linalg.tridiagonal_solve",
        "name": "tridiagonal_solve",
        "params": [
            "diagonals",
            "rhs",
            "diagonals_format",
            "transpose_rhs",
            "conjugate_rhs",
            "name",
            "partial_pivoting",
            "perturb_singular"
        ]
    },
    {
        "full_name": "tensorflow.lite.Interpreter",
        "name": "Interpreter",
        "params": [
            "model_path",
            "model_content",
            "experimental_delegates",
            "num_threads",
            "experimental_op_resolver_type",
            "experimental_preserve_all_tensors"
        ]
    },
    {
        "full_name": "tensorflow.lite.OpsSet",
        "name": "OpsSet",
        "params": []
    },
    {
        "full_name": "tensorflow.lite.Optimize",
        "name": "Optimize",
        "params": []
    },
    {
        "full_name": "tensorflow.lite.RepresentativeDataset",
        "name": "RepresentativeDataset",
        "params": [
            "input_gen"
        ]
    },
    {
        "full_name": "tensorflow.lite.TFLiteConverter",
        "name": "TFLiteConverter",
        "params": [
            "funcs",
            "trackable_obj"
        ]
    },
    {
        "full_name": "tensorflow.lite.TargetSpec",
        "name": "TargetSpec",
        "params": [
            "supported_ops",
            "supported_types",
            "experimental_select_user_tf_ops",
            "experimental_supported_backends"
        ]
    },
    {
        "full_name": "tensorflow.lookup.KeyValueTensorInitializer",
        "name": "KeyValueTensorInitializer",
        "params": [
            "keys",
            "values",
            "key_dtype",
            "value_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.lookup.StaticHashTable",
        "name": "StaticHashTable",
        "params": [
            "initializer",
            "default_value",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name": "tensorflow.lookup.StaticVocabularyTable",
        "name": "StaticVocabularyTable",
        "params": [
            "initializer",
            "num_oov_buckets",
            "lookup_key_dtype",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name": "tensorflow.lookup.TextFileIndex",
        "name": "TextFileIndex",
        "params": []
    },
    {
        "full_name": "tensorflow.lookup.TextFileInitializer",
        "name": "TextFileInitializer",
        "params": [
            "filename",
            "key_dtype",
            "key_index",
            "value_dtype",
            "value_index",
            "vocab_size",
            "delimiter",
            "name",
            "value_index_offset"
        ]
    },
    {
        "full_name": "tensorflow.math.accumulate_n",
        "name": "accumulate_n",
        "params": [
            "inputs",
            "shape",
            "tensor_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.angle",
        "name": "angle",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.bessel_i0",
        "name": "bessel_i0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.bessel_i0e",
        "name": "bessel_i0e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.bessel_i1",
        "name": "bessel_i1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.bessel_i1e",
        "name": "bessel_i1e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.betainc",
        "name": "betainc",
        "params": [
            "a",
            "b",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.bincount",
        "name": "bincount",
        "params": [
            "arr",
            "weights",
            "minlength",
            "maxlength",
            "dtype",
            "name",
            "axis",
            "binary_output"
        ]
    },
    {
        "full_name": "tensorflow.math.ceil",
        "name": "ceil",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.confusion_matrix",
        "name": "confusion_matrix",
        "params": [
            "labels",
            "predictions",
            "num_classes",
            "weights",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.conj",
        "name": "conj",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.count_nonzero",
        "name": "count_nonzero",
        "params": [
            "input",
            "axis",
            "keepdims",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.cumprod",
        "name": "cumprod",
        "params": [
            "x",
            "axis",
            "exclusive",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.cumulative_logsumexp",
        "name": "cumulative_logsumexp",
        "params": [
            "x",
            "axis",
            "exclusive",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.digamma",
        "name": "digamma",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.divide_no_nan",
        "name": "divide_no_nan",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.erf",
        "name": "erf",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.erfc",
        "name": "erfc",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.erfcinv",
        "name": "erfcinv",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.erfinv",
        "name": "erfinv",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.expm1",
        "name": "expm1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.floordiv",
        "name": "floordiv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.floormod",
        "name": "floormod",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.igamma",
        "name": "igamma",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.igammac",
        "name": "igammac",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.imag",
        "name": "imag",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.in_top_k",
        "name": "in_top_k",
        "params": [
            "targets",
            "predictions",
            "k",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.invert_permutation",
        "name": "invert_permutation",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.is_finite",
        "name": "is_finite",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.is_inf",
        "name": "is_inf",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.is_nan",
        "name": "is_nan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.is_non_decreasing",
        "name": "is_non_decreasing",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.is_strictly_increasing",
        "name": "is_strictly_increasing",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.lbeta",
        "name": "lbeta",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.lgamma",
        "name": "lgamma",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.log",
        "name": "log",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.log1p",
        "name": "log1p",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.log_sigmoid",
        "name": "log_sigmoid",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.log_softmax",
        "name": "log_softmax",
        "params": [
            "logits",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.logical_xor",
        "name": "logical_xor",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.multiply_no_nan",
        "name": "multiply_no_nan",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.ndtri",
        "name": "ndtri",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.nextafter",
        "name": "nextafter",
        "params": [
            "x1",
            "x2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.polygamma",
        "name": "polygamma",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.polyval",
        "name": "polyval",
        "params": [
            "coeffs",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.real",
        "name": "real",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reciprocal",
        "name": "reciprocal",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reciprocal_no_nan",
        "name": "reciprocal_no_nan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_euclidean_norm",
        "name": "reduce_euclidean_norm",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_std",
        "name": "reduce_std",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.reduce_variance",
        "name": "reduce_variance",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.rint",
        "name": "rint",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.rsqrt",
        "name": "rsqrt",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.segment_max",
        "name": "segment_max",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.segment_mean",
        "name": "segment_mean",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.segment_min",
        "name": "segment_min",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.segment_prod",
        "name": "segment_prod",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.segment_sum",
        "name": "segment_sum",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.sobol_sample",
        "name": "sobol_sample",
        "params": [
            "dim",
            "num_results",
            "skip",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.softmax",
        "name": "softmax",
        "params": [
            "logits",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.softplus",
        "name": "softplus",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.softsign",
        "name": "softsign",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.squared_difference",
        "name": "squared_difference",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.top_k",
        "name": "top_k",
        "params": [
            "input",
            "k",
            "sorted",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.unsorted_segment_max",
        "name": "unsorted_segment_max",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.unsorted_segment_mean",
        "name": "unsorted_segment_mean",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.unsorted_segment_min",
        "name": "unsorted_segment_min",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.unsorted_segment_prod",
        "name": "unsorted_segment_prod",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.unsorted_segment_sqrt_n",
        "name": "unsorted_segment_sqrt_n",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.unsorted_segment_sum",
        "name": "unsorted_segment_sum",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.xdivy",
        "name": "xdivy",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.xlog1py",
        "name": "xlog1py",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.xlogy",
        "name": "xlogy",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.zero_fraction",
        "name": "zero_fraction",
        "params": [
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.zeta",
        "name": "zeta",
        "params": [
            "x",
            "q",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nest.assert_same_structure",
        "name": "assert_same_structure",
        "params": [
            "nest1",
            "nest2",
            "check_types",
            "expand_composites"
        ]
    },
    {
        "full_name": "tensorflow.nest.flatten",
        "name": "flatten",
        "params": [
            "structure",
            "expand_composites"
        ]
    },
    {
        "full_name": "tensorflow.nest.is_nested",
        "name": "is_nested",
        "params": [
            "seq"
        ]
    },
    {
        "full_name": "tensorflow.nest.map_structure",
        "name": "map_structure",
        "params": [
            "func",
            "*structure",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.nest.pack_sequence_as",
        "name": "pack_sequence_as",
        "params": [
            "structure",
            "flat_sequence",
            "expand_composites"
        ]
    },
    {
        "full_name": "tensorflow.nn.RNNCellDeviceWrapper",
        "name": "RNNCellDeviceWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.nn.RNNCellDropoutWrapper",
        "name": "RNNCellDropoutWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.nn.RNNCellResidualWrapper",
        "name": "RNNCellResidualWrapper",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.random.all_candidate_sampler",
        "name": "all_candidate_sampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.atrous_conv2d",
        "name": "atrous_conv2d",
        "params": [
            "value",
            "filters",
            "rate",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.atrous_conv2d_transpose",
        "name": "atrous_conv2d_transpose",
        "params": [
            "value",
            "filters",
            "output_shape",
            "rate",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.avg_pool",
        "name": "avg_pool",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.avg_pool1d",
        "name": "avg_pool1d",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.avg_pool2d",
        "name": "avg_pool2d",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.avg_pool3d",
        "name": "avg_pool3d",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.batch_norm_with_global_normalization",
        "name": "batch_norm_with_global_normalization",
        "params": [
            "input",
            "mean",
            "variance",
            "beta",
            "gamma",
            "variance_epsilon",
            "scale_after_normalization",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.batch_normalization",
        "name": "batch_normalization",
        "params": [
            "x",
            "mean",
            "variance",
            "offset",
            "scale",
            "variance_epsilon",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.bias_add",
        "name": "bias_add",
        "params": [
            "value",
            "bias",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.collapse_repeated",
        "name": "collapse_repeated",
        "params": [
            "labels",
            "seq_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.compute_accidental_hits",
        "name": "compute_accidental_hits",
        "params": [
            "true_classes",
            "sampled_candidates",
            "num_true",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.compute_average_loss",
        "name": "compute_average_loss",
        "params": [
            "per_example_loss",
            "sample_weight",
            "global_batch_size"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv1d",
        "name": "conv1d",
        "params": [
            "input",
            "filters",
            "stride",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv1d_transpose",
        "name": "conv1d_transpose",
        "params": [
            "input",
            "filters",
            "output_shape",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv2d",
        "name": "conv2d",
        "params": [
            "input",
            "filters",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv2d_transpose",
        "name": "conv2d_transpose",
        "params": [
            "input",
            "filters",
            "output_shape",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv3d",
        "name": "conv3d",
        "params": [
            "input",
            "filters",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv3d_transpose",
        "name": "conv3d_transpose",
        "params": [
            "input",
            "filters",
            "output_shape",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.conv_transpose",
        "name": "conv_transpose",
        "params": [
            "input",
            "filters",
            "output_shape",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.convolution",
        "name": "convolution",
        "params": [
            "input",
            "filters",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.crelu",
        "name": "crelu",
        "params": [
            "features",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.ctc_beam_search_decoder",
        "name": "ctc_beam_search_decoder",
        "params": [
            "inputs",
            "sequence_length",
            "beam_width",
            "top_paths"
        ]
    },
    {
        "full_name": "tensorflow.nn.ctc_greedy_decoder",
        "name": "ctc_greedy_decoder",
        "params": [
            "inputs",
            "sequence_length",
            "merge_repeated",
            "blank_index"
        ]
    },
    {
        "full_name": "tensorflow.nn.ctc_loss",
        "name": "ctc_loss",
        "params": [
            "labels",
            "logits",
            "label_length",
            "logit_length",
            "logits_time_major",
            "unique",
            "blank_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.ctc_unique_labels",
        "name": "ctc_unique_labels",
        "params": [
            "labels",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.depth_to_space",
        "name": "depth_to_space",
        "params": [
            "input",
            "block_size",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.depthwise_conv2d",
        "name": "depthwise_conv2d",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.depthwise_conv2d_backprop_filter",
        "name": "depthwise_conv2d_backprop_filter",
        "params": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.depthwise_conv2d_backprop_input",
        "name": "depthwise_conv2d_backprop_input",
        "params": [
            "input_sizes",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.dilation2d",
        "name": "dilation2d",
        "params": [
            "input",
            "filters",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.dropout",
        "name": "dropout",
        "params": [
            "x",
            "rate",
            "noise_shape",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.elu",
        "name": "elu",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.embedding_lookup",
        "name": "embedding_lookup",
        "params": [
            "params",
            "ids",
            "max_norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.embedding_lookup_sparse",
        "name": "embedding_lookup_sparse",
        "params": [
            "params",
            "sp_ids",
            "sp_weights",
            "combiner",
            "max_norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.erosion2d",
        "name": "erosion2d",
        "params": [
            "value",
            "filters",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.fixed_unigram_candidate_sampler",
        "name": "fixed_unigram_candidate_sampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "vocab_file",
            "distortion",
            "num_reserved_ids",
            "num_shards",
            "shard",
            "unigrams",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.fractional_avg_pool",
        "name": "fractional_avg_pool",
        "params": [
            "value",
            "pooling_ratio",
            "pseudo_random",
            "overlapping",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.fractional_max_pool",
        "name": "fractional_max_pool",
        "params": [
            "value",
            "pooling_ratio",
            "pseudo_random",
            "overlapping",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.gelu",
        "name": "gelu",
        "params": [
            "features",
            "approximate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.isotonic_regression",
        "name": "isotonic_regression",
        "params": [
            "inputs",
            "decreasing",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.nn.l2_loss",
        "name": "l2_loss",
        "params": [
            "t",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.leaky_relu",
        "name": "leaky_relu",
        "params": [
            "features",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.learned_unigram_candidate_sampler",
        "name": "learned_unigram_candidate_sampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.local_response_normalization",
        "name": "local_response_normalization",
        "params": [
            "input",
            "depth_radius",
            "bias",
            "alpha",
            "beta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.log_poisson_loss",
        "name": "log_poisson_loss",
        "params": [
            "targets",
            "log_input",
            "compute_full_loss",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.max_pool",
        "name": "max_pool",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.max_pool1d",
        "name": "max_pool1d",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.max_pool2d",
        "name": "max_pool2d",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.max_pool3d",
        "name": "max_pool3d",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.max_pool_with_argmax",
        "name": "max_pool_with_argmax",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "output_dtype",
            "include_batch_in_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.moments",
        "name": "moments",
        "params": [
            "x",
            "axes",
            "shift",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.nce_loss",
        "name": "nce_loss",
        "params": [
            "weights",
            "biases",
            "labels",
            "inputs",
            "num_sampled",
            "num_classes",
            "num_true",
            "sampled_values",
            "remove_accidental_hits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.normalize_moments",
        "name": "normalize_moments",
        "params": [
            "counts",
            "mean_ss",
            "variance_ss",
            "shift",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.pool",
        "name": "pool",
        "params": [
            "input",
            "window_shape",
            "pooling_type",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.relu",
        "name": "relu",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.relu6",
        "name": "relu6",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.safe_embedding_lookup_sparse",
        "name": "safe_embedding_lookup_sparse",
        "params": [
            "embedding_weights",
            "sparse_ids",
            "sparse_weights",
            "combiner",
            "default_id",
            "max_norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.sampled_softmax_loss",
        "name": "sampled_softmax_loss",
        "params": [
            "weights",
            "biases",
            "labels",
            "inputs",
            "num_sampled",
            "num_classes",
            "num_true",
            "sampled_values",
            "remove_accidental_hits",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.scale_regularization_loss",
        "name": "scale_regularization_loss",
        "params": [
            "regularization_loss"
        ]
    },
    {
        "full_name": "tensorflow.nn.selu",
        "name": "selu",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.separable_conv2d",
        "name": "separable_conv2d",
        "params": [
            "input",
            "depthwise_filter",
            "pointwise_filter",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.sigmoid_cross_entropy_with_logits",
        "name": "sigmoid_cross_entropy_with_logits",
        "params": [
            "labels",
            "logits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.silu",
        "name": "silu",
        "params": [
            "features",
            "beta"
        ]
    },
    {
        "full_name": "tensorflow.nn.softmax_cross_entropy_with_logits",
        "name": "softmax_cross_entropy_with_logits",
        "params": [
            "labels",
            "logits",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.space_to_depth",
        "name": "space_to_depth",
        "params": [
            "input",
            "block_size",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.sparse_softmax_cross_entropy_with_logits",
        "name": "sparse_softmax_cross_entropy_with_logits",
        "params": [
            "labels",
            "logits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.sufficient_statistics",
        "name": "sufficient_statistics",
        "params": [
            "x",
            "axes",
            "shift",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.weighted_cross_entropy_with_logits",
        "name": "weighted_cross_entropy_with_logits",
        "params": [
            "labels",
            "logits",
            "pos_weight",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.weighted_moments",
        "name": "weighted_moments",
        "params": [
            "x",
            "axes",
            "frequency_weights",
            "keepdims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.nn.with_space_to_batch",
        "name": "with_space_to_batch",
        "params": [
            "input",
            "dilation_rate",
            "padding",
            "op",
            "filter_shape",
            "spatial_dims",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.quantization.dequantize",
        "name": "dequantize",
        "params": [
            "input",
            "min_range",
            "max_range",
            "mode",
            "name",
            "axis",
            "narrow_range",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.quantization.fake_quant_with_min_max_args",
        "name": "fake_quant_with_min_max_args",
        "params": [
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.quantization.fake_quant_with_min_max_args_gradient",
        "name": "fake_quant_with_min_max_args_gradient",
        "params": [
            "gradients",
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.quantization.fake_quant_with_min_max_vars",
        "name": "fake_quant_with_min_max_vars",
        "params": [
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.quantization.fake_quant_with_min_max_vars_gradient",
        "name": "fake_quant_with_min_max_vars_gradient",
        "params": [
            "gradients",
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.quantization.fake_quant_with_min_max_vars_per_channel",
        "name": "fake_quant_with_min_max_vars_per_channel",
        "params": [
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.quantization.fake_quant_with_min_max_vars_per_channel_gradient",
        "name": "fake_quant_with_min_max_vars_per_channel_gradient",
        "params": [
            "gradients",
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.quantization.quantize",
        "name": "quantize",
        "params": [
            "input",
            "min_range",
            "max_range",
            "T",
            "mode",
            "round_mode",
            "name",
            "narrow_range",
            "axis",
            "ensure_minimum_range"
        ]
    },
    {
        "full_name": "tensorflow.quantization.quantize_and_dequantize",
        "name": "quantize_and_dequantize",
        "params": [
            "input",
            "input_min",
            "input_max",
            "signed_input",
            "num_bits",
            "range_given",
            "round_mode",
            "name",
            "narrow_range",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.quantization.quantize_and_dequantize_v2",
        "name": "quantize_and_dequantize_v2",
        "params": [
            "input",
            "input_min",
            "input_max",
            "signed_input",
            "num_bits",
            "range_given",
            "round_mode",
            "name",
            "narrow_range",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.quantization.quantized_concat",
        "name": "quantized_concat",
        "params": [
            "concat_dim",
            "values",
            "input_mins",
            "input_maxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.queue.FIFOQueue",
        "name": "FIFOQueue",
        "params": [
            "capacity",
            "dtypes",
            "shapes",
            "names",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.queue.PaddingFIFOQueue",
        "name": "PaddingFIFOQueue",
        "params": [
            "capacity",
            "dtypes",
            "shapes",
            "names",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.queue.PriorityQueue",
        "name": "PriorityQueue",
        "params": [
            "capacity",
            "types",
            "shapes",
            "names",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.queue.QueueBase",
        "name": "QueueBase",
        "params": [
            "dtypes",
            "shapes",
            "names",
            "queue_ref"
        ]
    },
    {
        "full_name": "tensorflow.queue.RandomShuffleQueue",
        "name": "RandomShuffleQueue",
        "params": [
            "capacity",
            "min_after_dequeue",
            "dtypes",
            "shapes",
            "names",
            "seed",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ragged.boolean_mask",
        "name": "boolean_mask",
        "params": [
            "data",
            "mask",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ragged.constant",
        "name": "constant",
        "params": [
            "pylist",
            "dtype",
            "ragged_rank",
            "inner_shape",
            "name",
            "row_splits_dtype"
        ]
    },
    {
        "full_name": "tensorflow.ragged.cross",
        "name": "cross",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ragged.cross_hashed",
        "name": "cross_hashed",
        "params": [
            "inputs",
            "num_buckets",
            "hash_key",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ragged.map_flat_values",
        "name": "map_flat_values",
        "params": [
            "op",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.ragged.range",
        "name": "range",
        "params": [
            "starts",
            "limits",
            "deltas",
            "dtype",
            "name",
            "row_splits_dtype"
        ]
    },
    {
        "full_name": "tensorflow.ragged.row_splits_to_segment_ids",
        "name": "row_splits_to_segment_ids",
        "params": [
            "splits",
            "name",
            "out_type"
        ]
    },
    {
        "full_name": "tensorflow.ragged.segment_ids_to_row_splits",
        "name": "segment_ids_to_row_splits",
        "params": [
            "segment_ids",
            "num_segments",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.ragged.stack",
        "name": "stack",
        "params": []
    },
    {
        "full_name": "tensorflow.ragged.stack_dynamic_partitions",
        "name": "stack_dynamic_partitions",
        "params": [
            "data",
            "partitions",
            "num_partitions",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.Algorithm",
        "name": "Algorithm",
        "params": []
    },
    {
        "full_name": "tensorflow.random.Generator",
        "name": "Generator",
        "params": [
            "copy_from",
            "state",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.random.categorical",
        "name": "categorical",
        "params": [
            "logits",
            "num_samples",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.create_rng_state",
        "name": "create_rng_state",
        "params": [
            "seed",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.random.gamma",
        "name": "gamma",
        "params": [
            "shape",
            "alpha",
            "beta",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.get_global_generator",
        "name": "get_global_generator",
        "params": []
    },
    {
        "full_name": "tensorflow.random.log_uniform_candidate_sampler",
        "name": "log_uniform_candidate_sampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.normal",
        "name": "normal",
        "params": [
            "shape",
            "mean",
            "stddev",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.poisson",
        "name": "poisson",
        "params": [
            "shape",
            "lam",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.set_global_generator",
        "name": "set_global_generator",
        "params": [
            "generator"
        ]
    },
    {
        "full_name": "tensorflow.random.set_seed",
        "name": "set_seed",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.random.shuffle",
        "name": "shuffle",
        "params": [
            "value",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_binomial",
        "name": "stateless_binomial",
        "params": [
            "shape",
            "seed",
            "counts",
            "probs",
            "output_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_categorical",
        "name": "stateless_categorical",
        "params": [
            "logits",
            "num_samples",
            "seed",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_gamma",
        "name": "stateless_gamma",
        "params": [
            "shape",
            "seed",
            "alpha",
            "beta",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_normal",
        "name": "stateless_normal",
        "params": [
            "shape",
            "seed",
            "mean",
            "stddev",
            "dtype",
            "name",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_parameterized_truncated_normal",
        "name": "stateless_parameterized_truncated_normal",
        "params": [
            "shape",
            "seed",
            "means",
            "stddevs",
            "minvals",
            "maxvals",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_poisson",
        "name": "stateless_poisson",
        "params": [
            "shape",
            "seed",
            "lam",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_truncated_normal",
        "name": "stateless_truncated_normal",
        "params": [
            "shape",
            "seed",
            "mean",
            "stddev",
            "dtype",
            "name",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.random.stateless_uniform",
        "name": "stateless_uniform",
        "params": [
            "shape",
            "seed",
            "minval",
            "maxval",
            "dtype",
            "name",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.random.truncated_normal",
        "name": "truncated_normal",
        "params": [
            "shape",
            "mean",
            "stddev",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.uniform",
        "name": "uniform",
        "params": [
            "shape",
            "minval",
            "maxval",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.random.uniform_candidate_sampler",
        "name": "uniform_candidate_sampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.Asset",
        "name": "Asset",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.LoadOptions",
        "name": "LoadOptions",
        "params": [
            "allow_partial_checkpoint",
            "experimental_io_device",
            "experimental_skip_checkpoint"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.SaveOptions",
        "name": "SaveOptions",
        "params": [
            "namespace_whitelist",
            "save_debug_info",
            "function_aliases",
            "experimental_io_device",
            "experimental_variable_policy",
            "experimental_custom_gradients"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.contains_saved_model",
        "name": "contains_saved_model",
        "params": [
            "export_dir"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.load",
        "name": "load",
        "params": [
            "export_dir",
            "tags",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.save",
        "name": "save",
        "params": [
            "obj",
            "export_dir",
            "signatures",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.sets.difference",
        "name": "difference",
        "params": [
            "a",
            "b",
            "aminusb",
            "validate_indices"
        ]
    },
    {
        "full_name": "tensorflow.sets.intersection",
        "name": "intersection",
        "params": [
            "a",
            "b",
            "validate_indices"
        ]
    },
    {
        "full_name": "tensorflow.sets.size",
        "name": "size",
        "params": [
            "a",
            "validate_indices"
        ]
    },
    {
        "full_name": "tensorflow.sets.union",
        "name": "union",
        "params": [
            "a",
            "b",
            "validate_indices"
        ]
    },
    {
        "full_name": "tensorflow.signal.dct",
        "name": "dct",
        "params": [
            "input",
            "type",
            "n",
            "axis",
            "norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.fft",
        "name": "fft",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.fft2d",
        "name": "fft2d",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.fft3d",
        "name": "fft3d",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.fftshift",
        "name": "fftshift",
        "params": [
            "x",
            "axes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.frame",
        "name": "frame",
        "params": [
            "signal",
            "frame_length",
            "frame_step",
            "pad_end",
            "pad_value",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.hamming_window",
        "name": "hamming_window",
        "params": [
            "window_length",
            "periodic",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.hann_window",
        "name": "hann_window",
        "params": [
            "window_length",
            "periodic",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.idct",
        "name": "idct",
        "params": [
            "input",
            "type",
            "n",
            "axis",
            "norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.ifft",
        "name": "ifft",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.ifft2d",
        "name": "ifft2d",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.ifft3d",
        "name": "ifft3d",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.ifftshift",
        "name": "ifftshift",
        "params": [
            "x",
            "axes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.inverse_mdct",
        "name": "inverse_mdct",
        "params": [
            "mdcts",
            "window_fn",
            "norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.inverse_stensorflowt",
        "name": "inverse_stft",
        "params": [
            "stfts",
            "frame_length",
            "frame_step",
            "fft_length",
            "window_fn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.inverse_stensorflowt_window_fn",
        "name": "inverse_stft_window_fn",
        "params": [
            "frame_step",
            "forward_window_fn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.irfft",
        "name": "irfft",
        "params": [
            "input_tensor",
            "fft_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.irfft2d",
        "name": "irfft2d",
        "params": [
            "input_tensor",
            "fft_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.irfft3d",
        "name": "irfft3d",
        "params": [
            "input_tensor",
            "fft_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.kaiser_bessel_derived_window",
        "name": "kaiser_bessel_derived_window",
        "params": [
            "window_length",
            "beta",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.kaiser_window",
        "name": "kaiser_window",
        "params": [
            "window_length",
            "beta",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.linear_to_mel_weight_matrix",
        "name": "linear_to_mel_weight_matrix",
        "params": [
            "num_mel_bins",
            "num_spectrogram_bins",
            "sample_rate",
            "lower_edge_hertz",
            "upper_edge_hertz",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.mdct",
        "name": "mdct",
        "params": [
            "signals",
            "frame_length",
            "window_fn",
            "pad_end",
            "norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.mfccs_from_log_mel_spectrograms",
        "name": "mfccs_from_log_mel_spectrograms",
        "params": [
            "log_mel_spectrograms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.overlap_and_add",
        "name": "overlap_and_add",
        "params": [
            "signal",
            "frame_step",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.rfft",
        "name": "rfft",
        "params": [
            "input_tensor",
            "fft_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.rfft2d",
        "name": "rfft2d",
        "params": [
            "input_tensor",
            "fft_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.rfft3d",
        "name": "rfft3d",
        "params": [
            "input_tensor",
            "fft_length",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.stensorflowt",
        "name": "stft",
        "params": [
            "signals",
            "frame_length",
            "frame_step",
            "fft_length",
            "window_fn",
            "pad_end",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.signal.vorbis_window",
        "name": "vorbis_window",
        "params": [
            "window_length",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.add",
        "name": "add",
        "params": [
            "a",
            "b",
            "threshold"
        ]
    },
    {
        "full_name": "tensorflow.sparse.bincount",
        "name": "bincount",
        "params": [
            "values",
            "weights",
            "axis",
            "minlength",
            "maxlength",
            "binary_output",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.concat",
        "name": "concat",
        "params": [
            "axis",
            "sp_inputs",
            "expand_nonconcat_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.cross",
        "name": "cross",
        "params": [
            "inputs",
            "name",
            "separator"
        ]
    },
    {
        "full_name": "tensorflow.sparse.cross_hashed",
        "name": "cross_hashed",
        "params": [
            "inputs",
            "num_buckets",
            "hash_key",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.expand_dims",
        "name": "expand_dims",
        "params": [
            "sp_input",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.eye",
        "name": "eye",
        "params": [
            "num_rows",
            "num_columns",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.fill_empty_rows",
        "name": "fill_empty_rows",
        "params": [
            "sp_input",
            "default_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.from_dense",
        "name": "from_dense",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.map_values",
        "name": "map_values",
        "params": [
            "op",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.sparse.mask",
        "name": "mask",
        "params": [
            "a",
            "mask_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.maximum",
        "name": "maximum",
        "params": [
            "sp_a",
            "sp_b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.minimum",
        "name": "minimum",
        "params": [
            "sp_a",
            "sp_b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.reduce_max",
        "name": "reduce_max",
        "params": [
            "sp_input",
            "axis",
            "keepdims",
            "output_is_sparse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.reduce_sum",
        "name": "reduce_sum",
        "params": [
            "sp_input",
            "axis",
            "keepdims",
            "output_is_sparse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.reorder",
        "name": "reorder",
        "params": [
            "sp_input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.reset_shape",
        "name": "reset_shape",
        "params": [
            "sp_input",
            "new_shape"
        ]
    },
    {
        "full_name": "tensorflow.sparse.reshape",
        "name": "reshape",
        "params": [
            "sp_input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.retain",
        "name": "retain",
        "params": [
            "sp_input",
            "to_retain"
        ]
    },
    {
        "full_name": "tensorflow.sparse.segment_mean",
        "name": "segment_mean",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.segment_sqrt_n",
        "name": "segment_sqrt_n",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.segment_sum",
        "name": "segment_sum",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.slice",
        "name": "slice",
        "params": [
            "sp_input",
            "start",
            "size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.softmax",
        "name": "softmax",
        "params": [
            "sp_input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.sparse_dense_matmul",
        "name": "sparse_dense_matmul",
        "params": [
            "sp_a",
            "b",
            "adjoint_a",
            "adjoint_b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.split",
        "name": "split",
        "params": [
            "sp_input",
            "num_split",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.to_dense",
        "name": "to_dense",
        "params": [
            "sp_input",
            "default_value",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.to_indicator",
        "name": "to_indicator",
        "params": [
            "sp_input",
            "vocab_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sparse.transpose",
        "name": "transpose",
        "params": [
            "sp_input",
            "perm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.bytes_split",
        "name": "bytes_split",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.format",
        "name": "format",
        "params": [
            "template",
            "inputs",
            "placeholder",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.join",
        "name": "join",
        "params": [
            "inputs",
            "separator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.length",
        "name": "length",
        "params": [
            "input",
            "unit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.lower",
        "name": "lower",
        "params": [
            "input",
            "encoding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.ngrams",
        "name": "ngrams",
        "params": [
            "data",
            "ngram_width",
            "separator",
            "pad_values",
            "padding_width",
            "preserve_short_sequences",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.reduce_join",
        "name": "reduce_join",
        "params": [
            "inputs",
            "axis",
            "keepdims",
            "separator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.regex_full_match",
        "name": "regex_full_match",
        "params": [
            "input",
            "pattern",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.regex_replace",
        "name": "regex_replace",
        "params": [
            "input",
            "pattern",
            "rewrite",
            "replace_global",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.split",
        "name": "split",
        "params": [
            "input",
            "sep",
            "maxsplit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.strip",
        "name": "strip",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.substr",
        "name": "substr",
        "params": [
            "input",
            "pos",
            "len",
            "unit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.to_hash_bucket",
        "name": "to_hash_bucket",
        "params": [
            "input",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.to_hash_bucket_fast",
        "name": "to_hash_bucket_fast",
        "params": [
            "input",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.to_hash_bucket_strong",
        "name": "to_hash_bucket_strong",
        "params": [
            "input",
            "num_buckets",
            "key",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.to_number",
        "name": "to_number",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_decode",
        "name": "unicode_decode",
        "params": [
            "input",
            "input_encoding",
            "errors",
            "replacement_char",
            "replace_control_characters",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_decode_with_offsets",
        "name": "unicode_decode_with_offsets",
        "params": [
            "input",
            "input_encoding",
            "errors",
            "replacement_char",
            "replace_control_characters",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_encode",
        "name": "unicode_encode",
        "params": [
            "input",
            "output_encoding",
            "errors",
            "replacement_char",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_script",
        "name": "unicode_script",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_split",
        "name": "unicode_split",
        "params": [
            "input",
            "input_encoding",
            "errors",
            "replacement_char",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_split_with_offsets",
        "name": "unicode_split_with_offsets",
        "params": [
            "input",
            "input_encoding",
            "errors",
            "replacement_char",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unicode_transcode",
        "name": "unicode_transcode",
        "params": [
            "input",
            "input_encoding",
            "output_encoding",
            "errors",
            "replacement_char",
            "replace_control_characters",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.unsorted_segment_join",
        "name": "unsorted_segment_join",
        "params": [
            "inputs",
            "segment_ids",
            "num_segments",
            "separator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.strings.upper",
        "name": "upper",
        "params": [
            "input",
            "encoding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.summary.SummaryWriter",
        "name": "SummaryWriter",
        "params": []
    },
    {
        "full_name": "tensorflow.summary.audio",
        "name": "audio",
        "params": [
            "name",
            "data",
            "sample_rate",
            "step",
            "max_outputs",
            "encoding",
            "description"
        ]
    },
    {
        "full_name": "tensorflow.summary.create_file_writer",
        "name": "create_file_writer",
        "params": [
            "logdir",
            "max_queue",
            "flush_millis",
            "filename_suffix",
            "name",
            "experimental_trackable"
        ]
    },
    {
        "full_name": "tensorflow.summary.create_noop_writer",
        "name": "create_noop_writer",
        "params": []
    },
    {
        "full_name": "tensorflow.summary.flush",
        "name": "flush",
        "params": [
            "writer",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.summary.graph",
        "name": "graph",
        "params": [
            "graph_data"
        ]
    },
    {
        "full_name": "tensorflow.summary.histogram",
        "name": "histogram",
        "params": [
            "name",
            "data",
            "step",
            "buckets",
            "description"
        ]
    },
    {
        "full_name": "tensorflow.summary.image",
        "name": "image",
        "params": [
            "name",
            "data",
            "step",
            "max_outputs",
            "description"
        ]
    },
    {
        "full_name": "tensorflow.summary.record_if",
        "name": "record_if",
        "params": []
    },
    {
        "full_name": "tensorflow.summary.scalar",
        "name": "scalar",
        "params": [
            "name",
            "data",
            "step",
            "description"
        ]
    },
    {
        "full_name": "tensorflow.summary.should_record_summaries",
        "name": "should_record_summaries",
        "params": []
    },
    {
        "full_name": "tensorflow.summary.text",
        "name": "text",
        "params": [
            "name",
            "data",
            "step",
            "description"
        ]
    },
    {
        "full_name": "tensorflow.summary.trace_export",
        "name": "trace_export",
        "params": [
            "name",
            "step",
            "profiler_outdir"
        ]
    },
    {
        "full_name": "tensorflow.summary.trace_off",
        "name": "trace_off",
        "params": []
    },
    {
        "full_name": "tensorflow.summary.trace_on",
        "name": "trace_on",
        "params": [
            "graph",
            "profiler"
        ]
    },
    {
        "full_name": "tensorflow.summary.write",
        "name": "write",
        "params": [
            "tag",
            "tensor",
            "step",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.sysconfig.get_build_info",
        "name": "get_build_info",
        "params": []
    },
    {
        "full_name": "tensorflow.sysconfig.get_compile_flags",
        "name": "get_compile_flags",
        "params": []
    },
    {
        "full_name": "tensorflow.sysconfig.get_include",
        "name": "get_include",
        "params": []
    },
    {
        "full_name": "tensorflow.sysconfig.get_lib",
        "name": "get_lib",
        "params": []
    },
    {
        "full_name": "tensorflow.sysconfig.get_link_flags",
        "name": "get_link_flags",
        "params": []
    },
    {
        "full_name": "tensorflow.test.Benchmark",
        "name": "Benchmark",
        "params": []
    },
    {
        "full_name": "tensorflow.test.TestCase",
        "name": "TestCase",
        "params": [
            "methodName"
        ]
    },
    {
        "full_name": "tensorflow.test.assert_equal_graph_def",
        "name": "assert_equal_graph_def",
        "params": [
            "expected",
            "actual"
        ]
    },
    {
        "full_name": "tensorflow.test.benchmark_config",
        "name": "benchmark_config",
        "params": []
    },
    {
        "full_name": "tensorflow.test.compute_gradient",
        "name": "compute_gradient",
        "params": [
            "f",
            "x",
            "delta"
        ]
    },
    {
        "full_name": "tensorflow.test.create_local_cluster",
        "name": "create_local_cluster",
        "params": [
            "num_workers",
            "num_ps",
            "protocol",
            "worker_config",
            "ps_config"
        ]
    },
    {
        "full_name": "tensorflow.test.disable_with_predicate",
        "name": "disable_with_predicate",
        "params": [
            "pred",
            "skip_message"
        ]
    },
    {
        "full_name": "tensorflow.test.gpu_device_name",
        "name": "gpu_device_name",
        "params": []
    },
    {
        "full_name": "tensorflow.test.is_built_with_cuda",
        "name": "is_built_with_cuda",
        "params": []
    },
    {
        "full_name": "tensorflow.test.is_built_with_gpu_support",
        "name": "is_built_with_gpu_support",
        "params": []
    },
    {
        "full_name": "tensorflow.test.is_built_with_rocm",
        "name": "is_built_with_rocm",
        "params": []
    },
    {
        "full_name": "tensorflow.test.is_built_with_xla",
        "name": "is_built_with_xla",
        "params": []
    },
    {
        "full_name": "tensorflow.test.is_gpu_available",
        "name": "is_gpu_available",
        "params": [
            "cuda_only",
            "min_cuda_compute_capability"
        ]
    },
    {
        "full_name": "tensorflow.test.main",
        "name": "main",
        "params": [
            "argv"
        ]
    },
    {
        "full_name": "tensorflow.test.with_eager_op_as_function",
        "name": "with_eager_op_as_function",
        "params": [
            "cls",
            "only_as_function"
        ]
    },
    {
        "full_name": "tensorflow.tpu.XLAOptions",
        "name": "XLAOptions",
        "params": [
            "use_spmd_for_xla_partitioning",
            "enable_xla_dynamic_padder"
        ]
    },
    {
        "full_name": "tensorflow.train.BytesList",
        "name": "BytesList",
        "params": []
    },
    {
        "full_name": "tensorflow.train.Checkpoint",
        "name": "Checkpoint",
        "params": [
            "root",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.train.CheckpointManager",
        "name": "CheckpointManager",
        "params": [
            "checkpoint",
            "directory",
            "max_to_keep",
            "keep_checkpoint_every_n_hours",
            "checkpoint_name",
            "step_counter",
            "checkpoint_interval",
            "init_fn"
        ]
    },
    {
        "full_name": "tensorflow.train.CheckpointOptions",
        "name": "CheckpointOptions",
        "params": [
            "experimental_io_device",
            "experimental_enable_async_checkpoint"
        ]
    },
    {
        "full_name": "tensorflow.train.ClusterDef",
        "name": "ClusterDef",
        "params": []
    },
    {
        "full_name": "tensorflow.train.ClusterSpec",
        "name": "ClusterSpec",
        "params": [
            "cluster"
        ]
    },
    {
        "full_name": "tensorflow.train.Coordinator",
        "name": "Coordinator",
        "params": [
            "clean_stop_exception_types"
        ]
    },
    {
        "full_name": "tensorflow.train.Example",
        "name": "Example",
        "params": []
    },
    {
        "full_name": "tensorflow.train.ExponentialMovingAverage",
        "name": "ExponentialMovingAverage",
        "params": [
            "decay",
            "num_updates",
            "zero_debias",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.train.Feature",
        "name": "Feature",
        "params": []
    },
    {
        "full_name": "tensorflow.train.FeatureList",
        "name": "FeatureList",
        "params": []
    },
    {
        "full_name": "tensorflow.train.FeatureLists",
        "name": "FeatureLists",
        "params": []
    },
    {
        "full_name": "tensorflow.train.Features",
        "name": "Features",
        "params": []
    },
    {
        "full_name": "tensorflow.train.FloatList",
        "name": "FloatList",
        "params": []
    },
    {
        "full_name": "tensorflow.train.Int64List",
        "name": "Int64List",
        "params": []
    },
    {
        "full_name": "tensorflow.train.JobDef",
        "name": "JobDef",
        "params": []
    },
    {
        "full_name": "tensorflow.train.SequenceExample",
        "name": "SequenceExample",
        "params": []
    },
    {
        "full_name": "tensorflow.train.ServerDef",
        "name": "ServerDef",
        "params": []
    },
    {
        "full_name": "tensorflow.train.checkpoints_iterator",
        "name": "checkpoints_iterator",
        "params": [
            "checkpoint_dir",
            "min_interval_secs",
            "timeout",
            "timeout_fn"
        ]
    },
    {
        "full_name": "tensorflow.train.get_checkpoint_state",
        "name": "get_checkpoint_state",
        "params": [
            "checkpoint_dir",
            "latest_filename"
        ]
    },
    {
        "full_name": "tensorflow.train.latest_checkpoint",
        "name": "latest_checkpoint",
        "params": [
            "checkpoint_dir",
            "latest_filename"
        ]
    },
    {
        "full_name": "tensorflow.train.list_variables",
        "name": "list_variables",
        "params": [
            "ckpt_dir_or_file"
        ]
    },
    {
        "full_name": "tensorflow.train.load_checkpoint",
        "name": "load_checkpoint",
        "params": [
            "ckpt_dir_or_file"
        ]
    },
    {
        "full_name": "tensorflow.train.load_variable",
        "name": "load_variable",
        "params": [
            "ckpt_dir_or_file",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.autograph.experimental.Feature",
        "name": "Feature",
        "params": []
    },
    {
        "full_name": "tensorflow.autograph.experimental.do_not_convert",
        "name": "do_not_convert",
        "params": [
            "func"
        ]
    },
    {
        "full_name": "tensorflow.autograph.experimental.set_loop_options",
        "name": "set_loop_options",
        "params": [
            "parallel_iterations",
            "swap_memory",
            "maximum_iterations",
            "shape_invariants"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.AttrValue",
        "name": "AttrValue",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.ConditionalAccumulator",
        "name": "ConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "shared_name",
            "name",
            "reduction_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.ConditionalAccumulatorBase",
        "name": "ConditionalAccumulatorBase",
        "params": [
            "dtype",
            "shape",
            "accumulator_ref"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.ConfigProto",
        "name": "ConfigProto",
        "params": [
            "allow_soft_placement",
            "cluster_def",
            "device_count",
            "device_filters",
            "experimental",
            "gpu_options",
            "graph_options",
            "inter_op_parallelism_threads",
            "intra_op_parallelism_threads",
            "isolate_session_state",
            "log_device_placement",
            "operation_timeout_in_ms",
            "placement_period",
            "rpc_options",
            "session_inter_op_thread_pool",
            "share_cluster_devices_in_session",
            "use_per_session_threads"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.DeviceSpec",
        "name": "DeviceSpec",
        "params": [
            "job",
            "replica",
            "task",
            "device_type",
            "device_index"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.Dimension",
        "name": "Dimension",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.Event",
        "name": "Event",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.FixedLengthRecordReader",
        "name": "FixedLengthRecordReader",
        "params": [
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "hop_bytes",
            "name",
            "encoding"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.GPUOptions",
        "name": "GPUOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.GraphDef",
        "name": "GraphDef",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.GraphKeys",
        "name": "GraphKeys",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.GraphOptions",
        "name": "GraphOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.HistogramProto",
        "name": "HistogramProto",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.IdentityReader",
        "name": "IdentityReader",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.InteractiveSession",
        "name": "InteractiveSession",
        "params": [
            "target",
            "graph",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.LMDBReader",
        "name": "LMDBReader",
        "params": [
            "name",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.LogMessage",
        "name": "LogMessage",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.MetaGraphDef",
        "name": "MetaGraphDef",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.NameAttrList",
        "name": "NameAttrList",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.NodeDef",
        "name": "NodeDef",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.OptimizerOptions",
        "name": "OptimizerOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.ReaderBase",
        "name": "ReaderBase",
        "params": [
            "reader_ref",
            "supports_serialize"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.RunMetadata",
        "name": "RunMetadata",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.RunOptions",
        "name": "RunOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.Session",
        "name": "Session",
        "params": [
            "target",
            "graph",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.SessionLog",
        "name": "SessionLog",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.SparseConditionalAccumulator",
        "name": "SparseConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "shared_name",
            "name",
            "reduction_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.SparseTensorValue",
        "name": "SparseTensorValue",
        "params": [
            "indices",
            "values",
            "dense_shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.Summary",
        "name": "Summary",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.SummaryMetadata",
        "name": "SummaryMetadata",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.TFRecordReader",
        "name": "TFRecordReader",
        "params": [
            "name",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.TensorInfo",
        "name": "TensorInfo",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.TextLineReader",
        "name": "TextLineReader",
        "params": [
            "skip_header_lines",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.Variable",
        "name": "Variable",
        "params": [
            "initial_value",
            "trainable",
            "collections",
            "validate_shape",
            "caching_device",
            "name",
            "variable_def",
            "dtype",
            "expected_shape",
            "import_scope",
            "constraint",
            "use_resource",
            "synchronization",
            "aggregation",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.VariableAggregation",
        "name": "VariableAggregation",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.VariableScope",
        "name": "VariableScope",
        "params": [
            "reuse",
            "name",
            "initializer",
            "regularizer",
            "caching_device",
            "partitioner",
            "custom_getter",
            "name_scope",
            "dtype",
            "use_resource",
            "constraint"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.WholeFileReader",
        "name": "WholeFileReader",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.Constant",
        "name": "Constant",
        "params": [
            "value",
            "dtype",
            "verify_shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.glorot_normal",
        "name": "glorot_normal",
        "params": [
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.glorot_uniform",
        "name": "glorot_uniform",
        "params": [
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.backend.name_scope",
        "name": "name_scope",
        "params": [
            "name",
            "default_name",
            "values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.Ones",
        "name": "Ones",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.Orthogonal",
        "name": "Orthogonal",
        "params": [
            "gain",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.random_normal_initializer",
        "name": "random_normal_initializer",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.random_uniform_initializer",
        "name": "random_uniform_initializer",
        "params": [
            "minval",
            "maxval",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.truncated_normal_initializer",
        "name": "truncated_normal_initializer",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.uniform_unit_scaling_initializer",
        "name": "uniform_unit_scaling_initializer",
        "params": [
            "factor",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.variable_scope",
        "name": "variable_scope",
        "params": [
            "name_or_scope",
            "default_name",
            "values",
            "initializer",
            "regularizer",
            "caching_device",
            "partitioner",
            "custom_getter",
            "reuse",
            "dtype",
            "use_resource",
            "constraint",
            "auxiliary_name_scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.VarianceScaling",
        "name": "VarianceScaling",
        "params": [
            "scale",
            "mode",
            "distribution",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.Zeros",
        "name": "Zeros",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.Print",
        "name": "Print",
        "params": [
            "input_",
            "data",
            "message",
            "first_n",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.add_check_numerics_ops",
        "name": "add_check_numerics_ops",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.add_to_collection",
        "name": "add_to_collection",
        "params": [
            "name",
            "value"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.add_to_collections",
        "name": "add_to_collections",
        "params": [
            "names",
            "value"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.all_variables",
        "name": "all_variables",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.arg_max",
        "name": "arg_max",
        "params": [
            "input",
            "dimension",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.arg_min",
        "name": "arg_min",
        "params": [
            "input",
            "dimension",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.argmax",
        "name": "argmax",
        "params": [
            "input",
            "axis",
            "name",
            "dimension",
            "output_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.argmin",
        "name": "argmin",
        "params": [
            "input",
            "axis",
            "name",
            "dimension",
            "output_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_equal",
        "name": "assert_equal",
        "params": [
            "x",
            "y",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_greater",
        "name": "assert_greater",
        "params": [
            "x",
            "y",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_greater_equal",
        "name": "assert_greater_equal",
        "params": [
            "x",
            "y",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_integer",
        "name": "assert_integer",
        "params": [
            "x",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_less",
        "name": "assert_less",
        "params": [
            "x",
            "y",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_less_equal",
        "name": "assert_less_equal",
        "params": [
            "x",
            "y",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_near",
        "name": "assert_near",
        "params": [
            "x",
            "y",
            "rtol",
            "atol",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_negative",
        "name": "assert_negative",
        "params": [
            "x",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_non_negative",
        "name": "assert_non_negative",
        "params": [
            "x",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_non_positive",
        "name": "assert_non_positive",
        "params": [
            "x",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_none_equal",
        "name": "assert_none_equal",
        "params": [
            "x",
            "y",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_positive",
        "name": "assert_positive",
        "params": [
            "x",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_rank",
        "name": "assert_rank",
        "params": [
            "x",
            "rank",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_rank_at_least",
        "name": "assert_rank_at_least",
        "params": [
            "x",
            "rank",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_rank_in",
        "name": "assert_rank_in",
        "params": [
            "x",
            "ranks",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_scalar",
        "name": "assert_scalar",
        "params": [
            "tensor",
            "name",
            "message"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_type",
        "name": "assert_type",
        "params": [
            "tensor",
            "tf_type",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assert_variables_initialized",
        "name": "assert_variables_initialized",
        "params": [
            "var_list"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assign",
        "name": "assign",
        "params": [
            "ref",
            "value",
            "validate_shape",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assign_add",
        "name": "assign_add",
        "params": [
            "ref",
            "value",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.assign_sub",
        "name": "assign_sub",
        "params": [
            "ref",
            "value",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.batch_gather",
        "name": "batch_gather",
        "params": [
            "params",
            "indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.batch_scatter_update",
        "name": "batch_scatter_update",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.batch_to_space",
        "name": "batch_to_space",
        "params": [
            "input",
            "crops",
            "block_size",
            "name",
            "block_shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.batch_to_space_nd",
        "name": "batch_to_space_nd",
        "params": [
            "input",
            "block_shape",
            "crops",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.bincount",
        "name": "bincount",
        "params": [
            "arr",
            "weights",
            "minlength",
            "maxlength",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.boolean_mask",
        "name": "boolean_mask",
        "params": [
            "tensor",
            "mask",
            "name",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.case",
        "name": "case",
        "params": [
            "pred_fn_pairs",
            "default",
            "exclusive",
            "strict",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.clip_by_average_norm",
        "name": "clip_by_average_norm",
        "params": [
            "t",
            "clip_norm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.colocate_with",
        "name": "colocate_with",
        "params": [
            "op",
            "ignore_existing"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.cond",
        "name": "cond",
        "params": [
            "pred",
            "true_fn",
            "false_fn",
            "strict",
            "name",
            "fn1",
            "fn2"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.confusion_matrix",
        "name": "confusion_matrix",
        "params": [
            "labels",
            "predictions",
            "num_classes",
            "dtype",
            "name",
            "weights"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.constant",
        "name": "constant",
        "params": [
            "value",
            "dtype",
            "shape",
            "name",
            "verify_shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.container",
        "name": "container",
        "params": [
            "container_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.control_flow_v2_enabled",
        "name": "control_flow_v2_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.convert_to_tensor",
        "name": "convert_to_tensor",
        "params": [
            "value",
            "dtype",
            "name",
            "preferred_dtype",
            "dtype_hint"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.convert_to_tensor_or_indexed_slices",
        "name": "convert_to_tensor_or_indexed_slices",
        "params": [
            "value",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.convert_to_tensor_or_sparse_tensor",
        "name": "convert_to_tensor_or_sparse_tensor",
        "params": [
            "value",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.count_nonzero",
        "name": "count_nonzero",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "dtype",
            "name",
            "reduction_indices",
            "keep_dims",
            "input"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.count_up_to",
        "name": "count_up_to",
        "params": [
            "ref",
            "limit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.create_partitioned_variables",
        "name": "create_partitioned_variables",
        "params": [
            "shape",
            "slicing",
            "initializer",
            "dtype",
            "trainable",
            "collections",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.decode_csv",
        "name": "decode_csv",
        "params": [
            "records",
            "record_defaults",
            "field_delim",
            "use_quote_delim",
            "name",
            "na_value",
            "select_cols"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.decode_raw",
        "name": "decode_raw",
        "params": [
            "input_bytes",
            "out_type",
            "little_endian",
            "name",
            "bytes"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.delete_session_tensor",
        "name": "delete_session_tensor",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.depth_to_space",
        "name": "depth_to_space",
        "params": [
            "input",
            "block_size",
            "name",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.device",
        "name": "device",
        "params": [
            "device_name_or_function"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.disable_control_flow_v2",
        "name": "disable_control_flow_v2",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.disable_eager_execution",
        "name": "disable_eager_execution",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.disable_resource_variables",
        "name": "disable_resource_variables",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.disable_tensor_equality",
        "name": "disable_tensor_equality",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.disable_v2_behavior",
        "name": "disable_v2_behavior",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.disable_v2_tensorshape",
        "name": "disable_v2_tensorshape",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.div",
        "name": "div",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.enable_control_flow_v2",
        "name": "enable_control_flow_v2",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.enable_eager_execution",
        "name": "enable_eager_execution",
        "params": [
            "config",
            "device_policy",
            "execution_mode"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.enable_resource_variables",
        "name": "enable_resource_variables",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.enable_tensor_equality",
        "name": "enable_tensor_equality",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.enable_v2_behavior",
        "name": "enable_v2_behavior",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.enable_v2_tensorshape",
        "name": "enable_v2_tensorshape",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.executing_eagerly",
        "name": "executing_eagerly",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.executing_eagerly_outside_functions",
        "name": "executing_eagerly_outside_functions",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.expand_dims",
        "name": "expand_dims",
        "params": [
            "input",
            "axis",
            "name",
            "dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.extract_image_patches",
        "name": "extract_image_patches",
        "params": [
            "images",
            "ksizes",
            "strides",
            "rates",
            "padding",
            "name",
            "sizes"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.fixed_size_partitioner",
        "name": "fixed_size_partitioner",
        "params": [
            "num_shards",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.floor_div",
        "name": "floor_div",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.foldl",
        "name": "foldl",
        "params": [
            "fn",
            "elems",
            "initializer",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.foldr",
        "name": "foldr",
        "params": [
            "fn",
            "elems",
            "initializer",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gather",
        "name": "gather",
        "params": [
            "params",
            "indices",
            "validate_indices",
            "name",
            "axis",
            "batch_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gather_nd",
        "name": "gather_nd",
        "params": [
            "params",
            "indices",
            "name",
            "batch_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_collection",
        "name": "get_collection",
        "params": [
            "key",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_collection_ref",
        "name": "get_collection_ref",
        "params": [
            "key"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_default_graph",
        "name": "get_default_graph",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.get_default_session",
        "name": "get_default_session",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.get_local_variable",
        "name": "get_local_variable",
        "params": [
            "name",
            "shape",
            "dtype",
            "initializer",
            "regularizer",
            "trainable",
            "collections",
            "caching_device",
            "partitioner",
            "validate_shape",
            "use_resource",
            "custom_getter",
            "constraint",
            "synchronization",
            "aggregation"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_seed",
        "name": "get_seed",
        "params": [
            "op_seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_session_handle",
        "name": "get_session_handle",
        "params": [
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_session_tensor",
        "name": "get_session_tensor",
        "params": [
            "handle",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_variable",
        "name": "get_variable",
        "params": [
            "name",
            "shape",
            "dtype",
            "initializer",
            "regularizer",
            "trainable",
            "collections",
            "caching_device",
            "partitioner",
            "validate_shape",
            "use_resource",
            "custom_getter",
            "constraint",
            "synchronization",
            "aggregation"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.get_variable_scope",
        "name": "get_variable_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.global_variables",
        "name": "global_variables",
        "params": [
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.global_variables_initializer",
        "name": "global_variables_initializer",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.gradients",
        "name": "gradients",
        "params": [
            "ys",
            "xs",
            "grad_ys",
            "name",
            "colocate_gradients_with_ops",
            "gate_gradients",
            "aggregation_method",
            "stop_gradients",
            "unconnected_gradients"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.hessians",
        "name": "hessians",
        "params": [
            "ys",
            "xs",
            "name",
            "colocate_gradients_with_ops",
            "gate_gradients",
            "aggregation_method"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.initialize_all_tables",
        "name": "initialize_all_tables",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.initialize_all_variables",
        "name": "initialize_all_variables",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.initialize_local_variables",
        "name": "initialize_local_variables",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.initialize_variables",
        "name": "initialize_variables",
        "params": [
            "var_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.is_variable_initialized",
        "name": "is_variable_initialized",
        "params": [
            "variable"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.load_file_system_library",
        "name": "load_file_system_library",
        "params": [
            "library_filename"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.local_variables",
        "name": "local_variables",
        "params": [
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.local_variables_initializer",
        "name": "local_variables_initializer",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.make_template",
        "name": "make_template",
        "params": [
            "name_",
            "func_",
            "create_scope_now_",
            "unique_name_",
            "custom_getter_",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.map_fn",
        "name": "map_fn",
        "params": [
            "fn",
            "elems",
            "dtype",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "infer_shape",
            "name",
            "fn_output_signature"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.min_max_variable_partitioner",
        "name": "min_max_variable_partitioner",
        "params": [
            "max_partitions",
            "axis",
            "min_slice_size",
            "bytes_per_string_element"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.model_variables",
        "name": "model_variables",
        "params": [
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.moving_average_variables",
        "name": "moving_average_variables",
        "params": [
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.multinomial",
        "name": "multinomial",
        "params": [
            "logits",
            "num_samples",
            "seed",
            "name",
            "output_dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.no_regularizer",
        "name": "no_regularizer",
        "params": [
            "_"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.norm",
        "name": "norm",
        "params": [
            "tensor",
            "ord",
            "axis",
            "keepdims",
            "name",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.ones_like",
        "name": "ones_like",
        "params": [
            "tensor",
            "dtype",
            "name",
            "optimize"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.op_scope",
        "name": "op_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.pad",
        "name": "pad",
        "params": [
            "tensor",
            "paddings",
            "mode",
            "name",
            "constant_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.parse_example",
        "name": "parse_example",
        "params": [
            "serialized",
            "features",
            "name",
            "example_names"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.parse_single_example",
        "name": "parse_single_example",
        "params": [
            "serialized",
            "features",
            "name",
            "example_names"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.placeholder",
        "name": "placeholder",
        "params": [
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.placeholder_with_default",
        "name": "placeholder_with_default",
        "params": [
            "input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.py_func",
        "name": "py_func",
        "params": [
            "func",
            "inp",
            "Tout",
            "stateful",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.quantize_v2",
        "name": "quantize_v2",
        "params": [
            "input",
            "min_range",
            "max_range",
            "T",
            "mode",
            "name",
            "round_mode",
            "narrow_range",
            "axis",
            "ensure_minimum_range"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.random_poisson",
        "name": "random_poisson",
        "params": [
            "lam",
            "shape",
            "dtype",
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_all",
        "name": "reduce_all",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_any",
        "name": "reduce_any",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_join",
        "name": "reduce_join",
        "params": [
            "inputs",
            "axis",
            "keep_dims",
            "separator",
            "name",
            "reduction_indices",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_logsumexp",
        "name": "reduce_logsumexp",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_max",
        "name": "reduce_max",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_mean",
        "name": "reduce_mean",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_min",
        "name": "reduce_min",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_prod",
        "name": "reduce_prod",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reduce_sum",
        "name": "reduce_sum",
        "params": [
            "input_tensor",
            "axis",
            "keepdims",
            "name",
            "reduction_indices",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.report_uninitialized_variables",
        "name": "report_uninitialized_variables",
        "params": [
            "var_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.reset_default_graph",
        "name": "reset_default_graph",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.resource_variables_enabled",
        "name": "resource_variables_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.reverse_sequence",
        "name": "reverse_sequence",
        "params": [
            "input",
            "seq_lengths",
            "seq_axis",
            "batch_axis",
            "name",
            "seq_dim",
            "batch_dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scalar_mul",
        "name": "scalar_mul",
        "params": [
            "scalar",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scan",
        "name": "scan",
        "params": [
            "fn",
            "elems",
            "initializer",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "infer_shape",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_add",
        "name": "scatter_add",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_div",
        "name": "scatter_div",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_max",
        "name": "scatter_max",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_min",
        "name": "scatter_min",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_mul",
        "name": "scatter_mul",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_nd_add",
        "name": "scatter_nd_add",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_nd_sub",
        "name": "scatter_nd_sub",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_nd_update",
        "name": "scatter_nd_update",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_sub",
        "name": "scatter_sub",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.scatter_update",
        "name": "scatter_update",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.serialize_many_sparse",
        "name": "serialize_many_sparse",
        "params": [
            "sp_input",
            "name",
            "out_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.serialize_sparse",
        "name": "serialize_sparse",
        "params": [
            "sp_input",
            "name",
            "out_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.set_random_seed",
        "name": "set_random_seed",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.setdiff1d",
        "name": "setdiff1d",
        "params": [
            "x",
            "y",
            "index_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.shape",
        "name": "shape",
        "params": [
            "input",
            "name",
            "out_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.size",
        "name": "size",
        "params": [
            "input",
            "name",
            "out_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.space_to_batch",
        "name": "space_to_batch",
        "params": [
            "input",
            "paddings",
            "block_size",
            "name",
            "block_shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.space_to_depth",
        "name": "space_to_depth",
        "params": [
            "input",
            "block_size",
            "name",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_add",
        "name": "sparse_add",
        "params": [
            "a",
            "b",
            "threshold",
            "thresh"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_concat",
        "name": "sparse_concat",
        "params": [
            "axis",
            "sp_inputs",
            "name",
            "expand_nonconcat_dim",
            "concat_dim",
            "expand_nonconcat_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_matmul",
        "name": "sparse_matmul",
        "params": [
            "a",
            "b",
            "transpose_a",
            "transpose_b",
            "a_is_sparse",
            "b_is_sparse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_merge",
        "name": "sparse_merge",
        "params": [
            "sp_ids",
            "sp_values",
            "vocab_size",
            "name",
            "already_sorted"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_placeholder",
        "name": "sparse_placeholder",
        "params": [
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_reduce_max",
        "name": "sparse_reduce_max",
        "params": [
            "sp_input",
            "axis",
            "keepdims",
            "reduction_axes",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_reduce_max_sparse",
        "name": "sparse_reduce_max_sparse",
        "params": [
            "sp_input",
            "axis",
            "keepdims",
            "reduction_axes",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_reduce_sum",
        "name": "sparse_reduce_sum",
        "params": [
            "sp_input",
            "axis",
            "keepdims",
            "reduction_axes",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_reduce_sum_sparse",
        "name": "sparse_reduce_sum_sparse",
        "params": [
            "sp_input",
            "axis",
            "keepdims",
            "reduction_axes",
            "keep_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_segment_mean",
        "name": "sparse_segment_mean",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "name",
            "num_segments"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_segment_sqrt_n",
        "name": "sparse_segment_sqrt_n",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "name",
            "num_segments"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_segment_sum",
        "name": "sparse_segment_sum",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "name",
            "num_segments"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_split",
        "name": "sparse_split",
        "params": [
            "keyword_required",
            "sp_input",
            "num_split",
            "axis",
            "name",
            "split_dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.sparse_to_dense",
        "name": "sparse_to_dense",
        "params": [
            "sparse_indices",
            "output_shape",
            "sparse_values",
            "default_value",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.squeeze",
        "name": "squeeze",
        "params": [
            "input",
            "axis",
            "name",
            "squeeze_dims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.string_split",
        "name": "string_split",
        "params": [
            "source",
            "sep",
            "skip_empty",
            "delimiter",
            "result_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.string_to_hash_bucket",
        "name": "string_to_hash_bucket",
        "params": [
            "string_tensor",
            "num_buckets",
            "name",
            "input"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.string_to_number",
        "name": "string_to_number",
        "params": [
            "string_tensor",
            "out_type",
            "name",
            "input"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.substr",
        "name": "substr",
        "params": [
            "input",
            "pos",
            "len",
            "name",
            "unit"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tables_initializer",
        "name": "tables_initializer",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_bfloat16",
        "name": "to_bfloat16",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_complex128",
        "name": "to_complex128",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_complex64",
        "name": "to_complex64",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_double",
        "name": "to_double",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_float",
        "name": "to_float",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_int32",
        "name": "to_int32",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.to_int64",
        "name": "to_int64",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.trainable_variables",
        "name": "trainable_variables",
        "params": [
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.transpose",
        "name": "transpose",
        "params": [
            "a",
            "perm",
            "name",
            "conjugate"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tuple",
        "name": "tuple",
        "params": [
            "tensors",
            "name",
            "control_inputs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.variable_axis_size_partitioner",
        "name": "variable_axis_size_partitioner",
        "params": [
            "max_shard_bytes",
            "axis",
            "bytes_per_string_element",
            "max_shards"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.variable_creator_scope",
        "name": "variable_creator_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.variable_op_scope",
        "name": "variable_op_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.variables_initializer",
        "name": "variables_initializer",
        "params": [
            "var_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.verify_tensor_all_finite",
        "name": "verify_tensor_all_finite",
        "params": [
            "t",
            "msg",
            "name",
            "x",
            "message"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.where",
        "name": "where",
        "params": [
            "condition",
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.while_loop",
        "name": "while_loop",
        "params": [
            "cond",
            "body",
            "loop_vars",
            "shape_invariants",
            "parallel_iterations",
            "back_prop",
            "swap_memory",
            "name",
            "maximum_iterations",
            "return_same_structure"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.wrap_function",
        "name": "wrap_function",
        "params": [
            "fn",
            "signature",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.zeros_like",
        "name": "zeros_like",
        "params": [
            "tensor",
            "dtype",
            "name",
            "optimize"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.ClusterDeviceFilters",
        "name": "ClusterDeviceFilters",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.disable_mlir_bridge",
        "name": "disable_mlir_bridge",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.disable_mlir_graph_optimization",
        "name": "disable_mlir_graph_optimization",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.enable_mlir_bridge",
        "name": "enable_mlir_bridge",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.enable_mlir_graph_optimization",
        "name": "enable_mlir_graph_optimization",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.enable_op_determinism",
        "name": "enable_op_determinism",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.enable_tensor_float_32_execution",
        "name": "enable_tensor_float_32_execution",
        "params": [
            "enabled"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.get_device_details",
        "name": "get_device_details",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.get_device_policy",
        "name": "get_device_policy",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.get_memory_growth",
        "name": "get_memory_growth",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.get_memory_info",
        "name": "get_memory_info",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.get_memory_usage",
        "name": "get_memory_usage",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.get_synchronous_execution",
        "name": "get_synchronous_execution",
        "params": []
    },
    {
        "full_name": "tensorflow.config.experimental.reset_memory_stats",
        "name": "reset_memory_stats",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.set_device_policy",
        "name": "set_device_policy",
        "params": [
            "device_policy"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.set_memory_growth",
        "name": "set_memory_growth",
        "params": [
            "device",
            "enable"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.set_synchronous_execution",
        "name": "set_synchronous_execution",
        "params": [
            "enable"
        ]
    },
    {
        "full_name": "tensorflow.config.experimental.tensor_float_32_execution_enabled",
        "name": "tensor_float_32_execution_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.config.optimizer.get_experimental_options",
        "name": "get_experimental_options",
        "params": []
    },
    {
        "full_name": "tensorflow.config.optimizer.get_jit",
        "name": "get_jit",
        "params": []
    },
    {
        "full_name": "tensorflow.config.optimizer.set_experimental_options",
        "name": "set_experimental_options",
        "params": [
            "options"
        ]
    },
    {
        "full_name": "tensorflow.config.optimizer.set_jit",
        "name": "set_jit",
        "params": []
    },
    {
        "full_name": "tensorflow.config.threading.get_inter_op_parallelism_threads",
        "name": "get_inter_op_parallelism_threads",
        "params": []
    },
    {
        "full_name": "tensorflow.config.threading.get_intra_op_parallelism_threads",
        "name": "get_intra_op_parallelism_threads",
        "params": []
    },
    {
        "full_name": "tensorflow.config.threading.set_inter_op_parallelism_threads",
        "name": "set_inter_op_parallelism_threads",
        "params": [
            "num_threads"
        ]
    },
    {
        "full_name": "tensorflow.config.threading.set_intra_op_parallelism_threads",
        "name": "set_intra_op_parallelism_threads",
        "params": [
            "num_threads"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.AutoShardPolicy",
        "name": "AutoShardPolicy",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.AutotuneAlgorithm",
        "name": "AutotuneAlgorithm",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.AutotuneOptions",
        "name": "AutotuneOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.CheckpointInputPipelineHook",
        "name": "CheckpointInputPipelineHook",
        "params": [
            "estimator",
            "external_state_policy"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.CsvDataset",
        "name": "CsvDataset",
        "params": [
            "filenames",
            "record_defaults",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "exclude_cols"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.DatasetInitializer",
        "name": "DatasetInitializer",
        "params": [
            "dataset"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.DistributeOptions",
        "name": "DistributeOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.ExternalStatePolicy",
        "name": "ExternalStatePolicy",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.OptimizationOptions",
        "name": "OptimizationOptions",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.RandomDataset",
        "name": "RandomDataset",
        "params": [
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.Reducer",
        "name": "Reducer",
        "params": [
            "init_func",
            "reduce_func",
            "finalize_func"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.SqlDataset",
        "name": "SqlDataset",
        "params": [
            "driver_name",
            "data_source_name",
            "query",
            "output_types"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.TFRecordWriter",
        "name": "TFRecordWriter",
        "params": [
            "filename",
            "compression_type"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.Counter",
        "name": "Counter",
        "params": [
            "start",
            "step",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.assert_cardinality",
        "name": "assert_cardinality",
        "params": [
            "expected_cardinality"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.bucket_by_sequence_length",
        "name": "bucket_by_sequence_length",
        "params": [
            "element_length_func",
            "bucket_boundaries",
            "bucket_batch_sizes",
            "padded_shapes",
            "padding_values",
            "pad_to_bucket_boundary",
            "no_padding",
            "drop_remainder"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.cardinality",
        "name": "cardinality",
        "params": [
            "dataset"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.choose_from_datasets",
        "name": "choose_from_datasets",
        "params": [
            "datasets",
            "choice_dataset",
            "stop_on_empty_dataset"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.copy_to_device",
        "name": "copy_to_device",
        "params": [
            "target_device",
            "source_device"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.dense_to_ragged_batch",
        "name": "dense_to_ragged_batch",
        "params": [
            "batch_size",
            "drop_remainder",
            "row_splits_dtype"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.dense_to_sparse_batch",
        "name": "dense_to_sparse_batch",
        "params": [
            "batch_size",
            "row_shape"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.enable_debug_mode",
        "name": "enable_debug_mode",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.enumerate_dataset",
        "name": "enumerate_dataset",
        "params": [
            "start"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.from_variant",
        "name": "from_variant",
        "params": [
            "variant",
            "structure"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.get_next_as_optional",
        "name": "get_next_as_optional",
        "params": [
            "iterator"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.get_single_element",
        "name": "get_single_element",
        "params": [
            "dataset"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.get_structure",
        "name": "get_structure",
        "params": [
            "dataset_or_iterator"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.group_by_reducer",
        "name": "group_by_reducer",
        "params": [
            "key_func",
            "reducer"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.group_by_window",
        "name": "group_by_window",
        "params": [
            "key_func",
            "reduce_func",
            "window_size",
            "window_size_func"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.ignore_errors",
        "name": "ignore_errors",
        "params": [
            "log_warning"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.index_table_from_dataset",
        "name": "index_table_from_dataset",
        "params": [
            "dataset",
            "num_oov_buckets",
            "vocab_size",
            "default_value",
            "hasher_spec",
            "key_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.load",
        "name": "load",
        "params": [
            "path",
            "element_spec",
            "compression",
            "reader_func"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.make_batched_features_dataset",
        "name": "make_batched_features_dataset",
        "params": [
            "file_pattern",
            "batch_size",
            "features",
            "reader",
            "label_key",
            "reader_args",
            "num_epochs",
            "shuffle",
            "shuffle_buffer_size",
            "shuffle_seed",
            "prefetch_buffer_size",
            "reader_num_threads",
            "parser_num_threads",
            "sloppy_ordering",
            "drop_final_batch"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.make_csv_dataset",
        "name": "make_csv_dataset",
        "params": [
            "file_pattern",
            "batch_size",
            "column_names",
            "column_defaults",
            "label_name",
            "select_columns",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "header",
            "num_epochs",
            "shuffle",
            "shuffle_buffer_size",
            "shuffle_seed",
            "prefetch_buffer_size",
            "num_parallel_reads",
            "sloppy",
            "num_rows_for_inference",
            "compression_type",
            "ignore_errors"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.make_saveable_from_iterator",
        "name": "make_saveable_from_iterator",
        "params": [
            "iterator",
            "external_state_policy"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.map_and_batch",
        "name": "map_and_batch",
        "params": [
            "map_func",
            "batch_size",
            "num_parallel_batches",
            "drop_remainder",
            "num_parallel_calls"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.parallel_interleave",
        "name": "parallel_interleave",
        "params": [
            "map_func",
            "cycle_length",
            "block_length",
            "sloppy",
            "buffer_output_elements",
            "prefetch_input_elements"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.parse_example_dataset",
        "name": "parse_example_dataset",
        "params": [
            "features",
            "num_parallel_calls",
            "deterministic"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.prefetch_to_device",
        "name": "prefetch_to_device",
        "params": [
            "device",
            "buffer_size"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.rejection_resample",
        "name": "rejection_resample",
        "params": [
            "class_func",
            "target_dist",
            "initial_dist",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.sample_from_datasets",
        "name": "sample_from_datasets",
        "params": [
            "datasets",
            "weights",
            "seed",
            "stop_on_empty_dataset"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.save",
        "name": "save",
        "params": [
            "dataset",
            "path",
            "compression",
            "shard_func",
            "checkpoint_args"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.scan",
        "name": "scan",
        "params": [
            "initial_state",
            "scan_func"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.shuffle_and_repeat",
        "name": "shuffle_and_repeat",
        "params": [
            "buffer_size",
            "count",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.snapshot",
        "name": "snapshot",
        "params": [
            "path",
            "compression",
            "reader_func",
            "shard_func"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.table_from_dataset",
        "name": "table_from_dataset",
        "params": [
            "dataset",
            "num_oov_buckets",
            "vocab_size",
            "default_value",
            "hasher_spec",
            "key_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.take_while",
        "name": "take_while",
        "params": [
            "predicate"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.to_variant",
        "name": "to_variant",
        "params": [
            "dataset"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.unbatch",
        "name": "unbatch",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.unique",
        "name": "unique",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.experimental.disable_dump_debug_info",
        "name": "disable_dump_debug_info",
        "params": []
    },
    {
        "full_name": "tensorflow.debugging.experimental.enable_dump_debug_info",
        "name": "enable_dump_debug_info",
        "params": [
            "dump_root",
            "tensor_debug_mode",
            "circular_buffer_size",
            "op_regex",
            "tensor_dtypes"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.ClusterResolver",
        "name": "ClusterResolver",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.GCEClusterResolver",
        "name": "GCEClusterResolver",
        "params": [
            "project",
            "zone",
            "instance_group",
            "port",
            "task_type",
            "task_id",
            "rpc_layer",
            "credentials",
            "service"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.KubernetesClusterResolver",
        "name": "KubernetesClusterResolver",
        "params": [
            "job_to_label_mapping",
            "tf_server_port",
            "rpc_layer",
            "override_client"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.SimpleClusterResolver",
        "name": "SimpleClusterResolver",
        "params": [
            "cluster_spec",
            "master",
            "task_type",
            "task_id",
            "environment",
            "num_accelerators",
            "rpc_layer"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.SlurmClusterResolver",
        "name": "SlurmClusterResolver",
        "params": [
            "jobs",
            "port_base",
            "gpus_per_node",
            "gpus_per_task",
            "tasks_per_node",
            "auto_set_gpu",
            "rpc_layer"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.TFConfigClusterResolver",
        "name": "TFConfigClusterResolver",
        "params": [
            "task_type",
            "task_id",
            "rpc_layer",
            "environment"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.TPUClusterResolver",
        "name": "TPUClusterResolver",
        "params": [
            "tpu",
            "zone",
            "project",
            "job_name",
            "coordinator_name",
            "coordinator_address",
            "credentials",
            "service",
            "discovery_url"
        ]
    },
    {
        "full_name": "tensorflow.distribute.cluster_resolver.UnionResolver",
        "name": "UnionResolver",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.coordinator.ClusterCoordinator",
        "name": "ClusterCoordinator",
        "params": [
            "strategy"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.coordinator.PerWorkerValues",
        "name": "PerWorkerValues",
        "params": [
            "values"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.coordinator.RemoteValue",
        "name": "RemoteValue",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.experimental.CentralStorageStrategy",
        "name": "CentralStorageStrategy",
        "params": [
            "compute_devices",
            "parameter_device"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.CommunicationImplementation",
        "name": "CommunicationImplementation",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.experimental.CollectiveHints",
        "name": "CollectiveHints",
        "params": [
            "bytes_per_pack",
            "timeout_seconds"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.CommunicationOptions",
        "name": "CommunicationOptions",
        "params": [
            "bytes_per_pack",
            "timeout_seconds",
            "implementation"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.MultiWorkerMirroredStrategy",
        "name": "MultiWorkerMirroredStrategy",
        "params": [
            "communication",
            "cluster_resolver"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.TPUStrategy",
        "name": "TPUStrategy",
        "params": [
            "tpu_cluster_resolver",
            "device_assignment"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.ValueContext",
        "name": "ValueContext",
        "params": [
            "replica_id_in_sync_group",
            "num_replicas_in_sync"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.InMemoryEvaluatorHook",
        "name": "InMemoryEvaluatorHook",
        "params": [
            "estimator",
            "input_fn",
            "steps",
            "hooks",
            "name",
            "every_n_iter"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.LinearSDCA",
        "name": "LinearSDCA",
        "params": [
            "example_id_column",
            "num_loss_partitions",
            "num_table_shards",
            "symmetric_l1_regularization",
            "symmetric_l2_regularization",
            "adaptive"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.RNNClassifier",
        "name": "RNNClassifier",
        "params": [
            "sequence_feature_columns",
            "context_feature_columns",
            "units",
            "cell_type",
            "rnn_cell_fn",
            "return_sequences",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "loss_reduction",
            "sequence_mask",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.RNNEstimator",
        "name": "RNNEstimator",
        "params": [
            "head",
            "sequence_feature_columns",
            "context_feature_columns",
            "units",
            "cell_type",
            "rnn_cell_fn",
            "return_sequences",
            "model_dir",
            "optimizer",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.build_raw_supervised_input_receiver_fn",
        "name": "build_raw_supervised_input_receiver_fn",
        "params": [
            "features",
            "labels",
            "default_batch_size"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.call_logit_fn",
        "name": "call_logit_fn",
        "params": [
            "logit_fn",
            "features",
            "mode",
            "params",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.make_early_stopping_hook",
        "name": "make_early_stopping_hook",
        "params": [
            "estimator",
            "should_stop_fn",
            "run_every_secs",
            "run_every_steps"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.make_stop_at_checkpoint_step_hook",
        "name": "make_stop_at_checkpoint_step_hook",
        "params": [
            "estimator",
            "last_step",
            "wait_after_file_check_secs"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.stop_if_higher_hook",
        "name": "stop_if_higher_hook",
        "params": [
            "estimator",
            "metric_name",
            "threshold",
            "eval_dir",
            "min_steps",
            "run_every_secs",
            "run_every_steps"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.stop_if_lower_hook",
        "name": "stop_if_lower_hook",
        "params": [
            "estimator",
            "metric_name",
            "threshold",
            "eval_dir",
            "min_steps",
            "run_every_secs",
            "run_every_steps"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.stop_if_no_decrease_hook",
        "name": "stop_if_no_decrease_hook",
        "params": [
            "estimator",
            "metric_name",
            "max_steps_without_decrease",
            "eval_dir",
            "min_steps",
            "run_every_secs",
            "run_every_steps"
        ]
    },
    {
        "full_name": "tensorflow.estimator.experimental.stop_if_no_increase_hook",
        "name": "stop_if_no_increase_hook",
        "params": [
            "estimator",
            "metric_name",
            "max_steps_without_increase",
            "eval_dir",
            "min_steps",
            "run_every_secs",
            "run_every_steps"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.ClassificationOutput",
        "name": "ClassificationOutput",
        "params": [
            "scores",
            "classes"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.EvalOutput",
        "name": "EvalOutput",
        "params": [
            "loss",
            "predictions",
            "metrics"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.ExportOutput",
        "name": "ExportOutput",
        "params": []
    },
    {
        "full_name": "tensorflow.estimator.export.PredictOutput",
        "name": "PredictOutput",
        "params": [
            "outputs"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.RegressionOutput",
        "name": "RegressionOutput",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.ServingInputReceiver",
        "name": "ServingInputReceiver",
        "params": [
            "features",
            "receiver_tensors",
            "receiver_tensors_alternatives"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.TensorServingInputReceiver",
        "name": "TensorServingInputReceiver",
        "params": [
            "features",
            "receiver_tensors",
            "receiver_tensors_alternatives"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.build_parsing_serving_input_receiver_fn",
        "name": "build_parsing_serving_input_receiver_fn",
        "params": [
            "feature_spec",
            "default_batch_size"
        ]
    },
    {
        "full_name": "tensorflow.estimator.export.build_raw_serving_input_receiver_fn",
        "name": "build_raw_serving_input_receiver_fn",
        "params": [
            "features",
            "default_batch_size"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dlpack.from_dlpack",
        "name": "from_dlpack",
        "params": [
            "dlcapsule"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dlpack.to_dlpack",
        "name": "to_dlpack",
        "params": [
            "tf_tensor"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dtensor.DTensorCheckpoint",
        "name": "DTensorCheckpoint",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.DVariable",
        "name": "DVariable",
        "params": [
            "initial_value",
            "*args",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dtensor.Layout",
        "name": "Layout",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.Mesh",
        "name": "Mesh",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.call_with_layout",
        "name": "call_with_layout",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.check_layout",
        "name": "check_layout",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.client_id",
        "name": "client_id",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.copy_to_mesh",
        "name": "copy_to_mesh",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.create_distributed_mesh",
        "name": "create_distributed_mesh",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.create_mesh",
        "name": "create_mesh",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.device_name",
        "name": "device_name",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.enable_save_as_bf16",
        "name": "enable_save_as_bf16",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.fetch_layout",
        "name": "fetch_layout",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.full_job_name",
        "name": "full_job_name",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.heartbeat_enabled",
        "name": "heartbeat_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.initialize_multi_client",
        "name": "initialize_multi_client",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.initialize_tpu_system",
        "name": "initialize_tpu_system",
        "params": [
            "enable_coordination_service"
        ]
    },
    {
        "full_name": "tensorflow.experimental.dtensor.job_name",
        "name": "job_name",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.jobs",
        "name": "jobs",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.local_devices",
        "name": "local_devices",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.name_based_restore",
        "name": "name_based_restore",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.name_based_save",
        "name": "name_based_save",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.num_clients",
        "name": "num_clients",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.num_global_devices",
        "name": "num_global_devices",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.num_local_devices",
        "name": "num_local_devices",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.pack",
        "name": "pack",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.relayout",
        "name": "relayout",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.run_on",
        "name": "run_on",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.sharded_save",
        "name": "sharded_save",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.shutdown_tpu_system",
        "name": "shutdown_tpu_system",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.dtensor.unpack",
        "name": "unpack",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.numpy.bool_",
        "name": "bool_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.complex128",
        "name": "complex128",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.complex64",
        "name": "complex64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.float16",
        "name": "float16",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.float32",
        "name": "float32",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.float64",
        "name": "float64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.iinfo",
        "name": "iinfo",
        "params": [
            "int_type"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.inexact",
        "name": "inexact",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.numpy.int16",
        "name": "int16",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.int32",
        "name": "int32",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.int64",
        "name": "int64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.int8",
        "name": "int8",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.object_",
        "name": "object_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.string_",
        "name": "string_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.uint16",
        "name": "uint16",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.uint32",
        "name": "uint32",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.uint64",
        "name": "uint64",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.uint8",
        "name": "uint8",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.unicode_",
        "name": "unicode_",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.abs",
        "name": "abs",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.absolute",
        "name": "absolute",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.add",
        "name": "add",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.all",
        "name": "all",
        "params": [
            "a",
            "axis",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.allclose",
        "name": "allclose",
        "params": [
            "a",
            "b",
            "rtol",
            "atol",
            "equal_nan"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.amax",
        "name": "amax",
        "params": [
            "a",
            "axis",
            "out",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.amin",
        "name": "amin",
        "params": [
            "a",
            "axis",
            "out",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.angle",
        "name": "angle",
        "params": [
            "z",
            "deg"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.any",
        "name": "any",
        "params": [
            "a",
            "axis",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.append",
        "name": "append",
        "params": [
            "arr",
            "values",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arange",
        "name": "arange",
        "params": [
            "start",
            "stop",
            "step",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arccos",
        "name": "arccos",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arccosh",
        "name": "arccosh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arcsin",
        "name": "arcsin",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arcsinh",
        "name": "arcsinh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arctan",
        "name": "arctan",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arctan2",
        "name": "arctan2",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.arctanh",
        "name": "arctanh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.argmax",
        "name": "argmax",
        "params": [
            "a",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.argmin",
        "name": "argmin",
        "params": [
            "a",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.argsort",
        "name": "argsort",
        "params": [
            "a",
            "axis",
            "kind",
            "order"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.around",
        "name": "around",
        "params": [
            "a",
            "decimals"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.array",
        "name": "array",
        "params": [
            "val",
            "dtype",
            "copy",
            "ndmin"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.array_equal",
        "name": "array_equal",
        "params": [
            "a1",
            "a2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.asanyarray",
        "name": "asanyarray",
        "params": [
            "a",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.asarray",
        "name": "asarray",
        "params": [
            "a",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ascontiguousarray",
        "name": "ascontiguousarray",
        "params": [
            "a",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.atleast_1d",
        "name": "atleast_1d",
        "params": [
            "*arys"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.atleast_2d",
        "name": "atleast_2d",
        "params": [
            "*arys"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.atleast_3d",
        "name": "atleast_3d",
        "params": [
            "*arys"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.average",
        "name": "average",
        "params": [
            "a",
            "axis",
            "weights",
            "returned"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.bitwise_and",
        "name": "bitwise_and",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.bitwise_not",
        "name": "bitwise_not",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.bitwise_or",
        "name": "bitwise_or",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.bitwise_xor",
        "name": "bitwise_xor",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.broadcast_arrays",
        "name": "broadcast_arrays",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.broadcast_to",
        "name": "broadcast_to",
        "params": [
            "array",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.cbrt",
        "name": "cbrt",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ceil",
        "name": "ceil",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.clip",
        "name": "clip",
        "params": [
            "a",
            "a_min",
            "a_max"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.compress",
        "name": "compress",
        "params": [
            "condition",
            "a",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.concatenate",
        "name": "concatenate",
        "params": [
            "arys",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.conj",
        "name": "conj",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.conjugate",
        "name": "conjugate",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.copy",
        "name": "copy",
        "params": [
            "a"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.cos",
        "name": "cos",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.cosh",
        "name": "cosh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.count_nonzero",
        "name": "count_nonzero",
        "params": [
            "a",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.cross",
        "name": "cross",
        "params": [
            "a",
            "b",
            "axisa",
            "axisb",
            "axisc",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.cumprod",
        "name": "cumprod",
        "params": [
            "a",
            "axis",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.cumsum",
        "name": "cumsum",
        "params": [
            "a",
            "axis",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.deg2rad",
        "name": "deg2rad",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.diag",
        "name": "diag",
        "params": [
            "v",
            "k"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.diag_indices",
        "name": "diag_indices",
        "params": [
            "n",
            "ndim"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.diagflat",
        "name": "diagflat",
        "params": [
            "v",
            "k"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.diagonal",
        "name": "diagonal",
        "params": [
            "a",
            "offset",
            "axis1",
            "axis2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.diff",
        "name": "diff",
        "params": [
            "a",
            "n",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.divide",
        "name": "divide",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.divmod",
        "name": "divmod",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.dot",
        "name": "dot",
        "params": [
            "a",
            "b"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.dsplit",
        "name": "dsplit",
        "params": [
            "ary",
            "indices_or_sections"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.dstack",
        "name": "dstack",
        "params": [
            "tup"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.einsum",
        "name": "einsum",
        "params": [
            "subscripts",
            "*operands",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.empty",
        "name": "empty",
        "params": [
            "shape",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.empty_like",
        "name": "empty_like",
        "params": [
            "a",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.equal",
        "name": "equal",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.exp",
        "name": "exp",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.exp2",
        "name": "exp2",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.expand_dims",
        "name": "expand_dims",
        "params": [
            "a",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.experimental_enable_numpy_behavior",
        "name": "experimental_enable_numpy_behavior",
        "params": [
            "prefer_float32"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.expm1",
        "name": "expm1",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.eye",
        "name": "eye",
        "params": [
            "N",
            "M",
            "k",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.fabs",
        "name": "fabs",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.finfo",
        "name": "finfo",
        "params": [
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.fix",
        "name": "fix",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.flip",
        "name": "flip",
        "params": [
            "m",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.fliplr",
        "name": "fliplr",
        "params": [
            "m"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.flipud",
        "name": "flipud",
        "params": [
            "m"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.float_power",
        "name": "float_power",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.floor",
        "name": "floor",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.floor_divide",
        "name": "floor_divide",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.full",
        "name": "full",
        "params": [
            "shape",
            "fill_value",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.full_like",
        "name": "full_like",
        "params": [
            "a",
            "fill_value",
            "dtype",
            "order",
            "subok",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.gcd",
        "name": "gcd",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.geomspace",
        "name": "geomspace",
        "params": [
            "start",
            "stop",
            "num",
            "endpoint",
            "dtype",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.greater",
        "name": "greater",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.greater_equal",
        "name": "greater_equal",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.heaviside",
        "name": "heaviside",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.hsplit",
        "name": "hsplit",
        "params": [
            "ary",
            "indices_or_sections"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.hstack",
        "name": "hstack",
        "params": [
            "tup"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.hypot",
        "name": "hypot",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.identity",
        "name": "identity",
        "params": [
            "n",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.imag",
        "name": "imag",
        "params": [
            "val"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.inner",
        "name": "inner",
        "params": [
            "a",
            "b"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isclose",
        "name": "isclose",
        "params": [
            "a",
            "b",
            "rtol",
            "atol",
            "equal_nan"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.iscomplex",
        "name": "iscomplex",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.iscomplexobj",
        "name": "iscomplexobj",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isfinite",
        "name": "isfinite",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isinf",
        "name": "isinf",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isnan",
        "name": "isnan",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isneginf",
        "name": "isneginf",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isposinf",
        "name": "isposinf",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isreal",
        "name": "isreal",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isrealobj",
        "name": "isrealobj",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.isscalar",
        "name": "isscalar",
        "params": [
            "num"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.issubdtype",
        "name": "issubdtype",
        "params": [
            "arg1",
            "arg2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ix_",
        "name": "ix_",
        "params": [
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.kron",
        "name": "kron",
        "params": [
            "a",
            "b"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.lcm",
        "name": "lcm",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.less",
        "name": "less",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.less_equal",
        "name": "less_equal",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.linspace",
        "name": "linspace",
        "params": [
            "start",
            "stop",
            "num",
            "endpoint",
            "retstep",
            "dtype",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.log",
        "name": "log",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.log10",
        "name": "log10",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.log1p",
        "name": "log1p",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.log2",
        "name": "log2",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logaddexp",
        "name": "logaddexp",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logaddexp2",
        "name": "logaddexp2",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logical_and",
        "name": "logical_and",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logical_not",
        "name": "logical_not",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logical_or",
        "name": "logical_or",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logical_xor",
        "name": "logical_xor",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.logspace",
        "name": "logspace",
        "params": [
            "start",
            "stop",
            "num",
            "endpoint",
            "base",
            "dtype",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.matmul",
        "name": "matmul",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.max",
        "name": "max",
        "params": [
            "a",
            "axis",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.maximum",
        "name": "maximum",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.mean",
        "name": "mean",
        "params": [
            "a",
            "axis",
            "dtype",
            "out",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.meshgrid",
        "name": "meshgrid",
        "params": [
            "*xi",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.min",
        "name": "min",
        "params": [
            "a",
            "axis",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.minimum",
        "name": "minimum",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.mod",
        "name": "mod",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.moveaxis",
        "name": "moveaxis",
        "params": [
            "a",
            "source",
            "destination"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.multiply",
        "name": "multiply",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.nanmean",
        "name": "nanmean",
        "params": [
            "a",
            "axis",
            "dtype",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.nanprod",
        "name": "nanprod",
        "params": [
            "a",
            "axis",
            "dtype",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.nansum",
        "name": "nansum",
        "params": [
            "a",
            "axis",
            "dtype",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ndim",
        "name": "ndim",
        "params": [
            "a"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.negative",
        "name": "negative",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.nextafter",
        "name": "nextafter",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.nonzero",
        "name": "nonzero",
        "params": [
            "a"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.not_equal",
        "name": "not_equal",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ones",
        "name": "ones",
        "params": [
            "shape",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ones_like",
        "name": "ones_like",
        "params": [
            "a",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.outer",
        "name": "outer",
        "params": [
            "a",
            "b"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.pad",
        "name": "pad",
        "params": [
            "array",
            "pad_width",
            "mode",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.polyval",
        "name": "polyval",
        "params": [
            "p",
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.positive",
        "name": "positive",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.power",
        "name": "power",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.prod",
        "name": "prod",
        "params": [
            "a",
            "axis",
            "dtype",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.promote_types",
        "name": "promote_types",
        "params": [
            "type1",
            "type2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ptp",
        "name": "ptp",
        "params": [
            "a",
            "axis",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.rad2deg",
        "name": "rad2deg",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.ravel",
        "name": "ravel",
        "params": [
            "a"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.real",
        "name": "real",
        "params": [
            "val"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.reciprocal",
        "name": "reciprocal",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.remainder",
        "name": "remainder",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.repeat",
        "name": "repeat",
        "params": [
            "a",
            "repeats",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.reshape",
        "name": "reshape",
        "params": [
            "a",
            "newshape",
            "order"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.result_type",
        "name": "result_type",
        "params": [
            "*arrays_and_dtypes"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.roll",
        "name": "roll",
        "params": [
            "a",
            "shift",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.rot90",
        "name": "rot90",
        "params": [
            "m",
            "k",
            "axes"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.round",
        "name": "round",
        "params": [
            "a",
            "decimals"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.select",
        "name": "select",
        "params": [
            "condlist",
            "choicelist",
            "default"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.shape",
        "name": "shape",
        "params": [
            "a"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sign",
        "name": "sign",
        "params": [
            "x",
            "out",
            "where",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.signbit",
        "name": "signbit",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sin",
        "name": "sin",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sinc",
        "name": "sinc",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sinh",
        "name": "sinh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.size",
        "name": "size",
        "params": [
            "x",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sort",
        "name": "sort",
        "params": [
            "a",
            "axis",
            "kind",
            "order"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.split",
        "name": "split",
        "params": [
            "ary",
            "indices_or_sections",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sqrt",
        "name": "sqrt",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.square",
        "name": "square",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.squeeze",
        "name": "squeeze",
        "params": [
            "a",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.stack",
        "name": "stack",
        "params": [
            "arrays",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.std",
        "name": "std",
        "params": [
            "a",
            "axis",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.subtract",
        "name": "subtract",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.sum",
        "name": "sum",
        "params": [
            "a",
            "axis",
            "dtype",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.swapaxes",
        "name": "swapaxes",
        "params": [
            "a",
            "axis1",
            "axis2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.take",
        "name": "take",
        "params": [
            "a",
            "indices",
            "axis",
            "out",
            "mode"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.take_along_axis",
        "name": "take_along_axis",
        "params": [
            "arr",
            "indices",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.tan",
        "name": "tan",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.tanh",
        "name": "tanh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.tensordot",
        "name": "tensordot",
        "params": [
            "a",
            "b",
            "axes"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.tile",
        "name": "tile",
        "params": [
            "a",
            "reps"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.trace",
        "name": "trace",
        "params": [
            "a",
            "offset",
            "axis1",
            "axis2",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.transpose",
        "name": "transpose",
        "params": [
            "a",
            "axes"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.tri",
        "name": "tri",
        "params": [
            "N",
            "M",
            "k",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.tril",
        "name": "tril",
        "params": [
            "m",
            "k"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.triu",
        "name": "triu",
        "params": [
            "m",
            "k"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.true_divide",
        "name": "true_divide",
        "params": [
            "x1",
            "x2"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.vander",
        "name": "vander",
        "params": [
            "x",
            "N",
            "increasing"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.var",
        "name": "var",
        "params": [
            "a",
            "axis",
            "dtype",
            "out",
            "ddof",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.vdot",
        "name": "vdot",
        "params": [
            "a",
            "b"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.vsplit",
        "name": "vsplit",
        "params": [
            "ary",
            "indices_or_sections"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.vstack",
        "name": "vstack",
        "params": [
            "tup"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.where",
        "name": "where",
        "params": [
            "condition",
            "x",
            "y"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.zeros",
        "name": "zeros",
        "params": [
            "shape",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.zeros_like",
        "name": "zeros_like",
        "params": [
            "a",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.tensorrt.ConversionParams",
        "name": "ConversionParams",
        "params": [
            "max_workspace_size_bytes",
            "precision_mode",
            "minimum_segment_size",
            "maximum_cached_engines",
            "use_calibration",
            "allow_build_at_runtime"
        ]
    },
    {
        "full_name": "tensorflow.experimental.tensorrt.Converter",
        "name": "Converter",
        "params": [
            "input_saved_model_dir",
            "input_saved_model_tags",
            "input_saved_model_signature_key",
            "use_dynamic_shape",
            "dynamic_shape_profile_strategy",
            "max_workspace_size_bytes",
            "precision_mode",
            "minimum_segment_size",
            "maximum_cached_engines",
            "use_calibration",
            "allow_build_at_runtime",
            "conversion_params"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.GFile",
        "name": "GFile",
        "params": [
            "name",
            "mode"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.copy",
        "name": "copy",
        "params": [
            "src",
            "dst",
            "overwrite"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.exists",
        "name": "exists",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.get_registered_schemes",
        "name": "get_registered_schemes",
        "params": []
    },
    {
        "full_name": "tensorflow.io.gfile.glob",
        "name": "glob",
        "params": [
            "pattern"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.isdir",
        "name": "isdir",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.join",
        "name": "join",
        "params": [
            "path",
            "*paths"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.listdir",
        "name": "listdir",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.makedirs",
        "name": "makedirs",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.mkdir",
        "name": "mkdir",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.remove",
        "name": "remove",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.rename",
        "name": "rename",
        "params": [
            "src",
            "dst",
            "overwrite"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.rmtree",
        "name": "rmtree",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.stat",
        "name": "stat",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.io.gfile.walk",
        "name": "walk",
        "params": [
            "top",
            "topdown",
            "onerror"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.deserialize",
        "name": "deserialize",
        "params": [
            "name",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.elu",
        "name": "elu",
        "params": [
            "x",
            "alpha"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.exponential",
        "name": "exponential",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.gelu",
        "name": "gelu",
        "params": [
            "x",
            "approximate"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.hard_sigmoid",
        "name": "hard_sigmoid",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.linear",
        "name": "linear",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.relu",
        "name": "relu",
        "params": [
            "x",
            "alpha",
            "max_value",
            "threshold"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.selu",
        "name": "selu",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.serialize",
        "name": "serialize",
        "params": [
            "activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.sigmoid",
        "name": "sigmoid",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.softmax",
        "name": "softmax",
        "params": [
            "x",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.softplus",
        "name": "softplus",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.softsign",
        "name": "softsign",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.swish",
        "name": "swish",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.activations.tanh",
        "name": "tanh",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.densenet.DenseNet121",
        "name": "DenseNet121",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.densenet.DenseNet169",
        "name": "DenseNet169",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.densenet.DenseNet201",
        "name": "DenseNet201",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB0",
        "name": "EfficientNetB0",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB1",
        "name": "EfficientNetB1",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB2",
        "name": "EfficientNetB2",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB3",
        "name": "EfficientNetB3",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB4",
        "name": "EfficientNetB4",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB5",
        "name": "EfficientNetB5",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB6",
        "name": "EfficientNetB6",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.EfficientNetB7",
        "name": "EfficientNetB7",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2B0",
        "name": "EfficientNetV2B0",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2B1",
        "name": "EfficientNetV2B1",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2B2",
        "name": "EfficientNetV2B2",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2B3",
        "name": "EfficientNetV2B3",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2L",
        "name": "EfficientNetV2L",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2M",
        "name": "EfficientNetV2M",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.EfficientNetV2S",
        "name": "EfficientNetV2S",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.inception_resnet_v2.InceptionResNetV2",
        "name": "InceptionResNetV2",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.inception_v3.InceptionV3",
        "name": "InceptionV3",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet.MobileNet",
        "name": "MobileNet",
        "params": [
            "input_shape",
            "alpha",
            "depth_multiplier",
            "dropout",
            "include_top",
            "weights",
            "input_tensor",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet_v2.MobileNetV2",
        "name": "MobileNetV2",
        "params": [
            "input_shape",
            "alpha",
            "include_top",
            "weights",
            "input_tensor",
            "pooling",
            "classes",
            "classifier_activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.MobileNetV3Large",
        "name": "MobileNetV3Large",
        "params": [
            "input_shape",
            "alpha",
            "minimalistic",
            "include_top",
            "weights",
            "input_tensor",
            "classes",
            "pooling",
            "dropout_rate",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.MobileNetV3Small",
        "name": "MobileNetV3Small",
        "params": [
            "input_shape",
            "alpha",
            "minimalistic",
            "include_top",
            "weights",
            "input_tensor",
            "classes",
            "pooling",
            "dropout_rate",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.nasnet.NASNetLarge",
        "name": "NASNetLarge",
        "params": [
            "input_shape",
            "include_top",
            "weights",
            "input_tensor",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.nasnet.NASNetMobile",
        "name": "NASNetMobile",
        "params": [
            "input_shape",
            "include_top",
            "weights",
            "input_tensor",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX002",
        "name": "RegNetX002",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX004",
        "name": "RegNetX004",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX006",
        "name": "RegNetX006",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX008",
        "name": "RegNetX008",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX016",
        "name": "RegNetX016",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX032",
        "name": "RegNetX032",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX040",
        "name": "RegNetX040",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX064",
        "name": "RegNetX064",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX080",
        "name": "RegNetX080",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX120",
        "name": "RegNetX120",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX160",
        "name": "RegNetX160",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetX320",
        "name": "RegNetX320",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY002",
        "name": "RegNetY002",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY004",
        "name": "RegNetY004",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY006",
        "name": "RegNetY006",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY008",
        "name": "RegNetY008",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY016",
        "name": "RegNetY016",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY032",
        "name": "RegNetY032",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY040",
        "name": "RegNetY040",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY064",
        "name": "RegNetY064",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY080",
        "name": "RegNetY080",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY120",
        "name": "RegNetY120",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY160",
        "name": "RegNetY160",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.RegNetY320",
        "name": "RegNetY320",
        "params": [
            "model_name",
            "include_top",
            "include_preprocessing",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet.ResNet101",
        "name": "ResNet101",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_v2.ResNet101V2",
        "name": "ResNet101V2",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet.ResNet152",
        "name": "ResNet152",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_v2.ResNet152V2",
        "name": "ResNet152V2",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet50.ResNet50",
        "name": "ResNet50",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_v2.ResNet50V2",
        "name": "ResNet50V2",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS101",
        "name": "ResNetRS101",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS152",
        "name": "ResNetRS152",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS200",
        "name": "ResNetRS200",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS270",
        "name": "ResNetRS270",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS350",
        "name": "ResNetRS350",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS420",
        "name": "ResNetRS420",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.ResNetRS50",
        "name": "ResNetRS50",
        "params": [
            "include_top",
            "weights",
            "classes",
            "input_shape",
            "input_tensor",
            "pooling",
            "classifier_activation",
            "include_preprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.vgg16.VGG16",
        "name": "VGG16",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.vgg19.VGG19",
        "name": "VGG19",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.xception.Xception",
        "name": "Xception",
        "params": [
            "include_top",
            "weights",
            "input_tensor",
            "input_shape",
            "pooling",
            "classes",
            "classifier_activation"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.clear_session",
        "name": "clear_session",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.epsilon",
        "name": "epsilon",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.floatx",
        "name": "floatx",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.get_uid",
        "name": "get_uid",
        "params": [
            "prefix"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.image_data_format",
        "name": "image_data_format",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.is_keras_tensor",
        "name": "is_keras_tensor",
        "params": [
            "x"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.reset_uids",
        "name": "reset_uids",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.rnn",
        "name": "rnn",
        "params": [
            "step_function",
            "inputs",
            "initial_states",
            "go_backwards",
            "mask",
            "constants",
            "unroll",
            "input_length",
            "time_major",
            "zero_output_for_mask",
            "return_all_outputs"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.set_epsilon",
        "name": "set_epsilon",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.set_floatx",
        "name": "set_floatx",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.set_image_data_format",
        "name": "set_image_data_format",
        "params": [
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.BackupAndRestore",
        "name": "BackupAndRestore",
        "params": [
            "backup_dir"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.BaseLogger",
        "name": "BaseLogger",
        "params": [
            "stateful_metrics"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.CSVLogger",
        "name": "CSVLogger",
        "params": [
            "filename",
            "separator",
            "append"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.Callback",
        "name": "Callback",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.callbacks.CallbackList",
        "name": "CallbackList",
        "params": [
            "callbacks",
            "add_history",
            "add_progbar",
            "model",
            null
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.EarlyStopping",
        "name": "EarlyStopping",
        "params": [
            "monitor",
            "min_delta",
            "patience",
            "verbose",
            "mode",
            "baseline",
            "restore_best_weights"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.History",
        "name": "History",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.callbacks.LambdaCallback",
        "name": "LambdaCallback",
        "params": [
            "on_epoch_begin",
            "on_epoch_end",
            "on_batch_begin",
            "on_batch_end",
            "on_train_begin",
            "on_train_end",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.LearningRateScheduler",
        "name": "LearningRateScheduler",
        "params": [
            "schedule",
            "verbose"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.ModelCheckpoint",
        "name": "ModelCheckpoint",
        "params": [
            "filepath",
            "monitor",
            "verbose",
            "save_best_only",
            "save_weights_only",
            "mode",
            "save_freq",
            "options",
            "initial_value_threshold",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.ProgbarLogger",
        "name": "ProgbarLogger",
        "params": [
            "count_mode",
            "stateful_metrics"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.ReduceLROnPlateau",
        "name": "ReduceLROnPlateau",
        "params": [
            "monitor",
            "factor",
            "patience",
            "verbose",
            "mode",
            "min_delta",
            "cooldown",
            "min_lr",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.RemoteMonitor",
        "name": "RemoteMonitor",
        "params": [
            "root",
            "path",
            "field",
            "headers",
            "send_as_json"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.TensorBoard",
        "name": "TensorBoard",
        "params": [
            "log_dir",
            "histogram_freq",
            "write_graph",
            "write_images",
            "write_steps_per_second",
            "update_freq",
            "profile_batch",
            "embeddings_freq",
            "embeddings_metadata",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.callbacks.TerminateOnNaN",
        "name": "TerminateOnNaN",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.constraints.Constraint",
        "name": "Constraint",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.constraints.MaxNorm",
        "name": "MaxNorm",
        "params": [
            "max_value",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.constraints.MinMaxNorm",
        "name": "MinMaxNorm",
        "params": [
            "min_value",
            "max_value",
            "rate",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.constraints.NonNeg",
        "name": "NonNeg",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.constraints.RadialConstraint",
        "name": "RadialConstraint",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.constraints.UnitNorm",
        "name": "UnitNorm",
        "params": [
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.constraints.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.constraints.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.constraints.serialize",
        "name": "serialize",
        "params": [
            "constraint"
        ]
    },
    {
        "full_name": "tensorflow.keras.estimator.model_to_estimator",
        "name": "model_to_estimator",
        "params": [
            "keras_model",
            "keras_model_path",
            "custom_objects",
            "model_dir",
            "config",
            "checkpoint_format",
            "metric_names_map",
            "export_outputs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.CosineDecay",
        "name": "CosineDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.CosineDecayRestarts",
        "name": "CosineDecayRestarts",
        "params": [
            "initial_learning_rate",
            "first_decay_steps",
            "t_mul",
            "m_mul",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.experimental.LinearModel",
        "name": "LinearModel",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.experimental.SequenceFeatures",
        "name": "SequenceFeatures",
        "params": [
            "feature_columns",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.experimental.SidecarEvaluator",
        "name": "SidecarEvaluator",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.experimental.WideDeepModel",
        "name": "WideDeepModel",
        "params": [
            "linear_model",
            "dnn_model",
            "activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.Constant",
        "name": "Constant",
        "params": [
            "value"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.GlorotNormal",
        "name": "GlorotNormal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.GlorotUniform",
        "name": "GlorotUniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.HeNormal",
        "name": "HeNormal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.HeUniform",
        "name": "HeUniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.Identity",
        "name": "Identity",
        "params": [
            "gain"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.Initializer",
        "name": "Initializer",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.initializers.LecunNormal",
        "name": "LecunNormal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.LecunUniform",
        "name": "LecunUniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.Ones",
        "name": "Ones",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.initializers.Orthogonal",
        "name": "Orthogonal",
        "params": [
            "gain",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.RandomNormal",
        "name": "RandomNormal",
        "params": [
            "mean",
            "stddev",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.RandomUniform",
        "name": "RandomUniform",
        "params": [
            "minval",
            "maxval",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.TruncatedNormal",
        "name": "TruncatedNormal",
        "params": [
            "mean",
            "stddev",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.VarianceScaling",
        "name": "VarianceScaling",
        "params": [
            "scale",
            "mode",
            "distribution",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.Zeros",
        "name": "Zeros",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.initializers.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.initializers.serialize",
        "name": "serialize",
        "params": [
            "initializer"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.AbstractRNNCell",
        "name": "AbstractRNNCell",
        "params": [
            "trainable",
            "name",
            "dtype",
            "dynamic",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Activation",
        "name": "Activation",
        "params": [
            "activation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ActivityRegularization",
        "name": "ActivityRegularization",
        "params": [
            "l1",
            "l2",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Add",
        "name": "Add",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.AdditiveAttention",
        "name": "AdditiveAttention",
        "params": [
            "use_scale",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.AlphaDropout",
        "name": "AlphaDropout",
        "params": [
            "rate",
            "noise_shape",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Attention",
        "name": "Attention",
        "params": [
            "use_scale",
            "score_mode",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Average",
        "name": "Average",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.AveragePooling1D",
        "name": "AveragePooling1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.AveragePooling2D",
        "name": "AveragePooling2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.AveragePooling3D",
        "name": "AveragePooling3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.BatchNormalization",
        "name": "BatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Bidirectional",
        "name": "Bidirectional",
        "params": [
            "layer",
            "merge_mode",
            "weights",
            "backward_layer",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.CategoryEncoding",
        "name": "CategoryEncoding",
        "params": [
            "num_tokens",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.CenterCrop",
        "name": "CenterCrop",
        "params": [
            "height",
            "width",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Concatenate",
        "name": "Concatenate",
        "params": [
            "axis",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Conv1D",
        "name": "Conv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "groups",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Conv1DTranspose",
        "name": "Conv1DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "output_padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Conv2D",
        "name": "Conv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "groups",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Conv2DTranspose",
        "name": "Conv2DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "output_padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Conv3D",
        "name": "Conv3D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "groups",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Conv3DTranspose",
        "name": "Conv3DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "output_padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ConvLSTM1D",
        "name": "ConvLSTM1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ConvLSTM2D",
        "name": "ConvLSTM2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ConvLSTM3D",
        "name": "ConvLSTM3D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Cropping1D",
        "name": "Cropping1D",
        "params": [
            "cropping",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Cropping2D",
        "name": "Cropping2D",
        "params": [
            "cropping",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Cropping3D",
        "name": "Cropping3D",
        "params": [
            "cropping",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Dense",
        "name": "Dense",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.DenseFeatures",
        "name": "DenseFeatures",
        "params": [
            "feature_columns",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.DepthwiseConv1D",
        "name": "DepthwiseConv1D",
        "params": [
            "kernel_size",
            "strides",
            "padding",
            "depth_multiplier",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.DepthwiseConv2D",
        "name": "DepthwiseConv2D",
        "params": [
            "kernel_size",
            "strides",
            "padding",
            "depth_multiplier",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Discretization",
        "name": "Discretization",
        "params": [
            "bin_boundaries",
            "num_bins",
            "epsilon",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Dot",
        "name": "Dot",
        "params": [
            "axes",
            "normalize",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Dropout",
        "name": "Dropout",
        "params": [
            "rate",
            "noise_shape",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ELU",
        "name": "ELU",
        "params": [
            "alpha",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Embedding",
        "name": "Embedding",
        "params": [
            "input_dim",
            "output_dim",
            "embeddings_initializer",
            "embeddings_regularizer",
            "activity_regularizer",
            "embeddings_constraint",
            "mask_zero",
            "input_length",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Flatten",
        "name": "Flatten",
        "params": [
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GRU",
        "name": "GRU",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "time_major",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GRUCell",
        "name": "GRUCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GaussianDropout",
        "name": "GaussianDropout",
        "params": [
            "rate",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GaussianNoise",
        "name": "GaussianNoise",
        "params": [
            "stddev",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GlobalAveragePooling1D",
        "name": "GlobalAveragePooling1D",
        "params": [
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GlobalAveragePooling2D",
        "name": "GlobalAveragePooling2D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GlobalAveragePooling3D",
        "name": "GlobalAveragePooling3D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GlobalMaxPool1D",
        "name": "GlobalMaxPool1D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GlobalMaxPool2D",
        "name": "GlobalMaxPool2D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.GlobalMaxPool3D",
        "name": "GlobalMaxPool3D",
        "params": [
            "data_format",
            "keepdims",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Hashing",
        "name": "Hashing",
        "params": [
            "num_bins",
            "mask_value",
            "salt",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.InputLayer",
        "name": "InputLayer",
        "params": [
            "input_shape",
            "batch_size",
            "dtype",
            "input_tensor",
            "sparse",
            "name",
            "ragged",
            "type_spec",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.InputSpec",
        "name": "InputSpec",
        "params": [
            "dtype",
            "shape",
            "ndim",
            "max_ndim",
            "min_ndim",
            "axes",
            "allow_last_axis_squeeze",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.IntegerLookup",
        "name": "IntegerLookup",
        "params": [
            "max_tokens",
            "num_oov_indices",
            "mask_token",
            "oov_token",
            "vocabulary",
            "vocabulary_dtype",
            "idf_weights",
            "invert",
            "output_mode",
            "sparse",
            "pad_to_max_tokens",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.LSTM",
        "name": "LSTM",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "time_major",
            "unroll",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.LSTMCell",
        "name": "LSTMCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Lambda",
        "name": "Lambda",
        "params": [
            "function",
            "output_shape",
            "mask",
            "arguments",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Layer",
        "name": "Layer",
        "params": [
            "trainable",
            "name",
            "dtype",
            "dynamic",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.LayerNormalization",
        "name": "LayerNormalization",
        "params": [
            "axis",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.LeakyReLU",
        "name": "LeakyReLU",
        "params": [
            "alpha",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.LocallyConnected1D",
        "name": "LocallyConnected1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "implementation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.LocallyConnected2D",
        "name": "LocallyConnected2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "implementation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Masking",
        "name": "Masking",
        "params": [
            "mask_value",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.MaxPool1D",
        "name": "MaxPool1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.MaxPool2D",
        "name": "MaxPool2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.MaxPool3D",
        "name": "MaxPool3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Maximum",
        "name": "Maximum",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Minimum",
        "name": "Minimum",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.MultiHeadAttention",
        "name": "MultiHeadAttention",
        "params": [
            "num_heads",
            "key_dim",
            "value_dim",
            "dropout",
            "use_bias",
            "output_shape",
            "attention_axes",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Multiply",
        "name": "Multiply",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Normalization",
        "name": "Normalization",
        "params": [
            "axis",
            "mean",
            "variance",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.PReLU",
        "name": "PReLU",
        "params": [
            "alpha_initializer",
            "alpha_regularizer",
            "alpha_constraint",
            "shared_axes",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Permute",
        "name": "Permute",
        "params": [
            "dims",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RNN",
        "name": "RNN",
        "params": [
            "cell",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "time_major",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomBrightness",
        "name": "RandomBrightness",
        "params": [
            "factor",
            "value_range",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomContrast",
        "name": "RandomContrast",
        "params": [
            "factor",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomCrop",
        "name": "RandomCrop",
        "params": [
            "height",
            "width",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomFlip",
        "name": "RandomFlip",
        "params": [
            "mode",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomHeight",
        "name": "RandomHeight",
        "params": [
            "factor",
            "interpolation",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomRotation",
        "name": "RandomRotation",
        "params": [
            "factor",
            "fill_mode",
            "interpolation",
            "seed",
            "fill_value",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomTranslation",
        "name": "RandomTranslation",
        "params": [
            "height_factor",
            "width_factor",
            "fill_mode",
            "interpolation",
            "seed",
            "fill_value",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomWidth",
        "name": "RandomWidth",
        "params": [
            "factor",
            "interpolation",
            "seed",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RandomZoom",
        "name": "RandomZoom",
        "params": [
            "height_factor",
            "width_factor",
            "fill_mode",
            "interpolation",
            "seed",
            "fill_value",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ReLU",
        "name": "ReLU",
        "params": [
            "max_value",
            "negative_slope",
            "threshold",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.RepeatVector",
        "name": "RepeatVector",
        "params": [
            "n",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Rescaling",
        "name": "Rescaling",
        "params": [
            "scale",
            "offset",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Reshape",
        "name": "Reshape",
        "params": [
            "target_shape",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Resizing",
        "name": "Resizing",
        "params": [
            "height",
            "width",
            "interpolation",
            "crop_to_aspect_ratio",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SeparableConv1D",
        "name": "SeparableConv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SeparableConv2D",
        "name": "SeparableConv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SimpleRNN",
        "name": "SimpleRNN",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SimpleRNNCell",
        "name": "SimpleRNNCell",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Softmax",
        "name": "Softmax",
        "params": [
            "axis",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SpatialDropout1D",
        "name": "SpatialDropout1D",
        "params": [
            "rate",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SpatialDropout2D",
        "name": "SpatialDropout2D",
        "params": [
            "rate",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.SpatialDropout3D",
        "name": "SpatialDropout3D",
        "params": [
            "rate",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.StackedRNNCells",
        "name": "StackedRNNCells",
        "params": [
            "cells",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.StringLookup",
        "name": "StringLookup",
        "params": [
            "max_tokens",
            "num_oov_indices",
            "mask_token",
            "oov_token",
            "vocabulary",
            "idf_weights",
            "encoding",
            "invert",
            "output_mode",
            "sparse",
            "pad_to_max_tokens",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Subtract",
        "name": "Subtract",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.TextVectorization",
        "name": "TextVectorization",
        "params": [
            "max_tokens",
            "standardize",
            "split",
            "ngrams",
            "output_mode",
            "output_sequence_length",
            "pad_to_max_tokens",
            "vocabulary",
            "idf_weights",
            "sparse",
            "ragged",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ThresholdedReLU",
        "name": "ThresholdedReLU",
        "params": [
            "theta",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.TimeDistributed",
        "name": "TimeDistributed",
        "params": [
            "layer",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.UnitNormalization",
        "name": "UnitNormalization",
        "params": [
            "axis",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.UpSampling1D",
        "name": "UpSampling1D",
        "params": [
            "size",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.UpSampling2D",
        "name": "UpSampling2D",
        "params": [
            "size",
            "data_format",
            "interpolation",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.UpSampling3D",
        "name": "UpSampling3D",
        "params": [
            "size",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.Wrapper",
        "name": "Wrapper",
        "params": [
            "layer",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ZeroPadding1D",
        "name": "ZeroPadding1D",
        "params": [
            "padding",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ZeroPadding2D",
        "name": "ZeroPadding2D",
        "params": [
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.ZeroPadding3D",
        "name": "ZeroPadding3D",
        "params": [
            "padding",
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.add",
        "name": "add",
        "params": [
            "inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.average",
        "name": "average",
        "params": [
            "inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.concatenate",
        "name": "concatenate",
        "params": [
            "inputs",
            "axis",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.dot",
        "name": "dot",
        "params": [
            "inputs",
            "axes",
            "normalize",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.maximum",
        "name": "maximum",
        "params": [
            "inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.minimum",
        "name": "minimum",
        "params": [
            "inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.multiply",
        "name": "multiply",
        "params": [
            "inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.serialize",
        "name": "serialize",
        "params": [
            "layer"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.subtract",
        "name": "subtract",
        "params": [
            "inputs",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.BinaryCrossentropy",
        "name": "BinaryCrossentropy",
        "params": [
            "from_logits",
            "label_smoothing",
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.BinaryFocalCrossentropy",
        "name": "BinaryFocalCrossentropy",
        "params": [
            "gamma",
            "from_logits",
            "label_smoothing",
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.CategoricalCrossentropy",
        "name": "CategoricalCrossentropy",
        "params": [
            "from_logits",
            "label_smoothing",
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.CategoricalHinge",
        "name": "CategoricalHinge",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.CosineSimilarity",
        "name": "CosineSimilarity",
        "params": [
            "axis",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.Hinge",
        "name": "Hinge",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.Huber",
        "name": "Huber",
        "params": [
            "delta",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.KLDivergence",
        "name": "KLDivergence",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.LogCosh",
        "name": "LogCosh",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.Loss",
        "name": "Loss",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.MeanAbsoluteError",
        "name": "MeanAbsoluteError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.MeanAbsolutePercentageError",
        "name": "MeanAbsolutePercentageError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.MeanSquaredError",
        "name": "MeanSquaredError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.MeanSquaredLogarithmicError",
        "name": "MeanSquaredLogarithmicError",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.Poisson",
        "name": "Poisson",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.Reduction",
        "name": "Reduction",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.losses.SparseCategoricalCrossentropy",
        "name": "SparseCategoricalCrossentropy",
        "params": [
            "from_logits",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.SquaredHinge",
        "name": "SquaredHinge",
        "params": [
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.kl_divergence",
        "name": "kl_divergence",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.mean_absolute_error",
        "name": "mean_absolute_error",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.mean_absolute_percentage_error",
        "name": "mean_absolute_percentage_error",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.mean_squared_error",
        "name": "mean_squared_error",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.mean_squared_logarithmic_error",
        "name": "mean_squared_logarithmic_error",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.binary_crossentropy",
        "name": "binary_crossentropy",
        "params": [
            "y_true",
            "y_pred",
            "from_logits",
            "label_smoothing",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.binary_focal_crossentropy",
        "name": "binary_focal_crossentropy",
        "params": [
            "y_true",
            "y_pred",
            "gamma",
            "from_logits",
            "label_smoothing",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.categorical_crossentropy",
        "name": "categorical_crossentropy",
        "params": [
            "y_true",
            "y_pred",
            "from_logits",
            "label_smoothing",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.categorical_hinge",
        "name": "categorical_hinge",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.cosine_similarity",
        "name": "cosine_similarity",
        "params": [
            "y_true",
            "y_pred",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.deserialize",
        "name": "deserialize",
        "params": [
            "name",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.hinge",
        "name": "hinge",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.huber",
        "name": "huber",
        "params": [
            "y_true",
            "y_pred",
            "delta"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.log_cosh",
        "name": "log_cosh",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.poisson",
        "name": "poisson",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.losses.serialize",
        "name": "serialize",
        "params": [
            "loss"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.sparse_categorical_crossentropy",
        "name": "sparse_categorical_crossentropy",
        "params": [
            "y_true",
            "y_pred",
            "from_logits",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.squared_hinge",
        "name": "squared_hinge",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.AUC",
        "name": "AUC",
        "params": [
            "num_thresholds",
            "curve",
            "summation_method",
            "name",
            "dtype",
            "thresholds",
            "multi_label",
            "num_labels",
            "label_weights",
            "from_logits"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Accuracy",
        "name": "Accuracy",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.BinaryAccuracy",
        "name": "BinaryAccuracy",
        "params": [
            "name",
            "dtype",
            "threshold"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.BinaryCrossentropy",
        "name": "BinaryCrossentropy",
        "params": [
            "name",
            "dtype",
            "from_logits",
            "label_smoothing"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.BinaryIoU",
        "name": "BinaryIoU",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.metrics.CategoricalAccuracy",
        "name": "CategoricalAccuracy",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.CategoricalCrossentropy",
        "name": "CategoricalCrossentropy",
        "params": [
            "name",
            "dtype",
            "from_logits",
            "label_smoothing"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.CategoricalHinge",
        "name": "CategoricalHinge",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.CosineSimilarity",
        "name": "CosineSimilarity",
        "params": [
            "name",
            "dtype",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.FalseNegatives",
        "name": "FalseNegatives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.FalsePositives",
        "name": "FalsePositives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Hinge",
        "name": "Hinge",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.IoU",
        "name": "IoU",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.metrics.KLDivergence",
        "name": "KLDivergence",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.LogCoshError",
        "name": "LogCoshError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Mean",
        "name": "Mean",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanAbsoluteError",
        "name": "MeanAbsoluteError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanAbsolutePercentageError",
        "name": "MeanAbsolutePercentageError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanIoU",
        "name": "MeanIoU",
        "params": [
            "num_classes",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanMetricWrapper",
        "name": "MeanMetricWrapper",
        "params": [
            "fn",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanRelativeError",
        "name": "MeanRelativeError",
        "params": [
            "normalizer",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanSquaredError",
        "name": "MeanSquaredError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanSquaredLogarithmicError",
        "name": "MeanSquaredLogarithmicError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.MeanTensor",
        "name": "MeanTensor",
        "params": [
            "name",
            "dtype",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Metric",
        "name": "Metric",
        "params": [
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.OneHotIoU",
        "name": "OneHotIoU",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.metrics.OneHotMeanIoU",
        "name": "OneHotMeanIoU",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.metrics.Poisson",
        "name": "Poisson",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Precision",
        "name": "Precision",
        "params": [
            "thresholds",
            "top_k",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.PrecisionAtRecall",
        "name": "PrecisionAtRecall",
        "params": [
            "recall",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Recall",
        "name": "Recall",
        "params": [
            "thresholds",
            "top_k",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.RecallAtPrecision",
        "name": "RecallAtPrecision",
        "params": [
            "precision",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.RootMeanSquaredError",
        "name": "RootMeanSquaredError",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.SensitivityAtSpecificity",
        "name": "SensitivityAtSpecificity",
        "params": [
            "specificity",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.SparseCategoricalAccuracy",
        "name": "SparseCategoricalAccuracy",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.SparseCategoricalCrossentropy",
        "name": "SparseCategoricalCrossentropy",
        "params": [
            "name",
            "dtype",
            "from_logits",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.SparseTopKCategoricalAccuracy",
        "name": "SparseTopKCategoricalAccuracy",
        "params": [
            "k",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.SpecificityAtSensitivity",
        "name": "SpecificityAtSensitivity",
        "params": [
            "sensitivity",
            "num_thresholds",
            "class_id",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.SquaredHinge",
        "name": "SquaredHinge",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.Sum",
        "name": "Sum",
        "params": [
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.TopKCategoricalAccuracy",
        "name": "TopKCategoricalAccuracy",
        "params": [
            "k",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.TrueNegatives",
        "name": "TrueNegatives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.TruePositives",
        "name": "TruePositives",
        "params": [
            "thresholds",
            "name",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.binary_accuracy",
        "name": "binary_accuracy",
        "params": [
            "y_true",
            "y_pred",
            "threshold"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.categorical_accuracy",
        "name": "categorical_accuracy",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.serialize",
        "name": "serialize",
        "params": [
            "metric"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.sparse_categorical_accuracy",
        "name": "sparse_categorical_accuracy",
        "params": [
            "y_true",
            "y_pred"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.sparse_top_k_categorical_accuracy",
        "name": "sparse_top_k_categorical_accuracy",
        "params": [
            "y_true",
            "y_pred",
            "k"
        ]
    },
    {
        "full_name": "tensorflow.keras.metrics.top_k_categorical_accuracy",
        "name": "top_k_categorical_accuracy",
        "params": [
            "y_true",
            "y_pred",
            "k"
        ]
    },
    {
        "full_name": "tensorflow.keras.mixed_precision.LossScaleOptimizer",
        "name": "LossScaleOptimizer",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.mixed_precision.Policy",
        "name": "Policy",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.mixed_precision.global_policy",
        "name": "global_policy",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.mixed_precision.set_global_policy",
        "name": "set_global_policy",
        "params": [
            "policy"
        ]
    },
    {
        "full_name": "tensorflow.keras.models.clone_model",
        "name": "clone_model",
        "params": [
            "model",
            "input_tensors",
            "clone_function"
        ]
    },
    {
        "full_name": "tensorflow.keras.models.load_model",
        "name": "load_model",
        "params": [
            "filepath",
            "custom_objects",
            "compile",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.keras.models.model_from_config",
        "name": "model_from_config",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.models.model_from_json",
        "name": "model_from_json",
        "params": [
            "json_string",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.models.model_from_yaml",
        "name": "model_from_yaml",
        "params": [
            "yaml_string",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.models.save_model",
        "name": "save_model",
        "params": [
            "model",
            "filepath",
            "overwrite",
            "include_optimizer",
            "save_format",
            "signatures",
            "options",
            "save_traces"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Adadelta",
        "name": "Adadelta",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Adagrad",
        "name": "Adagrad",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Adam",
        "name": "Adam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "amsgrad",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Adamax",
        "name": "Adamax",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Ftrl",
        "name": "Ftrl",
        "params": [
            "learning_rate",
            "learning_rate_power",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "name",
            "l2_shrinkage_regularization_strength",
            "beta",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Nadam",
        "name": "Nadam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.Optimizer",
        "name": "Optimizer",
        "params": [
            "name",
            "gradient_aggregator",
            "gradient_transformers",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.RMSprop",
        "name": "RMSprop",
        "params": [
            "learning_rate",
            "rho",
            "momentum",
            "epsilon",
            "centered",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.SGD",
        "name": "SGD",
        "params": [
            "learning_rate",
            "momentum",
            "nesterov",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.serialize",
        "name": "serialize",
        "params": [
            "optimizer"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.image_dataset_from_directory",
        "name": "image_dataset_from_directory",
        "params": [
            "directory",
            "labels",
            "label_mode",
            "class_names",
            "color_mode",
            "batch_size",
            "image_size",
            "shuffle",
            "seed",
            "validation_split",
            "subset",
            "interpolation",
            "follow_links",
            "crop_to_aspect_ratio",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.text_dataset_from_directory",
        "name": "text_dataset_from_directory",
        "params": [
            "directory",
            "labels",
            "label_mode",
            "class_names",
            "batch_size",
            "max_length",
            "shuffle",
            "seed",
            "validation_split",
            "subset",
            "follow_links"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.timeseries_dataset_from_array",
        "name": "timeseries_dataset_from_array",
        "params": [
            "data",
            "targets",
            "sequence_length",
            "sequence_stride",
            "sampling_rate",
            "batch_size",
            "shuffle",
            "seed",
            "start_index",
            "end_index"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.L1",
        "name": "L1",
        "params": [
            "l1",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.L1L2",
        "name": "L1L2",
        "params": [
            "l1",
            "l2"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.L2",
        "name": "L2",
        "params": [
            "l2",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.OrthogonalRegularizer",
        "name": "OrthogonalRegularizer",
        "params": [
            "factor",
            "mode"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.Regularizer",
        "name": "Regularizer",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.regularizers.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.get",
        "name": "get",
        "params": [
            "identifier"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.l1_l2",
        "name": "l1_l2",
        "params": [
            "l1",
            "l2"
        ]
    },
    {
        "full_name": "tensorflow.keras.regularizers.serialize",
        "name": "serialize",
        "params": [
            "regularizer"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.custom_object_scope",
        "name": "custom_object_scope",
        "params": [
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.GeneratorEnqueuer",
        "name": "GeneratorEnqueuer",
        "params": [
            "generator",
            "use_multiprocessing",
            "random_seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.OrderedEnqueuer",
        "name": "OrderedEnqueuer",
        "params": [
            "sequence",
            "use_multiprocessing",
            "shuffle"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.Progbar",
        "name": "Progbar",
        "params": [
            "target",
            "width",
            "verbose",
            "interval",
            "stateful_metrics",
            "unit_name"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.Sequence",
        "name": "Sequence",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.utils.SequenceEnqueuer",
        "name": "SequenceEnqueuer",
        "params": [
            "sequence",
            "use_multiprocessing"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.SidecarEvaluator",
        "name": "SidecarEvaluator",
        "params": [
            "model",
            "data",
            "checkpoint_dir",
            "steps",
            "max_evaluations",
            "callbacks"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.array_to_img",
        "name": "array_to_img",
        "params": [
            "x",
            "data_format",
            "scale",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.deserialize_keras_object",
        "name": "deserialize_keras_object",
        "params": [
            "identifier",
            "module_objects",
            "custom_objects",
            "printable_module_name"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.disable_interactive_logging",
        "name": "disable_interactive_logging",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.utils.enable_interactive_logging",
        "name": "enable_interactive_logging",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.utils.get_custom_objects",
        "name": "get_custom_objects",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.utils.get_file",
        "name": "get_file",
        "params": [
            "fname",
            "origin",
            "untar",
            "md5_hash",
            "file_hash",
            "cache_subdir",
            "hash_algorithm",
            "extract",
            "archive_format",
            "cache_dir"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.get_registered_name",
        "name": "get_registered_name",
        "params": [
            "obj"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.get_registered_object",
        "name": "get_registered_object",
        "params": [
            "name",
            "custom_objects",
            "module_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.get_source_inputs",
        "name": "get_source_inputs",
        "params": [
            "tensor",
            "layer",
            "node_index"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.img_to_array",
        "name": "img_to_array",
        "params": [
            "img",
            "data_format",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.is_interactive_logging_enabled",
        "name": "is_interactive_logging_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.utils.load_img",
        "name": "load_img",
        "params": [
            "path",
            "grayscale",
            "color_mode",
            "target_size",
            "interpolation",
            "keep_aspect_ratio"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.model_to_dot",
        "name": "model_to_dot",
        "params": [
            "model",
            "show_shapes",
            "show_dtype",
            "show_layer_names",
            "rankdir",
            "expand_nested",
            "dpi",
            "subgraph",
            "layer_range",
            "show_layer_activations"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.normalize",
        "name": "normalize",
        "params": [
            "x",
            "axis",
            "order"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.pack_x_y_sample_weight",
        "name": "pack_x_y_sample_weight",
        "params": [
            "x",
            "y",
            "sample_weight"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.pad_sequences",
        "name": "pad_sequences",
        "params": [
            "sequences",
            "maxlen",
            "dtype",
            "padding",
            "truncating",
            "value"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.plot_model",
        "name": "plot_model",
        "params": [
            "model",
            "to_file",
            "show_shapes",
            "show_dtype",
            "show_layer_names",
            "rankdir",
            "expand_nested",
            "dpi",
            "layer_range",
            "show_layer_activations"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.register_keras_serializable",
        "name": "register_keras_serializable",
        "params": [
            "package",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.save_img",
        "name": "save_img",
        "params": [
            "path",
            "x",
            "data_format",
            "file_format",
            "scale",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.serialize_keras_object",
        "name": "serialize_keras_object",
        "params": [
            "instance"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.set_random_seed",
        "name": "set_random_seed",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.to_categorical",
        "name": "to_categorical",
        "params": [
            "y",
            "num_classes",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.unpack_x_y_sample_weight",
        "name": "unpack_x_y_sample_weight",
        "params": [
            "data"
        ]
    },
    {
        "full_name": "tensorflow.linalg.experimental.conjugate_gradient",
        "name": "conjugate_gradient",
        "params": [
            "operator",
            "rhs",
            "preconditioner",
            "x",
            "tol",
            "max_iter",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.lite.experimental.Analyzer",
        "name": "Analyzer",
        "params": []
    },
    {
        "full_name": "tensorflow.lite.experimental.OpResolverType",
        "name": "OpResolverType",
        "params": []
    },
    {
        "full_name": "tensorflow.lite.experimental.QuantizationDebugOptions",
        "name": "QuantizationDebugOptions",
        "params": [
            "layer_debug_metrics",
            "model_debug_metrics",
            "layer_direct_compare_metrics",
            "denylisted_ops",
            "denylisted_nodes",
            "fully_quantize"
        ]
    },
    {
        "full_name": "tensorflow.lite.experimental.QuantizationDebugger",
        "name": "QuantizationDebugger",
        "params": [
            "quant_debug_model_path",
            "quant_debug_model_content",
            "float_model_path",
            "float_model_content",
            "debug_dataset",
            "debug_options",
            "converter"
        ]
    },
    {
        "full_name": "tensorflow.lite.experimental.load_delegate",
        "name": "load_delegate",
        "params": [
            "library",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.lookup.experimental.DenseHashTable",
        "name": "DenseHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "default_value",
            "empty_key",
            "deleted_key",
            "initial_num_buckets",
            "name",
            "checkpoint",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name": "tensorflow.lookup.experimental.MutableHashTable",
        "name": "MutableHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "default_value",
            "name",
            "checkpoint",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_j0",
        "name": "bessel_j0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_j1",
        "name": "bessel_j1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_k0",
        "name": "bessel_k0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_k0e",
        "name": "bessel_k0e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_k1",
        "name": "bessel_k1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_k1e",
        "name": "bessel_k1e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_y0",
        "name": "bessel_y0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.bessel_y1",
        "name": "bessel_y1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.dawsn",
        "name": "dawsn",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.expint",
        "name": "expint",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.fresnel_cos",
        "name": "fresnel_cos",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.fresnel_sin",
        "name": "fresnel_sin",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.math.special.spence",
        "name": "spence",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.mlir.experimental.convert_function",
        "name": "convert_function",
        "params": [
            "concrete_function",
            "pass_pipeline",
            "show_debug_info"
        ]
    },
    {
        "full_name": "tensorflow.mlir.experimental.convert_graph_def",
        "name": "convert_graph_def",
        "params": [
            "graph_def",
            "pass_pipeline",
            "show_debug_info"
        ]
    },
    {
        "full_name": "tensorflow.nn.experimental.stateless_dropout",
        "name": "stateless_dropout",
        "params": [
            "x",
            "rate",
            "seed",
            "rng_alg",
            "noise_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.Profile",
        "name": "Profile",
        "params": [
            "logdir",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.ProfilerOptions",
        "name": "ProfilerOptions",
        "params": [
            "host_tracer_level",
            "python_tracer_level",
            "device_tracer_level",
            "delay_ms"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.Trace",
        "name": "Trace",
        "params": [
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.start",
        "name": "start",
        "params": [
            "logdir",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.stop",
        "name": "stop",
        "params": [
            "save"
        ]
    },
    {
        "full_name": "tensorflow.random.experimental.index_shuffle",
        "name": "index_shuffle",
        "params": [
            "index",
            "seed",
            "max_index"
        ]
    },
    {
        "full_name": "tensorflow.random.experimental.stateless_fold_in",
        "name": "stateless_fold_in",
        "params": [
            "seed",
            "data",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.random.experimental.stateless_split",
        "name": "stateless_split",
        "params": [
            "seed",
            "num",
            "alg"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.experimental.TrackableResource",
        "name": "TrackableResource",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.saved_model.experimental.VariablePolicy",
        "name": "VariablePolicy",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.DeviceAssignment",
        "name": "DeviceAssignment",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.HardwareFeature",
        "name": "HardwareFeature",
        "params": [
            "tpu_hardware_feature_proto"
        ]
    },
    {
        "full_name": "tensorflow.tpu.experimental.TPUSystemMetadata",
        "name": "TPUSystemMetadata",
        "params": [
            "num_cores",
            "num_hosts",
            "num_of_cores_per_host",
            "topology",
            "devices"
        ]
    },
    {
        "full_name": "tensorflow.tpu.experimental.Topology",
        "name": "Topology",
        "params": [
            "serialized",
            "mesh_shape",
            "device_coordinates"
        ]
    },
    {
        "full_name": "tensorflow.tpu.experimental.initialize_tpu_system",
        "name": "initialize_tpu_system",
        "params": [
            "cluster_resolver"
        ]
    },
    {
        "full_name": "tensorflow.tpu.experimental.shutdown_tpu_system",
        "name": "shutdown_tpu_system",
        "params": [
            "cluster_resolver"
        ]
    },
    {
        "full_name": "tensorflow.train.experimental.PythonState",
        "name": "PythonState",
        "params": []
    },
    {
        "full_name": "tensorflow.types.experimental.Callable",
        "name": "Callable",
        "params": []
    },
    {
        "full_name": "tensorflow.types.experimental.ConcreteFunction",
        "name": "ConcreteFunction",
        "params": []
    },
    {
        "full_name": "tensorflow.types.experimental.GenericFunction",
        "name": "GenericFunction",
        "params": []
    },
    {
        "full_name": "tensorflow.types.experimental.SupportsTracingProtocol",
        "name": "SupportsTracingProtocol",
        "params": []
    },
    {
        "full_name": "tensorflow.types.experimental.TraceType",
        "name": "TraceType",
        "params": []
    },
    {
        "full_name": "tensorflow.types.experimental.TracingContext",
        "name": "TracingContext",
        "params": []
    },
    {
        "full_name": "tensorflow.xla.experimental.compile",
        "name": "compile",
        "params": [
            "computation",
            "inputs"
        ]
    },
    {
        "full_name": "tensorflow.xla.experimental.jit_scope",
        "name": "jit_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.app.run",
        "name": "run",
        "params": [
            "main",
            "argv"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.autograph.to_code",
        "name": "to_code",
        "params": [
            "entity",
            "recursive",
            "arg_values",
            "arg_types",
            "indentation",
            "experimental_optional_features"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.autograph.to_graph",
        "name": "to_graph",
        "params": [
            "entity",
            "recursive",
            "arg_values",
            "arg_types",
            "experimental_optional_features"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.Dataset",
        "name": "Dataset",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.data.FixedLengthRecordDataset",
        "name": "FixedLengthRecordDataset",
        "params": [
            "filenames",
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "buffer_size",
            "compression_type",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.Iterator",
        "name": "Iterator",
        "params": [
            "iterator_resource",
            "initializer",
            "output_types",
            "output_shapes",
            "output_classes"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.TFRecordDataset",
        "name": "TFRecordDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.TextLineDataset",
        "name": "TextLineDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "num_parallel_reads",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.get_output_classes",
        "name": "get_output_classes",
        "params": [
            "dataset_or_iterator"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.get_output_shapes",
        "name": "get_output_shapes",
        "params": [
            "dataset_or_iterator"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.get_output_types",
        "name": "get_output_types",
        "params": [
            "dataset_or_iterator"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.make_initializable_iterator",
        "name": "make_initializable_iterator",
        "params": [
            "dataset",
            "shared_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.make_one_shot_iterator",
        "name": "make_one_shot_iterator",
        "params": [
            "dataset"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.debugging.assert_shapes",
        "name": "assert_shapes",
        "params": [
            "shapes",
            "data",
            "summarize",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.MirroredStrategy",
        "name": "MirroredStrategy",
        "params": [
            "devices",
            "cross_device_ops"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.OneDeviceStrategy",
        "name": "OneDeviceStrategy",
        "params": [
            "device"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.ReplicaContext",
        "name": "ReplicaContext",
        "params": [
            "strategy",
            "replica_id_in_sync_group"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.Strategy",
        "name": "Strategy",
        "params": [
            "extended"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.StrategyExtended",
        "name": "StrategyExtended",
        "params": [
            "container_strategy"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.get_loss_reduction",
        "name": "get_loss_reduction",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Bernoulli",
        "name": "Bernoulli",
        "params": [
            "logits",
            "probs",
            "dtype",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Beta",
        "name": "Beta",
        "params": [
            "concentration1",
            "concentration0",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Categorical",
        "name": "Categorical",
        "params": [
            "logits",
            "probs",
            "dtype",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Dirichlet",
        "name": "Dirichlet",
        "params": [
            "concentration",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.DirichletMultinomial",
        "name": "DirichletMultinomial",
        "params": [
            "total_count",
            "concentration",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Distribution",
        "name": "Distribution",
        "params": [
            "dtype",
            "reparameterization_type",
            "validate_args",
            "allow_nan_stats",
            "parameters",
            "graph_parents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Exponential",
        "name": "Exponential",
        "params": [
            "rate",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Gamma",
        "name": "Gamma",
        "params": [
            "concentration",
            "rate",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Laplace",
        "name": "Laplace",
        "params": [
            "loc",
            "scale",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Multinomial",
        "name": "Multinomial",
        "params": [
            "total_count",
            "logits",
            "probs",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Normal",
        "name": "Normal",
        "params": [
            "loc",
            "scale",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.RegisterKL",
        "name": "RegisterKL",
        "params": [
            "dist_cls_a",
            "dist_cls_b"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.ReparameterizationType",
        "name": "ReparameterizationType",
        "params": [
            "rep_type"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.StudentT",
        "name": "StudentT",
        "params": [
            "df",
            "loc",
            "scale",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.Uniform",
        "name": "Uniform",
        "params": [
            "low",
            "high",
            "validate_args",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distributions.kl_divergence",
        "name": "kl_divergence",
        "params": [
            "distribution_a",
            "distribution_b",
            "allow_nan_stats",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.errors.raise_exception_on_not_ok_status",
        "name": "raise_exception_on_not_ok_status",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.errors.error_code_from_exception_type",
        "name": "error_code_from_exception_type",
        "params": [
            "cls"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.errors.exception_type_from_error_code",
        "name": "exception_type_from_error_code",
        "params": [
            "error_code"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.BaselineClassifier",
        "name": "BaselineClassifier",
        "params": [
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.BaselineEstimator",
        "name": "BaselineEstimator",
        "params": [
            "head",
            "model_dir",
            "optimizer",
            "config"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.BaselineRegressor",
        "name": "BaselineRegressor",
        "params": [
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "loss_reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.DNNClassifier",
        "name": "DNNClassifier",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.DNNEstimator",
        "name": "DNNEstimator",
        "params": [
            "head",
            "hidden_units",
            "feature_columns",
            "model_dir",
            "optimizer",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.DNNLinearCombinedClassifier",
        "name": "DNNLinearCombinedClassifier",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.DNNLinearCombinedEstimator",
        "name": "DNNLinearCombinedEstimator",
        "params": [
            "head",
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "input_layer_partitioner",
            "config",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.DNNLinearCombinedRegressor",
        "name": "DNNLinearCombinedRegressor",
        "params": [
            "model_dir",
            "linear_feature_columns",
            "linear_optimizer",
            "dnn_feature_columns",
            "dnn_optimizer",
            "dnn_hidden_units",
            "dnn_activation_fn",
            "dnn_dropout",
            "label_dimension",
            "weight_column",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm",
            "linear_sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.DNNRegressor",
        "name": "DNNRegressor",
        "params": [
            "hidden_units",
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "config",
            "warm_start_from",
            "loss_reduction",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.Estimator",
        "name": "Estimator",
        "params": [
            "model_fn",
            "model_dir",
            "config",
            "params",
            "warm_start_from"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.LinearClassifier",
        "name": "LinearClassifier",
        "params": [
            "feature_columns",
            "model_dir",
            "n_classes",
            "weight_column",
            "label_vocabulary",
            "optimizer",
            "config",
            "partitioner",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.LinearEstimator",
        "name": "LinearEstimator",
        "params": [
            "head",
            "feature_columns",
            "model_dir",
            "optimizer",
            "config",
            "partitioner",
            "sparse_combiner",
            "warm_start_from"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.LinearRegressor",
        "name": "LinearRegressor",
        "params": [
            "feature_columns",
            "model_dir",
            "label_dimension",
            "weight_column",
            "optimizer",
            "config",
            "partitioner",
            "warm_start_from",
            "loss_reduction",
            "sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.classifier_parse_example_spec",
        "name": "classifier_parse_example_spec",
        "params": [
            "feature_columns",
            "label_key",
            "label_dtype",
            "label_default",
            "weight_column"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.regressor_parse_example_spec",
        "name": "regressor_parse_example_spec",
        "params": [
            "feature_columns",
            "label_key",
            "label_dtype",
            "label_default",
            "label_dimension",
            "weight_column"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.experimental.output_all_intermediates",
        "name": "output_all_intermediates",
        "params": [
            "state"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.feature_column.categorical_column_with_vocabulary_file",
        "name": "categorical_column_with_vocabulary_file",
        "params": [
            "key",
            "vocabulary_file",
            "vocabulary_size",
            "num_oov_buckets",
            "default_value",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.feature_column.input_layer",
        "name": "input_layer",
        "params": [
            "features",
            "feature_columns",
            "weight_collections",
            "trainable",
            "cols_to_vars",
            "cols_to_output_tensors"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.feature_column.linear_model",
        "name": "linear_model",
        "params": [
            "features",
            "feature_columns",
            "units",
            "sparse_combiner",
            "weight_collections",
            "trainable",
            "cols_to_vars"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.feature_column.make_parse_example_spec",
        "name": "make_parse_example_spec",
        "params": [
            "feature_columns"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.feature_column.shared_embedding_columns",
        "name": "shared_embedding_columns",
        "params": [
            "categorical_columns",
            "dimension",
            "combiner",
            "initializer",
            "shared_embedding_collection_name",
            "ckpt_to_load_from",
            "tensor_name_in_ckpt",
            "max_norm",
            "trainable",
            "use_safe_embedding_lookup"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.ArgumentParser",
        "name": "ArgumentParser",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.ArgumentSerializer",
        "name": "ArgumentSerializer",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.BaseListParser",
        "name": "BaseListParser",
        "params": [
            "token",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.BooleanFlag",
        "name": "BooleanFlag",
        "params": [
            "name",
            "default",
            "help",
            "short_name",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.BooleanParser",
        "name": "BooleanParser",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.CantOpenFlagFileError",
        "name": "CantOpenFlagFileError",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.CsvListSerializer",
        "name": "CsvListSerializer",
        "params": [
            "list_sep"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DuplicateFlagError",
        "name": "DuplicateFlagError",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.EnumClassFlag",
        "name": "EnumClassFlag",
        "params": [
            "name",
            "default",
            "help",
            "enum_class",
            "short_name",
            "case_sensitive",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.EnumClassListSerializer",
        "name": "EnumClassListSerializer",
        "params": [
            "list_sep",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.EnumClassParser",
        "name": "EnumClassParser",
        "params": [
            "enum_class",
            "case_sensitive"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.EnumClassSerializer",
        "name": "EnumClassSerializer",
        "params": [
            "lowercase"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.EnumFlag",
        "name": "EnumFlag",
        "params": [
            "name",
            "default",
            "help",
            "enum_values",
            "short_name",
            "case_sensitive",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.EnumParser",
        "name": "EnumParser",
        "params": [
            "enum_values",
            "case_sensitive"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.Error",
        "name": "Error",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.Flag",
        "name": "Flag",
        "params": [
            "parser",
            "serializer",
            "name",
            "default",
            "help_string",
            "short_name",
            "boolean",
            "allow_override",
            "allow_override_cpp",
            "allow_hide_cpp",
            "allow_overwrite",
            "allow_using_method_names"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.FlagHolder",
        "name": "FlagHolder",
        "params": [
            "flag_values",
            "flag",
            "ensure_non_none_value"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.FlagNameConflictsWithMethodError",
        "name": "FlagNameConflictsWithMethodError",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.FlagValues",
        "name": "FlagValues",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.FloatParser",
        "name": "FloatParser",
        "params": [
            "lower_bound",
            "upper_bound"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.IllegalFlagValueError",
        "name": "IllegalFlagValueError",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.IntegerParser",
        "name": "IntegerParser",
        "params": [
            "lower_bound",
            "upper_bound"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.ListParser",
        "name": "ListParser",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.ListSerializer",
        "name": "ListSerializer",
        "params": [
            "list_sep"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.MultiEnumClassFlag",
        "name": "MultiEnumClassFlag",
        "params": [
            "name",
            "default",
            "help_string",
            "enum_class",
            "case_sensitive",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.MultiFlag",
        "name": "MultiFlag",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.UnparsedFlagAccessError",
        "name": "UnparsedFlagAccessError",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.UnrecognizedFlagError",
        "name": "UnrecognizedFlagError",
        "params": [
            "flagname",
            "flagvalue",
            "suggestions"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.ValidationError",
        "name": "ValidationError",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.WhitespaceSeparatedListParser",
        "name": "WhitespaceSeparatedListParser",
        "params": [
            "comma_compat"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE",
        "name": "DEFINE",
        "params": [
            "parser",
            "name",
            "default",
            "help",
            "flag_values",
            "serializer",
            "module_name",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_alias",
        "name": "DEFINE_alias",
        "params": [
            "name",
            "original_name",
            "flag_values",
            "module_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_bool",
        "name": "DEFINE_bool",
        "params": [
            "name",
            "default",
            "help",
            "flag_values",
            "module_name",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_enum",
        "name": "DEFINE_enum",
        "params": [
            "name",
            "default",
            "enum_values",
            "help",
            "flag_values",
            "module_name",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_enum_class",
        "name": "DEFINE_enum_class",
        "params": [
            "name",
            "default",
            "enum_class",
            "help",
            "flag_values",
            "module_name",
            "case_sensitive",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_flag",
        "name": "DEFINE_flag",
        "params": [
            "flag",
            "flag_values",
            "module_name",
            "required"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_float",
        "name": "DEFINE_float",
        "params": [
            "name",
            "default",
            "help",
            "lower_bound",
            "upper_bound",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_integer",
        "name": "DEFINE_integer",
        "params": [
            "name",
            "default",
            "help",
            "lower_bound",
            "upper_bound",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_list",
        "name": "DEFINE_list",
        "params": [
            "name",
            "default",
            "help",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_multi",
        "name": "DEFINE_multi",
        "params": [
            "parser",
            "serializer",
            "name",
            "default",
            "help",
            "flag_values",
            "module_name",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_multi_enum",
        "name": "DEFINE_multi_enum",
        "params": [
            "name",
            "default",
            "enum_values",
            "help",
            "flag_values",
            "case_sensitive",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_multi_enum_class",
        "name": "DEFINE_multi_enum_class",
        "params": [
            "name",
            "default",
            "enum_class",
            "help",
            "flag_values",
            "module_name",
            "case_sensitive",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_multi_float",
        "name": "DEFINE_multi_float",
        "params": [
            "name",
            "default",
            "help",
            "lower_bound",
            "upper_bound",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_multi_integer",
        "name": "DEFINE_multi_integer",
        "params": [
            "name",
            "default",
            "help",
            "lower_bound",
            "upper_bound",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_multi_string",
        "name": "DEFINE_multi_string",
        "params": [
            "name",
            "default",
            "help",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_spaceseplist",
        "name": "DEFINE_spaceseplist",
        "params": [
            "name",
            "default",
            "help",
            "comma_compat",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.DEFINE_string",
        "name": "DEFINE_string",
        "params": [
            "name",
            "default",
            "help",
            "flag_values",
            "required",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.FLAGS",
        "name": "FLAGS",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.adopt_module_key_flags",
        "name": "adopt_module_key_flags",
        "params": [
            "module",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.declare_key_flag",
        "name": "declare_key_flag",
        "params": [
            "flag_name",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.disclaim_key_flags",
        "name": "disclaim_key_flags",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.doc_to_help",
        "name": "doc_to_help",
        "params": [
            "doc"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.flag_dict_to_args",
        "name": "flag_dict_to_args",
        "params": [
            "flag_map",
            "multi_flags"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.get_help_width",
        "name": "get_help_width",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.flags.mark_bool_flags_as_mutual_exclusive",
        "name": "mark_bool_flags_as_mutual_exclusive",
        "params": [
            "flag_names",
            "required",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.mark_flag_as_required",
        "name": "mark_flag_as_required",
        "params": [
            "flag_name",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.mark_flags_as_mutual_exclusive",
        "name": "mark_flags_as_mutual_exclusive",
        "params": [
            "flag_names",
            "required",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.mark_flags_as_required",
        "name": "mark_flags_as_required",
        "params": [
            "flag_names",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.multi_flags_validator",
        "name": "multi_flags_validator",
        "params": [
            "flag_names",
            "message",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.register_multi_flags_validator",
        "name": "register_multi_flags_validator",
        "params": [
            "flag_names",
            "multi_flags_checker",
            "message",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.register_validator",
        "name": "register_validator",
        "params": [
            "flag_name",
            "checker",
            "message",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.text_wrap",
        "name": "text_wrap",
        "params": [
            "text",
            "length",
            "indent",
            "firstline_indent"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.flags.validator",
        "name": "validator",
        "params": [
            "flag_name",
            "message",
            "flag_values"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.FastGFile",
        "name": "FastGFile",
        "params": [
            "name",
            "mode"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Copy",
        "name": "Copy",
        "params": [
            "oldpath",
            "newpath",
            "overwrite"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.DeleteRecursively",
        "name": "DeleteRecursively",
        "params": [
            "dirname"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Exists",
        "name": "Exists",
        "params": [
            "filename"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Glob",
        "name": "Glob",
        "params": [
            "filename"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.IsDirectory",
        "name": "IsDirectory",
        "params": [
            "dirname"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.ListDirectory",
        "name": "ListDirectory",
        "params": [
            "dirname"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.MakeDirs",
        "name": "MakeDirs",
        "params": [
            "dirname"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.MkDir",
        "name": "MkDir",
        "params": [
            "dirname"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Remove",
        "name": "Remove",
        "params": [
            "filename"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Rename",
        "name": "Rename",
        "params": [
            "oldname",
            "newname",
            "overwrite"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Stat",
        "name": "Stat",
        "params": [
            "filename"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.gfile.Walk",
        "name": "Walk",
        "params": [
            "top",
            "in_order"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.graph_util.convert_variables_to_constants",
        "name": "convert_variables_to_constants",
        "params": [
            "sess",
            "input_graph_def",
            "output_node_names",
            "variable_names_whitelist",
            "variable_names_blacklist"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.graph_util.extract_sub_graph",
        "name": "extract_sub_graph",
        "params": [
            "graph_def",
            "dest_nodes"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.graph_util.must_run_on_cpu",
        "name": "must_run_on_cpu",
        "params": [
            "node",
            "pin_variables_on_cpu"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.graph_util.remove_training_nodes",
        "name": "remove_training_nodes",
        "params": [
            "input_graph",
            "protected_nodes"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.graph_util.tensor_shape_from_node_def_name",
        "name": "tensor_shape_from_node_def_name",
        "params": [
            "graph",
            "input_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.ResizeMethod",
        "name": "ResizeMethod",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.image.crop_and_resize",
        "name": "crop_and_resize",
        "params": [
            "image",
            "boxes",
            "box_ind",
            "crop_size",
            "method",
            "extrapolation_value",
            "name",
            "box_indices"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.draw_bounding_boxes",
        "name": "draw_bounding_boxes",
        "params": [
            "images",
            "boxes",
            "name",
            "colors"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.extract_glimpse",
        "name": "extract_glimpse",
        "params": [
            "input",
            "size",
            "offsets",
            "centered",
            "normalized",
            "uniform_noise",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.resize",
        "name": "resize",
        "params": [
            "images",
            "size",
            "method",
            "align_corners",
            "preserve_aspect_ratio",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.resize_area",
        "name": "resize_area",
        "params": [
            "images",
            "size",
            "align_corners",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.resize_bicubic",
        "name": "resize_bicubic",
        "params": [
            "images",
            "size",
            "align_corners",
            "name",
            "half_pixel_centers"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.resize_bilinear",
        "name": "resize_bilinear",
        "params": [
            "images",
            "size",
            "align_corners",
            "name",
            "half_pixel_centers"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.resize_image_with_pad",
        "name": "resize_image_with_pad",
        "params": [
            "image",
            "target_height",
            "target_width",
            "method",
            "align_corners"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.resize_nearest_neighbor",
        "name": "resize_nearest_neighbor",
        "params": [
            "images",
            "size",
            "align_corners",
            "name",
            "half_pixel_centers"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.image.sample_distorted_bounding_box",
        "name": "sample_distorted_bounding_box",
        "params": [
            "image_size",
            "bounding_boxes",
            "seed",
            "seed2",
            "min_object_covered",
            "aspect_ratio_range",
            "area_range",
            "max_attempts",
            "use_image_if_no_bounding_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.Identity",
        "name": "Identity",
        "params": [
            "gain",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.initializers.he_normal",
        "name": "he_normal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.initializers.he_uniform",
        "name": "he_uniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.initializers.lecun_normal",
        "name": "lecun_normal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.initializers.lecun_uniform",
        "name": "lecun_uniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.io.TFRecordCompressionType",
        "name": "TFRecordCompressionType",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.io.tensorflow_record_iterator",
        "name": "tf_record_iterator",
        "params": [
            "path",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.AveragePooling1D",
        "name": "AveragePooling1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.AveragePooling2D",
        "name": "AveragePooling2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.AveragePooling3D",
        "name": "AveragePooling3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.BatchNormalization",
        "name": "BatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "renorm",
            "renorm_clipping",
            "renorm_momentum",
            "fused",
            "trainable",
            "virtual_batch_size",
            "adjustment",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Conv1D",
        "name": "Conv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Conv2D",
        "name": "Conv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Conv2DTranspose",
        "name": "Conv2DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Conv3D",
        "name": "Conv3D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Conv3DTranspose",
        "name": "Conv3DTranspose",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Dense",
        "name": "Dense",
        "params": [
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Dropout",
        "name": "Dropout",
        "params": [
            "rate",
            "noise_shape",
            "seed",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Flatten",
        "name": "Flatten",
        "params": [
            "data_format",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.Layer",
        "name": "Layer",
        "params": [
            "trainable",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.MaxPooling1D",
        "name": "MaxPooling1D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.MaxPooling2D",
        "name": "MaxPooling2D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.MaxPooling3D",
        "name": "MaxPooling3D",
        "params": [
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.SeparableConv1D",
        "name": "SeparableConv1D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.SeparableConv2D",
        "name": "SeparableConv2D",
        "params": [
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.average_pooling1d",
        "name": "average_pooling1d",
        "params": [
            "inputs",
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.average_pooling2d",
        "name": "average_pooling2d",
        "params": [
            "inputs",
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.average_pooling3d",
        "name": "average_pooling3d",
        "params": [
            "inputs",
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.batch_normalization",
        "name": "batch_normalization",
        "params": [
            "inputs",
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "training",
            "trainable",
            "name",
            "reuse",
            "renorm",
            "renorm_clipping",
            "renorm_momentum",
            "fused",
            "virtual_batch_size",
            "adjustment"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.conv1d",
        "name": "conv1d",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.conv2d",
        "name": "conv2d",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.conv2d_transpose",
        "name": "conv2d_transpose",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.conv3d",
        "name": "conv3d",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.conv3d_transpose",
        "name": "conv3d_transpose",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.dense",
        "name": "dense",
        "params": [
            "inputs",
            "units",
            "activation",
            "use_bias",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.dropout",
        "name": "dropout",
        "params": [
            "inputs",
            "rate",
            "noise_shape",
            "seed",
            "training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.flatten",
        "name": "flatten",
        "params": [
            "inputs",
            "name",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.max_pooling1d",
        "name": "max_pooling1d",
        "params": [
            "inputs",
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.max_pooling2d",
        "name": "max_pooling2d",
        "params": [
            "inputs",
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.max_pooling3d",
        "name": "max_pooling3d",
        "params": [
            "inputs",
            "pool_size",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.separable_conv1d",
        "name": "separable_conv1d",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.separable_conv2d",
        "name": "separable_conv2d",
        "params": [
            "inputs",
            "filters",
            "kernel_size",
            "strides",
            "padding",
            "data_format",
            "dilation_rate",
            "depth_multiplier",
            "activation",
            "use_bias",
            "depthwise_initializer",
            "pointwise_initializer",
            "bias_initializer",
            "depthwise_regularizer",
            "pointwise_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "depthwise_constraint",
            "pointwise_constraint",
            "bias_constraint",
            "trainable",
            "name",
            "reuse"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.lite.OpHint",
        "name": "OpHint",
        "params": [
            "function_name",
            "level",
            "children_inputs_mappings",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.lite.TFLiteConverter",
        "name": "TFLiteConverter",
        "params": [
            "graph_def",
            "input_tensors",
            "output_tensors",
            "input_arrays_with_shape",
            "output_arrays",
            "experimental_debug_info_func"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.lite.TocoConverter",
        "name": "TocoConverter",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.lite.toco_convert",
        "name": "toco_convert",
        "params": [
            "input_data",
            "input_tensors",
            "output_tensors",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.TaskLevelStatusMessage",
        "name": "TaskLevelStatusMessage",
        "params": [
            "msg"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.debug",
        "name": "debug",
        "params": [
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.error",
        "name": "error",
        "params": [
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.fatal",
        "name": "fatal",
        "params": [
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.flush",
        "name": "flush",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.logging.get_verbosity",
        "name": "get_verbosity",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.logging.info",
        "name": "info",
        "params": [
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.log",
        "name": "log",
        "params": [
            "level",
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.log_every_n",
        "name": "log_every_n",
        "params": [
            "level",
            "msg",
            "n",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.log_first_n",
        "name": "log_first_n",
        "params": [
            "level",
            "msg",
            "n",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.log_if",
        "name": "log_if",
        "params": [
            "level",
            "msg",
            "condition",
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.set_verbosity",
        "name": "set_verbosity",
        "params": [
            "v"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.vlog",
        "name": "vlog",
        "params": [
            "level",
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.warn",
        "name": "warn",
        "params": [
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.logging.warning",
        "name": "warning",
        "params": [
            "msg",
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.lookup.StaticHashTable",
        "name": "StaticHashTable",
        "params": [
            "initializer",
            "default_value",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.lookup.StaticVocabularyTable",
        "name": "StaticVocabularyTable",
        "params": [
            "initializer",
            "num_oov_buckets",
            "lookup_key_dtype",
            "name",
            "experimental_is_anonymous"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.Reduction",
        "name": "Reduction",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.losses.absolute_difference",
        "name": "absolute_difference",
        "params": [
            "labels",
            "predictions",
            "weights",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.add_loss",
        "name": "add_loss",
        "params": [
            "loss",
            "loss_collection"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.compute_weighted_loss",
        "name": "compute_weighted_loss",
        "params": [
            "losses",
            "weights",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.cosine_distance",
        "name": "cosine_distance",
        "params": [
            "labels",
            "predictions",
            "axis",
            "weights",
            "scope",
            "loss_collection",
            "reduction",
            "dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.get_losses",
        "name": "get_losses",
        "params": [
            "scope",
            "loss_collection"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.get_regularization_loss",
        "name": "get_regularization_loss",
        "params": [
            "scope",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.get_regularization_losses",
        "name": "get_regularization_losses",
        "params": [
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.get_total_loss",
        "name": "get_total_loss",
        "params": [
            "add_regularization_losses",
            "name",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.hinge_loss",
        "name": "hinge_loss",
        "params": [
            "labels",
            "logits",
            "weights",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.huber_loss",
        "name": "huber_loss",
        "params": [
            "labels",
            "predictions",
            "weights",
            "delta",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.log_loss",
        "name": "log_loss",
        "params": [
            "labels",
            "predictions",
            "weights",
            "epsilon",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.mean_pairwise_squared_error",
        "name": "mean_pairwise_squared_error",
        "params": [
            "labels",
            "predictions",
            "weights",
            "scope",
            "loss_collection"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.mean_squared_error",
        "name": "mean_squared_error",
        "params": [
            "labels",
            "predictions",
            "weights",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.sigmoid_cross_entropy",
        "name": "sigmoid_cross_entropy",
        "params": [
            "multi_class_labels",
            "logits",
            "weights",
            "label_smoothing",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.softmax_cross_entropy",
        "name": "softmax_cross_entropy",
        "params": [
            "onehot_labels",
            "logits",
            "weights",
            "label_smoothing",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.losses.sparse_softmax_cross_entropy",
        "name": "sparse_softmax_cross_entropy",
        "params": [
            "labels",
            "logits",
            "weights",
            "scope",
            "loss_collection",
            "reduction"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.math.in_top_k",
        "name": "in_top_k",
        "params": [
            "predictions",
            "targets",
            "k",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.math.log_softmax",
        "name": "log_softmax",
        "params": [
            "logits",
            "axis",
            "name",
            "dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.math.softmax",
        "name": "softmax",
        "params": [
            "logits",
            "axis",
            "name",
            "dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.accuracy",
        "name": "accuracy",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.auc",
        "name": "auc",
        "params": [
            "labels",
            "predictions",
            "weights",
            "num_thresholds",
            "metrics_collections",
            "updates_collections",
            "curve",
            "name",
            "summation_method",
            "thresholds"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.average_precision_at_k",
        "name": "average_precision_at_k",
        "params": [
            "labels",
            "predictions",
            "k",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.false_negatives",
        "name": "false_negatives",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.false_negatives_at_thresholds",
        "name": "false_negatives_at_thresholds",
        "params": [
            "labels",
            "predictions",
            "thresholds",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.false_positives",
        "name": "false_positives",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.false_positives_at_thresholds",
        "name": "false_positives_at_thresholds",
        "params": [
            "labels",
            "predictions",
            "thresholds",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean",
        "name": "mean",
        "params": [
            "values",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_absolute_error",
        "name": "mean_absolute_error",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_cosine_distance",
        "name": "mean_cosine_distance",
        "params": [
            "labels",
            "predictions",
            "dim",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_iou",
        "name": "mean_iou",
        "params": [
            "labels",
            "predictions",
            "num_classes",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_per_class_accuracy",
        "name": "mean_per_class_accuracy",
        "params": [
            "labels",
            "predictions",
            "num_classes",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_relative_error",
        "name": "mean_relative_error",
        "params": [
            "labels",
            "predictions",
            "normalizer",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_squared_error",
        "name": "mean_squared_error",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.mean_tensor",
        "name": "mean_tensor",
        "params": [
            "values",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.percentage_below",
        "name": "percentage_below",
        "params": [
            "values",
            "threshold",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.precision",
        "name": "precision",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.precision_at_k",
        "name": "precision_at_k",
        "params": [
            "labels",
            "predictions",
            "k",
            "class_id",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.precision_at_thresholds",
        "name": "precision_at_thresholds",
        "params": [
            "labels",
            "predictions",
            "thresholds",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.precision_at_top_k",
        "name": "precision_at_top_k",
        "params": [
            "labels",
            "predictions_idx",
            "k",
            "class_id",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.recall",
        "name": "recall",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.recall_at_k",
        "name": "recall_at_k",
        "params": [
            "labels",
            "predictions",
            "k",
            "class_id",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.recall_at_thresholds",
        "name": "recall_at_thresholds",
        "params": [
            "labels",
            "predictions",
            "thresholds",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.recall_at_top_k",
        "name": "recall_at_top_k",
        "params": [
            "labels",
            "predictions_idx",
            "k",
            "class_id",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.root_mean_squared_error",
        "name": "root_mean_squared_error",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.sensitivity_at_specificity",
        "name": "sensitivity_at_specificity",
        "params": [
            "labels",
            "predictions",
            "specificity",
            "weights",
            "num_thresholds",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.sparse_average_precision_at_k",
        "name": "sparse_average_precision_at_k",
        "params": [
            "labels",
            "predictions",
            "k",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.sparse_precision_at_k",
        "name": "sparse_precision_at_k",
        "params": [
            "labels",
            "predictions",
            "k",
            "class_id",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.specificity_at_sensitivity",
        "name": "specificity_at_sensitivity",
        "params": [
            "labels",
            "predictions",
            "sensitivity",
            "weights",
            "num_thresholds",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.true_negatives",
        "name": "true_negatives",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.true_negatives_at_thresholds",
        "name": "true_negatives_at_thresholds",
        "params": [
            "labels",
            "predictions",
            "thresholds",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.true_positives",
        "name": "true_positives",
        "params": [
            "labels",
            "predictions",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.metrics.true_positives_at_thresholds",
        "name": "true_positives_at_thresholds",
        "params": [
            "labels",
            "predictions",
            "thresholds",
            "weights",
            "metrics_collections",
            "updates_collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.mixed_precision.DynamicLossScale",
        "name": "DynamicLossScale",
        "params": [
            "initial_loss_scale",
            "increment_period",
            "multiplier"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.mixed_precision.FixedLossScale",
        "name": "FixedLossScale",
        "params": [
            "loss_scale_value"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.mixed_precision.LossScale",
        "name": "LossScale",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.mixed_precision.MixedPrecisionLossScaleOptimizer",
        "name": "MixedPrecisionLossScaleOptimizer",
        "params": [
            "opt",
            "loss_scale"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.mixed_precision.disable_mixed_precision_graph_rewrite",
        "name": "disable_mixed_precision_graph_rewrite",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.mixed_precision.enable_mixed_precision_graph_rewrite",
        "name": "enable_mixed_precision_graph_rewrite",
        "params": [
            "opt",
            "loss_scale"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.avg_pool",
        "name": "avg_pool",
        "params": [
            "value",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name",
            "input"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.batch_norm_with_global_normalization",
        "name": "batch_norm_with_global_normalization",
        "params": [
            "t",
            "m",
            "v",
            "beta",
            "gamma",
            "variance_epsilon",
            "scale_after_normalization",
            "name",
            "input",
            "mean",
            "variance"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.bidirectional_dynamic_rnn",
        "name": "bidirectional_dynamic_rnn",
        "params": [
            "cell_fw",
            "cell_bw",
            "inputs",
            "sequence_length",
            "initial_state_fw",
            "initial_state_bw",
            "dtype",
            "parallel_iterations",
            "swap_memory",
            "time_major",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv1d",
        "name": "conv1d",
        "params": [
            "value",
            "filters",
            "stride",
            "padding",
            "use_cudnn_on_gpu",
            "data_format",
            "name",
            "input",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv2d",
        "name": "conv2d",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "use_cudnn_on_gpu",
            "data_format",
            "dilations",
            "name",
            "filters"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv2d_backprop_filter",
        "name": "conv2d_backprop_filter",
        "params": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides",
            "padding",
            "use_cudnn_on_gpu",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv2d_backprop_input",
        "name": "conv2d_backprop_input",
        "params": [
            "input_sizes",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "use_cudnn_on_gpu",
            "data_format",
            "dilations",
            "name",
            "filters"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv2d_transpose",
        "name": "conv2d_transpose",
        "params": [
            "value",
            "filter",
            "output_shape",
            "strides",
            "padding",
            "data_format",
            "name",
            "input",
            "filters",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv3d",
        "name": "conv3d",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name",
            "filters"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv3d_backprop_filter",
        "name": "conv3d_backprop_filter",
        "params": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.conv3d_transpose",
        "name": "conv3d_transpose",
        "params": [
            "value",
            "filter",
            "output_shape",
            "strides",
            "padding",
            "data_format",
            "name",
            "input",
            "filters",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.convolution",
        "name": "convolution",
        "params": [
            "input",
            "filter",
            "padding",
            "strides",
            "dilation_rate",
            "name",
            "data_format",
            "filters",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.crelu",
        "name": "crelu",
        "params": [
            "features",
            "name",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.ctc_beam_search_decoder",
        "name": "ctc_beam_search_decoder",
        "params": [
            "inputs",
            "sequence_length",
            "beam_width",
            "top_paths",
            "merge_repeated"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.ctc_loss",
        "name": "ctc_loss",
        "params": [
            "labels",
            "inputs",
            "sequence_length",
            "preprocess_collapse_repeated",
            "ctc_merge_repeated",
            "ignore_longer_outputs_than_inputs",
            "time_major",
            "logits"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.ctc_loss_v2",
        "name": "ctc_loss_v2",
        "params": [
            "labels",
            "logits",
            "label_length",
            "logit_length",
            "logits_time_major",
            "unique",
            "blank_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.depthwise_conv2d",
        "name": "depthwise_conv2d",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "rate",
            "name",
            "data_format",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.depthwise_conv2d_native",
        "name": "depthwise_conv2d_native",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.dilation2d",
        "name": "dilation2d",
        "params": [
            "input",
            "filter",
            "strides",
            "rates",
            "padding",
            "name",
            "filters",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.dropout",
        "name": "dropout",
        "params": [
            "x",
            "keep_prob",
            "noise_shape",
            "seed",
            "name",
            "rate"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.dynamic_rnn",
        "name": "dynamic_rnn",
        "params": [
            "cell",
            "inputs",
            "sequence_length",
            "initial_state",
            "dtype",
            "parallel_iterations",
            "swap_memory",
            "time_major",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.embedding_lookup",
        "name": "embedding_lookup",
        "params": [
            "params",
            "ids",
            "partition_strategy",
            "name",
            "validate_indices",
            "max_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.embedding_lookup_sparse",
        "name": "embedding_lookup_sparse",
        "params": [
            "params",
            "sp_ids",
            "sp_weights",
            "partition_strategy",
            "name",
            "combiner",
            "max_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.erosion2d",
        "name": "erosion2d",
        "params": [
            "value",
            "kernel",
            "strides",
            "rates",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.fractional_avg_pool",
        "name": "fractional_avg_pool",
        "params": [
            "value",
            "pooling_ratio",
            "pseudo_random",
            "overlapping",
            "deterministic",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.fractional_max_pool",
        "name": "fractional_max_pool",
        "params": [
            "value",
            "pooling_ratio",
            "pseudo_random",
            "overlapping",
            "deterministic",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.fused_batch_norm",
        "name": "fused_batch_norm",
        "params": [
            "x",
            "scale",
            "offset",
            "mean",
            "variance",
            "epsilon",
            "data_format",
            "is_training",
            "name",
            "exponential_avg_factor"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.max_pool",
        "name": "max_pool",
        "params": [
            "value",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name",
            "input"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.max_pool_with_argmax",
        "name": "max_pool_with_argmax",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "Targmax",
            "name",
            "output_dtype",
            "include_batch_in_index"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.moments",
        "name": "moments",
        "params": [
            "x",
            "axes",
            "shift",
            "name",
            "keep_dims",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.nce_loss",
        "name": "nce_loss",
        "params": [
            "weights",
            "biases",
            "labels",
            "inputs",
            "num_sampled",
            "num_classes",
            "num_true",
            "sampled_values",
            "remove_accidental_hits",
            "partition_strategy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.pool",
        "name": "pool",
        "params": [
            "input",
            "window_shape",
            "pooling_type",
            "padding",
            "dilation_rate",
            "strides",
            "name",
            "data_format",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.quantized_avg_pool",
        "name": "quantized_avg_pool",
        "params": [
            "input",
            "min_input",
            "max_input",
            "ksize",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.quantized_conv2d",
        "name": "quantized_conv2d",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.quantized_max_pool",
        "name": "quantized_max_pool",
        "params": [
            "input",
            "min_input",
            "max_input",
            "ksize",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.quantized_relu_x",
        "name": "quantized_relu_x",
        "params": [
            "features",
            "max_value",
            "min_features",
            "max_features",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.raw_rnn",
        "name": "raw_rnn",
        "params": [
            "cell",
            "loop_fn",
            "parallel_iterations",
            "swap_memory",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.relu_layer",
        "name": "relu_layer",
        "params": [
            "x",
            "weights",
            "biases",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.safe_embedding_lookup_sparse",
        "name": "safe_embedding_lookup_sparse",
        "params": [
            "embedding_weights",
            "sparse_ids",
            "sparse_weights",
            "combiner",
            "default_id",
            "name",
            "partition_strategy",
            "max_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.sampled_softmax_loss",
        "name": "sampled_softmax_loss",
        "params": [
            "weights",
            "biases",
            "labels",
            "inputs",
            "num_sampled",
            "num_classes",
            "num_true",
            "sampled_values",
            "remove_accidental_hits",
            "partition_strategy",
            "name",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.separable_conv2d",
        "name": "separable_conv2d",
        "params": [
            "input",
            "depthwise_filter",
            "pointwise_filter",
            "strides",
            "padding",
            "rate",
            "name",
            "data_format",
            "dilations"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.sigmoid_cross_entropy_with_logits",
        "name": "sigmoid_cross_entropy_with_logits",
        "params": [
            "_sentinel",
            "labels",
            "logits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.softmax_cross_entropy_with_logits",
        "name": "softmax_cross_entropy_with_logits",
        "params": [
            "_sentinel",
            "labels",
            "logits",
            "dim",
            "name",
            "axis"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.softmax_cross_entropy_with_logits_v2",
        "name": "softmax_cross_entropy_with_logits_v2",
        "params": [
            "labels",
            "logits",
            "axis",
            "name",
            "dim"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.sparse_softmax_cross_entropy_with_logits",
        "name": "sparse_softmax_cross_entropy_with_logits",
        "params": [
            "_sentinel",
            "labels",
            "logits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.static_bidirectional_rnn",
        "name": "static_bidirectional_rnn",
        "params": [
            "cell_fw",
            "cell_bw",
            "inputs",
            "initial_state_fw",
            "initial_state_bw",
            "dtype",
            "sequence_length",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.static_rnn",
        "name": "static_rnn",
        "params": [
            "cell",
            "inputs",
            "initial_state",
            "dtype",
            "sequence_length",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.static_state_saving_rnn",
        "name": "static_state_saving_rnn",
        "params": [
            "cell",
            "inputs",
            "state_saver",
            "state_name",
            "sequence_length",
            "scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.sufficient_statistics",
        "name": "sufficient_statistics",
        "params": [
            "x",
            "axes",
            "shift",
            "keep_dims",
            "name",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.weighted_cross_entropy_with_logits",
        "name": "weighted_cross_entropy_with_logits",
        "params": [
            "labels",
            "logits",
            "pos_weight",
            "name",
            "targets"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.weighted_moments",
        "name": "weighted_moments",
        "params": [
            "x",
            "axes",
            "frequency_weights",
            "name",
            "keep_dims",
            "keepdims"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.xw_plus_b",
        "name": "xw_plus_b",
        "params": [
            "x",
            "weights",
            "biases",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.AdviceProto",
        "name": "AdviceProto",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.GraphNodeProto",
        "name": "GraphNodeProto",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.MultiGraphNodeProto",
        "name": "MultiGraphNodeProto",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.OpLogProto",
        "name": "OpLogProto",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.ProfileOptionBuilder",
        "name": "ProfileOptionBuilder",
        "params": [
            "options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.Profiler",
        "name": "Profiler",
        "params": [
            "graph",
            "op_log"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.advise",
        "name": "advise",
        "params": [
            "graph",
            "run_meta",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.profile",
        "name": "profile",
        "params": [
            "graph",
            "run_meta",
            "op_log",
            "cmd",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.profiler.write_op_log",
        "name": "write_op_log",
        "params": [
            "graph",
            "log_dir",
            "op_log",
            "run_meta",
            "add_trace"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.ragged.RaggedTensorValue",
        "name": "RaggedTensorValue",
        "params": [
            "values",
            "row_splits"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.ragged.constant_value",
        "name": "constant_value",
        "params": [
            "pylist",
            "dtype",
            "ragged_rank",
            "inner_shape",
            "row_splits_dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.ragged.placeholder",
        "name": "placeholder",
        "params": [
            "dtype",
            "ragged_rank",
            "value_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.random.stateless_multinomial",
        "name": "stateless_multinomial",
        "params": [
            "logits",
            "num_samples",
            "seed",
            "output_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Abort",
        "name": "Abort",
        "params": [
            "error_msg",
            "exit_without_error",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Abs",
        "name": "Abs",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AccumulateNV2",
        "name": "AccumulateNV2",
        "params": [
            "inputs",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AccumulatorApplyGradient",
        "name": "AccumulatorApplyGradient",
        "params": [
            "handle",
            "local_step",
            "gradient",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AccumulatorNumAccumulated",
        "name": "AccumulatorNumAccumulated",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AccumulatorSetGlobalStep",
        "name": "AccumulatorSetGlobalStep",
        "params": [
            "handle",
            "new_global_step",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AccumulatorTakeGradient",
        "name": "AccumulatorTakeGradient",
        "params": [
            "handle",
            "num_required",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Acos",
        "name": "Acos",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Acosh",
        "name": "Acosh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Add",
        "name": "Add",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AddManySparseToTensorsMap",
        "name": "AddManySparseToTensorsMap",
        "params": [
            "sparse_indices",
            "sparse_values",
            "sparse_shape",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AddN",
        "name": "AddN",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AddSparseToTensorsMap",
        "name": "AddSparseToTensorsMap",
        "params": [
            "sparse_indices",
            "sparse_values",
            "sparse_shape",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AddV2",
        "name": "AddV2",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AdjustContrast",
        "name": "AdjustContrast",
        "params": [
            "images",
            "contrast_factor",
            "min_value",
            "max_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AdjustContrastv2",
        "name": "AdjustContrastv2",
        "params": [
            "images",
            "contrast_factor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AdjustHue",
        "name": "AdjustHue",
        "params": [
            "images",
            "delta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AdjustSaturation",
        "name": "AdjustSaturation",
        "params": [
            "images",
            "scale",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.All",
        "name": "All",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AllCandidateSampler",
        "name": "AllCandidateSampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AllToAll",
        "name": "AllToAll",
        "params": [
            "input",
            "group_assignment",
            "concat_dimension",
            "split_dimension",
            "split_count",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Angle",
        "name": "Angle",
        "params": [
            "input",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousHashTable",
        "name": "AnonymousHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousIterator",
        "name": "AnonymousIterator",
        "params": [
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousIteratorV2",
        "name": "AnonymousIteratorV2",
        "params": [
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousIteratorV3",
        "name": "AnonymousIteratorV3",
        "params": [
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousMemoryCache",
        "name": "AnonymousMemoryCache",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousMultiDeviceIterator",
        "name": "AnonymousMultiDeviceIterator",
        "params": [
            "devices",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousMultiDeviceIteratorV3",
        "name": "AnonymousMultiDeviceIteratorV3",
        "params": [
            "devices",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousMutableDenseHashTable",
        "name": "AnonymousMutableDenseHashTable",
        "params": [
            "empty_key",
            "deleted_key",
            "value_dtype",
            "value_shape",
            "initial_num_buckets",
            "max_load_factor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousMutableHashTable",
        "name": "AnonymousMutableHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousMutableHashTableOfTensors",
        "name": "AnonymousMutableHashTableOfTensors",
        "params": [
            "key_dtype",
            "value_dtype",
            "value_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousRandomSeedGenerator",
        "name": "AnonymousRandomSeedGenerator",
        "params": [
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AnonymousSeedGenerator",
        "name": "AnonymousSeedGenerator",
        "params": [
            "seed",
            "seed2",
            "reshuffle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Any",
        "name": "Any",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAdaMax",
        "name": "ApplyAdaMax",
        "params": [
            "var",
            "m",
            "v",
            "beta1_power",
            "lr",
            "beta1",
            "beta2",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAdadelta",
        "name": "ApplyAdadelta",
        "params": [
            "var",
            "accum",
            "accum_update",
            "lr",
            "rho",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAdagrad",
        "name": "ApplyAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAdagradDA",
        "name": "ApplyAdagradDA",
        "params": [
            "var",
            "gradient_accumulator",
            "gradient_squared_accumulator",
            "grad",
            "lr",
            "l1",
            "l2",
            "global_step",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAdagradV2",
        "name": "ApplyAdagradV2",
        "params": [
            "var",
            "accum",
            "lr",
            "epsilon",
            "grad",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAdam",
        "name": "ApplyAdam",
        "params": [
            "var",
            "m",
            "v",
            "beta1_power",
            "beta2_power",
            "lr",
            "beta1",
            "beta2",
            "epsilon",
            "grad",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyAddSign",
        "name": "ApplyAddSign",
        "params": [
            "var",
            "m",
            "lr",
            "alpha",
            "sign_decay",
            "beta",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyCenteredRMSProp",
        "name": "ApplyCenteredRMSProp",
        "params": [
            "var",
            "mg",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyFtrl",
        "name": "ApplyFtrl",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "lr",
            "l1",
            "l2",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyFtrlV2",
        "name": "ApplyFtrlV2",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "lr",
            "l1",
            "l2",
            "l2_shrinkage",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyGradientDescent",
        "name": "ApplyGradientDescent",
        "params": [
            "var",
            "alpha",
            "delta",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyMomentum",
        "name": "ApplyMomentum",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "momentum",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyPowerSign",
        "name": "ApplyPowerSign",
        "params": [
            "var",
            "m",
            "lr",
            "logbase",
            "sign_decay",
            "beta",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyProximalAdagrad",
        "name": "ApplyProximalAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "l1",
            "l2",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyProximalGradientDescent",
        "name": "ApplyProximalGradientDescent",
        "params": [
            "var",
            "alpha",
            "l1",
            "l2",
            "delta",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApplyRMSProp",
        "name": "ApplyRMSProp",
        "params": [
            "var",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ApproximateEqual",
        "name": "ApproximateEqual",
        "params": [
            "x",
            "y",
            "tolerance",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ArgMax",
        "name": "ArgMax",
        "params": [
            "input",
            "dimension",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ArgMin",
        "name": "ArgMin",
        "params": [
            "input",
            "dimension",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AsString",
        "name": "AsString",
        "params": [
            "input",
            "precision",
            "scientific",
            "shortest",
            "width",
            "fill",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Asin",
        "name": "Asin",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Asinh",
        "name": "Asinh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Assert",
        "name": "Assert",
        "params": [
            "condition",
            "data",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssertCardinalityDataset",
        "name": "AssertCardinalityDataset",
        "params": [
            "input_dataset",
            "cardinality",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssertNextDataset",
        "name": "AssertNextDataset",
        "params": [
            "input_dataset",
            "transformations",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssertPrevDataset",
        "name": "AssertPrevDataset",
        "params": [
            "input_dataset",
            "transformations",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Assign",
        "name": "Assign",
        "params": [
            "ref",
            "value",
            "validate_shape",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssignAdd",
        "name": "AssignAdd",
        "params": [
            "ref",
            "value",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssignAddVariableOp",
        "name": "AssignAddVariableOp",
        "params": [
            "resource",
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssignSub",
        "name": "AssignSub",
        "params": [
            "ref",
            "value",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssignSubVariableOp",
        "name": "AssignSubVariableOp",
        "params": [
            "resource",
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssignVariableOp",
        "name": "AssignVariableOp",
        "params": [
            "resource",
            "value",
            "validate_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AssignVariableXlaConcatND",
        "name": "AssignVariableXlaConcatND",
        "params": [
            "resource",
            "inputs",
            "num_concats",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Atan",
        "name": "Atan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Atan2",
        "name": "Atan2",
        "params": [
            "y",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Atanh",
        "name": "Atanh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AudioSpectrogram",
        "name": "AudioSpectrogram",
        "params": [
            "input",
            "window_size",
            "stride",
            "magnitude_squared",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AudioSummary",
        "name": "AudioSummary",
        "params": [
            "tag",
            "tensor",
            "sample_rate",
            "max_outputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AudioSummaryV2",
        "name": "AudioSummaryV2",
        "params": [
            "tag",
            "tensor",
            "sample_rate",
            "max_outputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AutoShardDataset",
        "name": "AutoShardDataset",
        "params": [
            "input_dataset",
            "num_workers",
            "index",
            "output_types",
            "output_shapes",
            "auto_shard_policy",
            "num_replicas",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AvgPool",
        "name": "AvgPool",
        "params": [
            "value",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AvgPool3D",
        "name": "AvgPool3D",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AvgPool3DGrad",
        "name": "AvgPool3DGrad",
        "params": [
            "orig_input_shape",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.AvgPoolGrad",
        "name": "AvgPoolGrad",
        "params": [
            "orig_input_shape",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BandedTriangularSolve",
        "name": "BandedTriangularSolve",
        "params": [
            "matrix",
            "rhs",
            "lower",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Barrier",
        "name": "Barrier",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BarrierClose",
        "name": "BarrierClose",
        "params": [
            "handle",
            "cancel_pending_enqueues",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BarrierIncompleteSize",
        "name": "BarrierIncompleteSize",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BarrierInsertMany",
        "name": "BarrierInsertMany",
        "params": [
            "handle",
            "keys",
            "values",
            "component_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BarrierReadySize",
        "name": "BarrierReadySize",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BarrierTakeMany",
        "name": "BarrierTakeMany",
        "params": [
            "handle",
            "num_elements",
            "component_types",
            "allow_small_batch",
            "wait_for_incomplete",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Batch",
        "name": "Batch",
        "params": [
            "in_tensors",
            "num_batch_threads",
            "max_batch_size",
            "batch_timeout_micros",
            "grad_timeout_micros",
            "max_enqueued_batches",
            "allowed_batch_sizes",
            "container",
            "shared_name",
            "batching_queue",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchCholesky",
        "name": "BatchCholesky",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchCholeskyGrad",
        "name": "BatchCholeskyGrad",
        "params": [
            "l",
            "grad",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchDataset",
        "name": "BatchDataset",
        "params": [
            "input_dataset",
            "batch_size",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchDatasetV2",
        "name": "BatchDatasetV2",
        "params": [
            "input_dataset",
            "batch_size",
            "drop_remainder",
            "output_types",
            "output_shapes",
            "parallel_copy",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchFFT",
        "name": "BatchFFT",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchFFT2D",
        "name": "BatchFFT2D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchFFT3D",
        "name": "BatchFFT3D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchFunction",
        "name": "BatchFunction",
        "params": [
            "in_tensors",
            "captured_tensors",
            "f",
            "num_batch_threads",
            "max_batch_size",
            "batch_timeout_micros",
            "Tout",
            "max_enqueued_batches",
            "allowed_batch_sizes",
            "container",
            "shared_name",
            "batching_queue",
            "enable_large_batch_splitting",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchIFFT",
        "name": "BatchIFFT",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchIFFT2D",
        "name": "BatchIFFT2D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchIFFT3D",
        "name": "BatchIFFT3D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatMul",
        "name": "BatchMatMul",
        "params": [
            "x",
            "y",
            "adj_x",
            "adj_y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatMulV2",
        "name": "BatchMatMulV2",
        "params": [
            "x",
            "y",
            "adj_x",
            "adj_y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatMulV3",
        "name": "BatchMatMulV3",
        "params": [
            "x",
            "y",
            "Tout",
            "adj_x",
            "adj_y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixBandPart",
        "name": "BatchMatrixBandPart",
        "params": [
            "input",
            "num_lower",
            "num_upper",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixDeterminant",
        "name": "BatchMatrixDeterminant",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixDiag",
        "name": "BatchMatrixDiag",
        "params": [
            "diagonal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixDiagPart",
        "name": "BatchMatrixDiagPart",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixInverse",
        "name": "BatchMatrixInverse",
        "params": [
            "input",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixSetDiag",
        "name": "BatchMatrixSetDiag",
        "params": [
            "input",
            "diagonal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixSolve",
        "name": "BatchMatrixSolve",
        "params": [
            "matrix",
            "rhs",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixSolveLs",
        "name": "BatchMatrixSolveLs",
        "params": [
            "matrix",
            "rhs",
            "l2_regularizer",
            "fast",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchMatrixTriangularSolve",
        "name": "BatchMatrixTriangularSolve",
        "params": [
            "matrix",
            "rhs",
            "lower",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchNormWithGlobalNormalization",
        "name": "BatchNormWithGlobalNormalization",
        "params": [
            "t",
            "m",
            "v",
            "beta",
            "gamma",
            "variance_epsilon",
            "scale_after_normalization",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchNormWithGlobalNormalizationGrad",
        "name": "BatchNormWithGlobalNormalizationGrad",
        "params": [
            "t",
            "m",
            "v",
            "gamma",
            "backprop",
            "variance_epsilon",
            "scale_after_normalization",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchSelfAdjointEig",
        "name": "BatchSelfAdjointEig",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchSelfAdjointEigV2",
        "name": "BatchSelfAdjointEigV2",
        "params": [
            "input",
            "compute_v",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchSvd",
        "name": "BatchSvd",
        "params": [
            "input",
            "compute_uv",
            "full_matrices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchToSpace",
        "name": "BatchToSpace",
        "params": [
            "input",
            "crops",
            "block_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BatchToSpaceND",
        "name": "BatchToSpaceND",
        "params": [
            "input",
            "block_shape",
            "crops",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselI0",
        "name": "BesselI0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselI0e",
        "name": "BesselI0e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselI1",
        "name": "BesselI1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselI1e",
        "name": "BesselI1e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselJ0",
        "name": "BesselJ0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselJ1",
        "name": "BesselJ1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselK0",
        "name": "BesselK0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselK0e",
        "name": "BesselK0e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselK1",
        "name": "BesselK1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselK1e",
        "name": "BesselK1e",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselY0",
        "name": "BesselY0",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BesselY1",
        "name": "BesselY1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Betainc",
        "name": "Betainc",
        "params": [
            "a",
            "b",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BiasAdd",
        "name": "BiasAdd",
        "params": [
            "value",
            "bias",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BiasAddGrad",
        "name": "BiasAddGrad",
        "params": [
            "out_backprop",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BiasAddV1",
        "name": "BiasAddV1",
        "params": [
            "value",
            "bias",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Bincount",
        "name": "Bincount",
        "params": [
            "arr",
            "size",
            "weights",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Bitcast",
        "name": "Bitcast",
        "params": [
            "input",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BitwiseAnd",
        "name": "BitwiseAnd",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BitwiseOr",
        "name": "BitwiseOr",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BitwiseXor",
        "name": "BitwiseXor",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BlockLSTM",
        "name": "BlockLSTM",
        "params": [
            "seq_len_max",
            "x",
            "cs_prev",
            "h_prev",
            "w",
            "wci",
            "wcf",
            "wco",
            "b",
            "forget_bias",
            "cell_clip",
            "use_peephole",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BlockLSTMGrad",
        "name": "BlockLSTMGrad",
        "params": [
            "seq_len_max",
            "x",
            "cs_prev",
            "h_prev",
            "w",
            "wci",
            "wcf",
            "wco",
            "b",
            "i",
            "cs",
            "f",
            "o",
            "ci",
            "co",
            "h",
            "cs_grad",
            "h_grad",
            "use_peephole",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BlockLSTMGradV2",
        "name": "BlockLSTMGradV2",
        "params": [
            "seq_len_max",
            "x",
            "cs_prev",
            "h_prev",
            "w",
            "wci",
            "wcf",
            "wco",
            "b",
            "i",
            "cs",
            "f",
            "o",
            "ci",
            "co",
            "h",
            "cs_grad",
            "h_grad",
            "use_peephole",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BlockLSTMV2",
        "name": "BlockLSTMV2",
        "params": [
            "seq_len_max",
            "x",
            "cs_prev",
            "h_prev",
            "w",
            "wci",
            "wcf",
            "wco",
            "b",
            "cell_clip",
            "use_peephole",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesAggregateStats",
        "name": "BoostedTreesAggregateStats",
        "params": [
            "node_ids",
            "gradients",
            "hessians",
            "feature",
            "max_splits",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesBucketize",
        "name": "BoostedTreesBucketize",
        "params": [
            "float_values",
            "bucket_boundaries",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesCalculateBestFeatureSplit",
        "name": "BoostedTreesCalculateBestFeatureSplit",
        "params": [
            "node_id_range",
            "stats_summary",
            "l1",
            "l2",
            "tree_complexity",
            "min_node_weight",
            "logits_dimension",
            "split_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesCalculateBestFeatureSplitV2",
        "name": "BoostedTreesCalculateBestFeatureSplitV2",
        "params": [
            "node_id_range",
            "stats_summaries_list",
            "split_types",
            "candidate_feature_ids",
            "l1",
            "l2",
            "tree_complexity",
            "min_node_weight",
            "logits_dimension",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesCalculateBestGainsPerFeature",
        "name": "BoostedTreesCalculateBestGainsPerFeature",
        "params": [
            "node_id_range",
            "stats_summary_list",
            "l1",
            "l2",
            "tree_complexity",
            "min_node_weight",
            "max_splits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesCenterBias",
        "name": "BoostedTreesCenterBias",
        "params": [
            "tree_ensemble_handle",
            "mean_gradients",
            "mean_hessians",
            "l1",
            "l2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesCreateEnsemble",
        "name": "BoostedTreesCreateEnsemble",
        "params": [
            "tree_ensemble_handle",
            "stamp_token",
            "tree_ensemble_serialized",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesCreateQuantileStreamResource",
        "name": "BoostedTreesCreateQuantileStreamResource",
        "params": [
            "quantile_stream_resource_handle",
            "epsilon",
            "num_streams",
            "max_elements",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesDeserializeEnsemble",
        "name": "BoostedTreesDeserializeEnsemble",
        "params": [
            "tree_ensemble_handle",
            "stamp_token",
            "tree_ensemble_serialized",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesEnsembleResourceHandleOp",
        "name": "BoostedTreesEnsembleResourceHandleOp",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesExampleDebugOutputs",
        "name": "BoostedTreesExampleDebugOutputs",
        "params": [
            "tree_ensemble_handle",
            "bucketized_features",
            "logits_dimension",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesFlushQuantileSummaries",
        "name": "BoostedTreesFlushQuantileSummaries",
        "params": [
            "quantile_stream_resource_handle",
            "num_features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesGetEnsembleStates",
        "name": "BoostedTreesGetEnsembleStates",
        "params": [
            "tree_ensemble_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesMakeQuantileSummaries",
        "name": "BoostedTreesMakeQuantileSummaries",
        "params": [
            "float_values",
            "example_weights",
            "epsilon",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesMakeStatsSummary",
        "name": "BoostedTreesMakeStatsSummary",
        "params": [
            "node_ids",
            "gradients",
            "hessians",
            "bucketized_features_list",
            "max_splits",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesPredict",
        "name": "BoostedTreesPredict",
        "params": [
            "tree_ensemble_handle",
            "bucketized_features",
            "logits_dimension",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesQuantileStreamResourceAddSummaries",
        "name": "BoostedTreesQuantileStreamResourceAddSummaries",
        "params": [
            "quantile_stream_resource_handle",
            "summaries",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesQuantileStreamResourceDeserialize",
        "name": "BoostedTreesQuantileStreamResourceDeserialize",
        "params": [
            "quantile_stream_resource_handle",
            "bucket_boundaries",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesQuantileStreamResourceFlush",
        "name": "BoostedTreesQuantileStreamResourceFlush",
        "params": [
            "quantile_stream_resource_handle",
            "num_buckets",
            "generate_quantiles",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesQuantileStreamResourceGetBucketBoundaries",
        "name": "BoostedTreesQuantileStreamResourceGetBucketBoundaries",
        "params": [
            "quantile_stream_resource_handle",
            "num_features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesQuantileStreamResourceHandleOp",
        "name": "BoostedTreesQuantileStreamResourceHandleOp",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesSerializeEnsemble",
        "name": "BoostedTreesSerializeEnsemble",
        "params": [
            "tree_ensemble_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesSparseAggregateStats",
        "name": "BoostedTreesSparseAggregateStats",
        "params": [
            "node_ids",
            "gradients",
            "hessians",
            "feature_indices",
            "feature_values",
            "feature_shape",
            "max_splits",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit",
        "name": "BoostedTreesSparseCalculateBestFeatureSplit",
        "params": [
            "node_id_range",
            "stats_summary_indices",
            "stats_summary_values",
            "stats_summary_shape",
            "l1",
            "l2",
            "tree_complexity",
            "min_node_weight",
            "logits_dimension",
            "split_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesTrainingPredict",
        "name": "BoostedTreesTrainingPredict",
        "params": [
            "tree_ensemble_handle",
            "cached_tree_ids",
            "cached_node_ids",
            "bucketized_features",
            "logits_dimension",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesUpdateEnsemble",
        "name": "BoostedTreesUpdateEnsemble",
        "params": [
            "tree_ensemble_handle",
            "feature_ids",
            "node_ids",
            "gains",
            "thresholds",
            "left_node_contribs",
            "right_node_contribs",
            "max_depth",
            "learning_rate",
            "pruning_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BoostedTreesUpdateEnsembleV2",
        "name": "BoostedTreesUpdateEnsembleV2",
        "params": [
            "tree_ensemble_handle",
            "feature_ids",
            "dimension_ids",
            "node_ids",
            "gains",
            "thresholds",
            "left_node_contribs",
            "right_node_contribs",
            "split_types",
            "max_depth",
            "learning_rate",
            "pruning_mode",
            "logits_dimension",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BroadcastArgs",
        "name": "BroadcastArgs",
        "params": [
            "s0",
            "s1",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BroadcastGradientArgs",
        "name": "BroadcastGradientArgs",
        "params": [
            "s0",
            "s1",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BroadcastTo",
        "name": "BroadcastTo",
        "params": [
            "input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Bucketize",
        "name": "Bucketize",
        "params": [
            "input",
            "boundaries",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.BytesProducedStatsDataset",
        "name": "BytesProducedStatsDataset",
        "params": [
            "input_dataset",
            "tag",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CSRSparseMatrixComponents",
        "name": "CSRSparseMatrixComponents",
        "params": [
            "csr_sparse_matrix",
            "index",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CSRSparseMatrixToDense",
        "name": "CSRSparseMatrixToDense",
        "params": [
            "sparse_input",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CSRSparseMatrixToSparseTensor",
        "name": "CSRSparseMatrixToSparseTensor",
        "params": [
            "sparse_matrix",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CSVDataset",
        "name": "CSVDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "record_defaults",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CSVDatasetV2",
        "name": "CSVDatasetV2",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "record_defaults",
            "exclude_cols",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CTCBeamSearchDecoder",
        "name": "CTCBeamSearchDecoder",
        "params": [
            "inputs",
            "sequence_length",
            "beam_width",
            "top_paths",
            "merge_repeated",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CTCGreedyDecoder",
        "name": "CTCGreedyDecoder",
        "params": [
            "inputs",
            "sequence_length",
            "merge_repeated",
            "blank_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CTCLoss",
        "name": "CTCLoss",
        "params": [
            "inputs",
            "labels_indices",
            "labels_values",
            "sequence_length",
            "preprocess_collapse_repeated",
            "ctc_merge_repeated",
            "ignore_longer_outputs_than_inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CTCLossV2",
        "name": "CTCLossV2",
        "params": [
            "inputs",
            "labels_indices",
            "labels_values",
            "sequence_length",
            "preprocess_collapse_repeated",
            "ctc_merge_repeated",
            "ignore_longer_outputs_than_inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CacheDataset",
        "name": "CacheDataset",
        "params": [
            "input_dataset",
            "filename",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CacheDatasetV2",
        "name": "CacheDatasetV2",
        "params": [
            "input_dataset",
            "filename",
            "cache",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Case",
        "name": "Case",
        "params": [
            "branch_index",
            "input",
            "Tout",
            "branches",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cast",
        "name": "Cast",
        "params": [
            "x",
            "DstT",
            "Truncate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Ceil",
        "name": "Ceil",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CheckNumerics",
        "name": "CheckNumerics",
        "params": [
            "tensor",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CheckNumericsV2",
        "name": "CheckNumericsV2",
        "params": [
            "tensor",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cholesky",
        "name": "Cholesky",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CholeskyGrad",
        "name": "CholeskyGrad",
        "params": [
            "l",
            "grad",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ChooseFastestBranchDataset",
        "name": "ChooseFastestBranchDataset",
        "params": [
            "input_dataset",
            "ratio_numerator",
            "ratio_denominator",
            "other_arguments",
            "num_elements_per_branch",
            "branches",
            "other_arguments_lengths",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ChooseFastestDataset",
        "name": "ChooseFastestDataset",
        "params": [
            "input_datasets",
            "num_experiments",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ClipByValue",
        "name": "ClipByValue",
        "params": [
            "t",
            "clip_value_min",
            "clip_value_max",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CloseSummaryWriter",
        "name": "CloseSummaryWriter",
        "params": [
            "writer",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveAllToAllV3",
        "name": "CollectiveAllToAllV3",
        "params": [
            "input",
            "communicator",
            "group_assignment",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveAssignGroupV2",
        "name": "CollectiveAssignGroupV2",
        "params": [
            "group_assignment",
            "device_index",
            "base_key",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveBcastRecv",
        "name": "CollectiveBcastRecv",
        "params": [
            "T",
            "group_size",
            "group_key",
            "instance_key",
            "shape",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveBcastRecvV2",
        "name": "CollectiveBcastRecvV2",
        "params": [
            "group_size",
            "group_key",
            "instance_key",
            "shape",
            "T",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveBcastSend",
        "name": "CollectiveBcastSend",
        "params": [
            "input",
            "group_size",
            "group_key",
            "instance_key",
            "shape",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveBcastSendV2",
        "name": "CollectiveBcastSendV2",
        "params": [
            "input",
            "group_size",
            "group_key",
            "instance_key",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveGather",
        "name": "CollectiveGather",
        "params": [
            "input",
            "group_size",
            "group_key",
            "instance_key",
            "shape",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveGatherV2",
        "name": "CollectiveGatherV2",
        "params": [
            "input",
            "group_size",
            "group_key",
            "instance_key",
            "ordering_token",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveInitializeCommunicator",
        "name": "CollectiveInitializeCommunicator",
        "params": [
            "group_key",
            "rank",
            "group_size",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectivePermute",
        "name": "CollectivePermute",
        "params": [
            "input",
            "source_target_pairs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveReduce",
        "name": "CollectiveReduce",
        "params": [
            "input",
            "group_size",
            "group_key",
            "instance_key",
            "merge_op",
            "final_op",
            "subdiv_offsets",
            "wait_for",
            "communication_hint",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveReduceV2",
        "name": "CollectiveReduceV2",
        "params": [
            "input",
            "group_size",
            "group_key",
            "instance_key",
            "ordering_token",
            "merge_op",
            "final_op",
            "communication_hint",
            "timeout_seconds",
            "max_subdivs_per_device",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CollectiveReduceV3",
        "name": "CollectiveReduceV3",
        "params": [
            "input",
            "communicator",
            "group_assignment",
            "reduction",
            "timeout_seconds",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CombinedNonMaxSuppression",
        "name": "CombinedNonMaxSuppression",
        "params": [
            "boxes",
            "scores",
            "max_output_size_per_class",
            "max_total_size",
            "iou_threshold",
            "score_threshold",
            "pad_per_class",
            "clip_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Complex",
        "name": "Complex",
        "params": [
            "real",
            "imag",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ComplexAbs",
        "name": "ComplexAbs",
        "params": [
            "x",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CompositeTensorVariantFromComponents",
        "name": "CompositeTensorVariantFromComponents",
        "params": [
            "components",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CompositeTensorVariantToComponents",
        "name": "CompositeTensorVariantToComponents",
        "params": [
            "encoded",
            "metadata",
            "Tcomponents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CompressElement",
        "name": "CompressElement",
        "params": [
            "components",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ComputeAccidentalHits",
        "name": "ComputeAccidentalHits",
        "params": [
            "true_classes",
            "sampled_candidates",
            "num_true",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ComputeBatchSize",
        "name": "ComputeBatchSize",
        "params": [
            "input_dataset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Concat",
        "name": "Concat",
        "params": [
            "concat_dim",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConcatOffset",
        "name": "ConcatOffset",
        "params": [
            "concat_dim",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConcatV2",
        "name": "ConcatV2",
        "params": [
            "values",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConcatenateDataset",
        "name": "ConcatenateDataset",
        "params": [
            "input_dataset",
            "another_dataset",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConditionalAccumulator",
        "name": "ConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "container",
            "shared_name",
            "reduction_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConfigureDistributedTPU",
        "name": "ConfigureDistributedTPU",
        "params": [
            "embedding_config",
            "tpu_embedding_config",
            "is_global_init",
            "enable_whole_mesh_compilations",
            "compilation_failure_closes_chips",
            "tpu_cancellation_closes_chips",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConfigureTPUEmbedding",
        "name": "ConfigureTPUEmbedding",
        "params": [
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conj",
        "name": "Conj",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConjugateTranspose",
        "name": "ConjugateTranspose",
        "params": [
            "x",
            "perm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Const",
        "name": "Const",
        "params": [
            "value",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ConsumeMutexLock",
        "name": "ConsumeMutexLock",
        "params": [
            "mutex_lock",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ControlTrigger",
        "name": "ControlTrigger",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv2D",
        "name": "Conv2D",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "use_cudnn_on_gpu",
            "explicit_paddings",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv2DBackpropFilter",
        "name": "Conv2DBackpropFilter",
        "params": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides",
            "padding",
            "use_cudnn_on_gpu",
            "explicit_paddings",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv2DBackpropInput",
        "name": "Conv2DBackpropInput",
        "params": [
            "input_sizes",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "use_cudnn_on_gpu",
            "explicit_paddings",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv3D",
        "name": "Conv3D",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv3DBackpropFilter",
        "name": "Conv3DBackpropFilter",
        "params": [
            "input",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv3DBackpropFilterV2",
        "name": "Conv3DBackpropFilterV2",
        "params": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv3DBackpropInput",
        "name": "Conv3DBackpropInput",
        "params": [
            "input",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Conv3DBackpropInputV2",
        "name": "Conv3DBackpropInputV2",
        "params": [
            "input_sizes",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Copy",
        "name": "Copy",
        "params": [
            "input",
            "tensor_name",
            "debug_ops_spec",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CopyHost",
        "name": "CopyHost",
        "params": [
            "input",
            "tensor_name",
            "debug_ops_spec",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cos",
        "name": "Cos",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cosh",
        "name": "Cosh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CountUpTo",
        "name": "CountUpTo",
        "params": [
            "ref",
            "limit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CreateSummaryDbWriter",
        "name": "CreateSummaryDbWriter",
        "params": [
            "writer",
            "db_uri",
            "experiment_name",
            "run_name",
            "user_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CreateSummaryFileWriter",
        "name": "CreateSummaryFileWriter",
        "params": [
            "writer",
            "logdir",
            "max_queue",
            "flush_millis",
            "filename_suffix",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CropAndResize",
        "name": "CropAndResize",
        "params": [
            "image",
            "boxes",
            "box_ind",
            "crop_size",
            "method",
            "extrapolation_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CropAndResizeGradBoxes",
        "name": "CropAndResizeGradBoxes",
        "params": [
            "grads",
            "image",
            "boxes",
            "box_ind",
            "method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CropAndResizeGradImage",
        "name": "CropAndResizeGradImage",
        "params": [
            "grads",
            "boxes",
            "box_ind",
            "image_size",
            "T",
            "method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cross",
        "name": "Cross",
        "params": [
            "a",
            "b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CrossReplicaSum",
        "name": "CrossReplicaSum",
        "params": [
            "input",
            "group_assignment",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNN",
        "name": "CudnnRNN",
        "params": [
            "input",
            "input_h",
            "input_c",
            "params",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNBackprop",
        "name": "CudnnRNNBackprop",
        "params": [
            "input",
            "input_h",
            "input_c",
            "params",
            "output",
            "output_h",
            "output_c",
            "output_backprop",
            "output_h_backprop",
            "output_c_backprop",
            "reserve_space",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNBackpropV2",
        "name": "CudnnRNNBackpropV2",
        "params": [
            "input",
            "input_h",
            "input_c",
            "params",
            "output",
            "output_h",
            "output_c",
            "output_backprop",
            "output_h_backprop",
            "output_c_backprop",
            "reserve_space",
            "host_reserved",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNBackpropV3",
        "name": "CudnnRNNBackpropV3",
        "params": [
            "input",
            "input_h",
            "input_c",
            "params",
            "sequence_lengths",
            "output",
            "output_h",
            "output_c",
            "output_backprop",
            "output_h_backprop",
            "output_c_backprop",
            "reserve_space",
            "host_reserved",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "num_proj",
            "time_major",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNCanonicalToParams",
        "name": "CudnnRNNCanonicalToParams",
        "params": [
            "num_layers",
            "num_units",
            "input_size",
            "weights",
            "biases",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNCanonicalToParamsV2",
        "name": "CudnnRNNCanonicalToParamsV2",
        "params": [
            "num_layers",
            "num_units",
            "input_size",
            "weights",
            "biases",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "num_proj",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNParamsSize",
        "name": "CudnnRNNParamsSize",
        "params": [
            "num_layers",
            "num_units",
            "input_size",
            "T",
            "S",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "num_proj",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNParamsToCanonical",
        "name": "CudnnRNNParamsToCanonical",
        "params": [
            "num_layers",
            "num_units",
            "input_size",
            "params",
            "num_params",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNParamsToCanonicalV2",
        "name": "CudnnRNNParamsToCanonicalV2",
        "params": [
            "num_layers",
            "num_units",
            "input_size",
            "params",
            "num_params_weights",
            "num_params_biases",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "num_proj",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNV2",
        "name": "CudnnRNNV2",
        "params": [
            "input",
            "input_h",
            "input_c",
            "params",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CudnnRNNV3",
        "name": "CudnnRNNV3",
        "params": [
            "input",
            "input_h",
            "input_c",
            "params",
            "sequence_lengths",
            "rnn_mode",
            "input_mode",
            "direction",
            "dropout",
            "seed",
            "seed2",
            "num_proj",
            "is_training",
            "time_major",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cumprod",
        "name": "Cumprod",
        "params": [
            "x",
            "axis",
            "exclusive",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Cumsum",
        "name": "Cumsum",
        "params": [
            "x",
            "axis",
            "exclusive",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.CumulativeLogsumexp",
        "name": "CumulativeLogsumexp",
        "params": [
            "x",
            "axis",
            "exclusive",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DataFormatDimMap",
        "name": "DataFormatDimMap",
        "params": [
            "x",
            "src_format",
            "dst_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DataFormatVecPermute",
        "name": "DataFormatVecPermute",
        "params": [
            "x",
            "src_format",
            "dst_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DataServiceDataset",
        "name": "DataServiceDataset",
        "params": [
            "dataset_id",
            "processing_mode",
            "address",
            "protocol",
            "job_name",
            "max_outstanding_requests",
            "iteration_counter",
            "output_types",
            "output_shapes",
            "task_refresh_interval_hint_ms",
            "data_transfer_protocol",
            "target_workers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DataServiceDatasetV2",
        "name": "DataServiceDatasetV2",
        "params": [
            "dataset_id",
            "processing_mode",
            "address",
            "protocol",
            "job_name",
            "consumer_index",
            "num_consumers",
            "max_outstanding_requests",
            "iteration_counter",
            "output_types",
            "output_shapes",
            "task_refresh_interval_hint_ms",
            "data_transfer_protocol",
            "target_workers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DataServiceDatasetV3",
        "name": "DataServiceDatasetV3",
        "params": [
            "dataset_id",
            "processing_mode",
            "address",
            "protocol",
            "job_name",
            "consumer_index",
            "num_consumers",
            "max_outstanding_requests",
            "iteration_counter",
            "output_types",
            "output_shapes",
            "uncompress_fn",
            "task_refresh_interval_hint_ms",
            "data_transfer_protocol",
            "target_workers",
            "uncompress",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DatasetCardinality",
        "name": "DatasetCardinality",
        "params": [
            "input_dataset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DatasetFromGraph",
        "name": "DatasetFromGraph",
        "params": [
            "graph_def",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DatasetToGraph",
        "name": "DatasetToGraph",
        "params": [
            "input_dataset",
            "stateful_whitelist",
            "allow_stateful",
            "strip_device_assignment",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DatasetToGraphV2",
        "name": "DatasetToGraphV2",
        "params": [
            "input_dataset",
            "external_state_policy",
            "strip_device_assignment",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DatasetToSingleElement",
        "name": "DatasetToSingleElement",
        "params": [
            "dataset",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DatasetToTFRecord",
        "name": "DatasetToTFRecord",
        "params": [
            "input_dataset",
            "filename",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Dawsn",
        "name": "Dawsn",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugGradientIdentity",
        "name": "DebugGradientIdentity",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugGradientRefIdentity",
        "name": "DebugGradientRefIdentity",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugIdentity",
        "name": "DebugIdentity",
        "params": [
            "input",
            "device_name",
            "tensor_name",
            "debug_urls",
            "gated_grpc",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugIdentityV2",
        "name": "DebugIdentityV2",
        "params": [
            "input",
            "tfdbg_context_id",
            "op_name",
            "output_slot",
            "tensor_debug_mode",
            "debug_urls",
            "circular_buffer_size",
            "tfdbg_run_id",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugNanCount",
        "name": "DebugNanCount",
        "params": [
            "input",
            "device_name",
            "tensor_name",
            "debug_urls",
            "gated_grpc",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugNumericSummary",
        "name": "DebugNumericSummary",
        "params": [
            "input",
            "device_name",
            "tensor_name",
            "debug_urls",
            "lower_bound",
            "upper_bound",
            "mute_if_healthy",
            "gated_grpc",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DebugNumericSummaryV2",
        "name": "DebugNumericSummaryV2",
        "params": [
            "input",
            "output_dtype",
            "tensor_debug_mode",
            "tensor_id",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeAndCropJpeg",
        "name": "DecodeAndCropJpeg",
        "params": [
            "contents",
            "crop_window",
            "channels",
            "ratio",
            "fancy_upscaling",
            "try_recover_truncated",
            "acceptable_fraction",
            "dct_method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeBase64",
        "name": "DecodeBase64",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeBmp",
        "name": "DecodeBmp",
        "params": [
            "contents",
            "channels",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeCSV",
        "name": "DecodeCSV",
        "params": [
            "records",
            "record_defaults",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeCompressed",
        "name": "DecodeCompressed",
        "params": [
            "bytes",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeGif",
        "name": "DecodeGif",
        "params": [
            "contents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeImage",
        "name": "DecodeImage",
        "params": [
            "contents",
            "channels",
            "dtype",
            "expand_animations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeJSONExample",
        "name": "DecodeJSONExample",
        "params": [
            "json_examples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeJpeg",
        "name": "DecodeJpeg",
        "params": [
            "contents",
            "channels",
            "ratio",
            "fancy_upscaling",
            "try_recover_truncated",
            "acceptable_fraction",
            "dct_method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodePaddedRaw",
        "name": "DecodePaddedRaw",
        "params": [
            "input_bytes",
            "fixed_length",
            "out_type",
            "little_endian",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodePng",
        "name": "DecodePng",
        "params": [
            "contents",
            "channels",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeProtoV2",
        "name": "DecodeProtoV2",
        "params": [
            "bytes",
            "message_type",
            "field_names",
            "output_types",
            "descriptor_source",
            "message_format",
            "sanitize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeRaw",
        "name": "DecodeRaw",
        "params": [
            "bytes",
            "out_type",
            "little_endian",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DecodeWav",
        "name": "DecodeWav",
        "params": [
            "contents",
            "desired_channels",
            "desired_samples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeepCopy",
        "name": "DeepCopy",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeleteIterator",
        "name": "DeleteIterator",
        "params": [
            "handle",
            "deleter",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeleteMemoryCache",
        "name": "DeleteMemoryCache",
        "params": [
            "handle",
            "deleter",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeleteMultiDeviceIterator",
        "name": "DeleteMultiDeviceIterator",
        "params": [
            "multi_device_iterator",
            "iterators",
            "deleter",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeleteRandomSeedGenerator",
        "name": "DeleteRandomSeedGenerator",
        "params": [
            "handle",
            "deleter",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeleteSeedGenerator",
        "name": "DeleteSeedGenerator",
        "params": [
            "handle",
            "deleter",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeleteSessionTensor",
        "name": "DeleteSessionTensor",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DenseBincount",
        "name": "DenseBincount",
        "params": [
            "input",
            "size",
            "weights",
            "binary_output",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DenseCountSparseOutput",
        "name": "DenseCountSparseOutput",
        "params": [
            "values",
            "weights",
            "binary_output",
            "minlength",
            "maxlength",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DenseToCSRSparseMatrix",
        "name": "DenseToCSRSparseMatrix",
        "params": [
            "dense_input",
            "indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DenseToDenseSetOperation",
        "name": "DenseToDenseSetOperation",
        "params": [
            "set1",
            "set2",
            "set_operation",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DenseToSparseBatchDataset",
        "name": "DenseToSparseBatchDataset",
        "params": [
            "input_dataset",
            "batch_size",
            "row_shape",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DenseToSparseSetOperation",
        "name": "DenseToSparseSetOperation",
        "params": [
            "set1",
            "set2_indices",
            "set2_values",
            "set2_shape",
            "set_operation",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DepthToSpace",
        "name": "DepthToSpace",
        "params": [
            "input",
            "block_size",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DepthwiseConv2dNative",
        "name": "DepthwiseConv2dNative",
        "params": [
            "input",
            "filter",
            "strides",
            "padding",
            "explicit_paddings",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DepthwiseConv2dNativeBackpropFilter",
        "name": "DepthwiseConv2dNativeBackpropFilter",
        "params": [
            "input",
            "filter_sizes",
            "out_backprop",
            "strides",
            "padding",
            "explicit_paddings",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DepthwiseConv2dNativeBackpropInput",
        "name": "DepthwiseConv2dNativeBackpropInput",
        "params": [
            "input_sizes",
            "filter",
            "out_backprop",
            "strides",
            "padding",
            "explicit_paddings",
            "data_format",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Dequantize",
        "name": "Dequantize",
        "params": [
            "input",
            "min_range",
            "max_range",
            "mode",
            "narrow_range",
            "axis",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeserializeIterator",
        "name": "DeserializeIterator",
        "params": [
            "resource_handle",
            "serialized",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeserializeManySparse",
        "name": "DeserializeManySparse",
        "params": [
            "serialized_sparse",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeserializeSparse",
        "name": "DeserializeSparse",
        "params": [
            "serialized_sparse",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DestroyResourceOp",
        "name": "DestroyResourceOp",
        "params": [
            "resource",
            "ignore_lookup_error",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DestroyTemporaryVariable",
        "name": "DestroyTemporaryVariable",
        "params": [
            "ref",
            "var_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DeviceIndex",
        "name": "DeviceIndex",
        "params": [
            "device_names",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Diag",
        "name": "Diag",
        "params": [
            "diagonal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DiagPart",
        "name": "DiagPart",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Digamma",
        "name": "Digamma",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Dilation2D",
        "name": "Dilation2D",
        "params": [
            "input",
            "filter",
            "strides",
            "rates",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Dilation2DBackpropFilter",
        "name": "Dilation2DBackpropFilter",
        "params": [
            "input",
            "filter",
            "out_backprop",
            "strides",
            "rates",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Dilation2DBackpropInput",
        "name": "Dilation2DBackpropInput",
        "params": [
            "input",
            "filter",
            "out_backprop",
            "strides",
            "rates",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DirectedInterleaveDataset",
        "name": "DirectedInterleaveDataset",
        "params": [
            "selector_input_dataset",
            "data_input_datasets",
            "output_types",
            "output_shapes",
            "stop_on_empty_dataset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Div",
        "name": "Div",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DivNoNan",
        "name": "DivNoNan",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DrawBoundingBoxes",
        "name": "DrawBoundingBoxes",
        "params": [
            "images",
            "boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DrawBoundingBoxesV2",
        "name": "DrawBoundingBoxesV2",
        "params": [
            "images",
            "boxes",
            "colors",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DummyIterationCounter",
        "name": "DummyIterationCounter",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DummyMemoryCache",
        "name": "DummyMemoryCache",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DummySeedGenerator",
        "name": "DummySeedGenerator",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DynamicEnqueueTPUEmbeddingArbitraryTensorBatch",
        "name": "DynamicEnqueueTPUEmbeddingArbitraryTensorBatch",
        "params": [
            "sample_indices_or_row_splits",
            "embedding_indices",
            "aggregation_weights",
            "mode_override",
            "device_ordinal",
            "combiners",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DynamicPartition",
        "name": "DynamicPartition",
        "params": [
            "data",
            "partitions",
            "num_partitions",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.DynamicStitch",
        "name": "DynamicStitch",
        "params": [
            "indices",
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EagerPyFunc",
        "name": "EagerPyFunc",
        "params": [
            "input",
            "token",
            "Tout",
            "is_async",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EditDistance",
        "name": "EditDistance",
        "params": [
            "hypothesis_indices",
            "hypothesis_values",
            "hypothesis_shape",
            "truth_indices",
            "truth_values",
            "truth_shape",
            "normalize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Eig",
        "name": "Eig",
        "params": [
            "input",
            "Tout",
            "compute_v",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Einsum",
        "name": "Einsum",
        "params": [
            "inputs",
            "equation",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Elu",
        "name": "Elu",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EluGrad",
        "name": "EluGrad",
        "params": [
            "gradients",
            "outputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Empty",
        "name": "Empty",
        "params": [
            "shape",
            "dtype",
            "init",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EmptyTensorList",
        "name": "EmptyTensorList",
        "params": [
            "element_shape",
            "max_num_elements",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EncodeBase64",
        "name": "EncodeBase64",
        "params": [
            "input",
            "pad",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EncodeJpeg",
        "name": "EncodeJpeg",
        "params": [
            "image",
            "format",
            "quality",
            "progressive",
            "optimize_size",
            "chroma_downsampling",
            "density_unit",
            "x_density",
            "y_density",
            "xmp_metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EncodeJpegVariableQuality",
        "name": "EncodeJpegVariableQuality",
        "params": [
            "images",
            "quality",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EncodePng",
        "name": "EncodePng",
        "params": [
            "image",
            "compression",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EncodeProto",
        "name": "EncodeProto",
        "params": [
            "sizes",
            "values",
            "field_names",
            "message_type",
            "descriptor_source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EncodeWav",
        "name": "EncodeWav",
        "params": [
            "audio",
            "sample_rate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EnqueueTPUEmbeddingArbitraryTensorBatch",
        "name": "EnqueueTPUEmbeddingArbitraryTensorBatch",
        "params": [
            "sample_indices_or_row_splits",
            "embedding_indices",
            "aggregation_weights",
            "mode_override",
            "device_ordinal",
            "combiners",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EnqueueTPUEmbeddingIntegerBatch",
        "name": "EnqueueTPUEmbeddingIntegerBatch",
        "params": [
            "batch",
            "mode_override",
            "device_ordinal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EnqueueTPUEmbeddingRaggedTensorBatch",
        "name": "EnqueueTPUEmbeddingRaggedTensorBatch",
        "params": [
            "sample_splits",
            "embedding_indices",
            "aggregation_weights",
            "mode_override",
            "table_ids",
            "device_ordinal",
            "combiners",
            "max_sequence_lengths",
            "num_features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EnqueueTPUEmbeddingSparseBatch",
        "name": "EnqueueTPUEmbeddingSparseBatch",
        "params": [
            "sample_indices",
            "embedding_indices",
            "aggregation_weights",
            "mode_override",
            "device_ordinal",
            "combiners",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EnqueueTPUEmbeddingSparseTensorBatch",
        "name": "EnqueueTPUEmbeddingSparseTensorBatch",
        "params": [
            "sample_indices",
            "embedding_indices",
            "aggregation_weights",
            "mode_override",
            "table_ids",
            "device_ordinal",
            "combiners",
            "max_sequence_lengths",
            "num_features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EnsureShape",
        "name": "EnsureShape",
        "params": [
            "input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Enter",
        "name": "Enter",
        "params": [
            "data",
            "frame_name",
            "is_constant",
            "parallel_iterations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Equal",
        "name": "Equal",
        "params": [
            "x",
            "y",
            "incompatible_shape_error",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Erf",
        "name": "Erf",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Erfc",
        "name": "Erfc",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Erfinv",
        "name": "Erfinv",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.EuclideanNorm",
        "name": "EuclideanNorm",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Exit",
        "name": "Exit",
        "params": [
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Exp",
        "name": "Exp",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExpandDims",
        "name": "ExpandDims",
        "params": [
            "input",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalAssertNextDataset",
        "name": "ExperimentalAssertNextDataset",
        "params": [
            "input_dataset",
            "transformations",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalAutoShardDataset",
        "name": "ExperimentalAutoShardDataset",
        "params": [
            "input_dataset",
            "num_workers",
            "index",
            "output_types",
            "output_shapes",
            "auto_shard_policy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalBytesProducedStatsDataset",
        "name": "ExperimentalBytesProducedStatsDataset",
        "params": [
            "input_dataset",
            "tag",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalCSVDataset",
        "name": "ExperimentalCSVDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "record_defaults",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalChooseFastestDataset",
        "name": "ExperimentalChooseFastestDataset",
        "params": [
            "input_datasets",
            "num_experiments",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalDatasetCardinality",
        "name": "ExperimentalDatasetCardinality",
        "params": [
            "input_dataset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalDatasetToTFRecord",
        "name": "ExperimentalDatasetToTFRecord",
        "params": [
            "input_dataset",
            "filename",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalDenseToSparseBatchDataset",
        "name": "ExperimentalDenseToSparseBatchDataset",
        "params": [
            "input_dataset",
            "batch_size",
            "row_shape",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalDirectedInterleaveDataset",
        "name": "ExperimentalDirectedInterleaveDataset",
        "params": [
            "selector_input_dataset",
            "data_input_datasets",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalGroupByReducerDataset",
        "name": "ExperimentalGroupByReducerDataset",
        "params": [
            "input_dataset",
            "key_func_other_arguments",
            "init_func_other_arguments",
            "reduce_func_other_arguments",
            "finalize_func_other_arguments",
            "key_func",
            "init_func",
            "reduce_func",
            "finalize_func",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalGroupByWindowDataset",
        "name": "ExperimentalGroupByWindowDataset",
        "params": [
            "input_dataset",
            "key_func_other_arguments",
            "reduce_func_other_arguments",
            "window_size_func_other_arguments",
            "key_func",
            "reduce_func",
            "window_size_func",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalIgnoreErrorsDataset",
        "name": "ExperimentalIgnoreErrorsDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "log_warning",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalIteratorGetDevice",
        "name": "ExperimentalIteratorGetDevice",
        "params": [
            "resource",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalLMDBDataset",
        "name": "ExperimentalLMDBDataset",
        "params": [
            "filenames",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalLatencyStatsDataset",
        "name": "ExperimentalLatencyStatsDataset",
        "params": [
            "input_dataset",
            "tag",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalMapAndBatchDataset",
        "name": "ExperimentalMapAndBatchDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "batch_size",
            "num_parallel_calls",
            "drop_remainder",
            "f",
            "output_types",
            "output_shapes",
            "preserve_cardinality",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalMapDataset",
        "name": "ExperimentalMapDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "f",
            "output_types",
            "output_shapes",
            "use_inter_op_parallelism",
            "preserve_cardinality",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalMatchingFilesDataset",
        "name": "ExperimentalMatchingFilesDataset",
        "params": [
            "patterns",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalMaxIntraOpParallelismDataset",
        "name": "ExperimentalMaxIntraOpParallelismDataset",
        "params": [
            "input_dataset",
            "max_intra_op_parallelism",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalNonSerializableDataset",
        "name": "ExperimentalNonSerializableDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalParallelInterleaveDataset",
        "name": "ExperimentalParallelInterleaveDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "sloppy",
            "buffer_output_elements",
            "prefetch_input_elements",
            "f",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalParseExampleDataset",
        "name": "ExperimentalParseExampleDataset",
        "params": [
            "input_dataset",
            "num_parallel_calls",
            "dense_defaults",
            "sparse_keys",
            "dense_keys",
            "sparse_types",
            "dense_shapes",
            "output_types",
            "output_shapes",
            "sloppy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalPrivateThreadPoolDataset",
        "name": "ExperimentalPrivateThreadPoolDataset",
        "params": [
            "input_dataset",
            "num_threads",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalRandomDataset",
        "name": "ExperimentalRandomDataset",
        "params": [
            "seed",
            "seed2",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalRebatchDataset",
        "name": "ExperimentalRebatchDataset",
        "params": [
            "input_dataset",
            "num_replicas",
            "output_types",
            "output_shapes",
            "use_fallback",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalScanDataset",
        "name": "ExperimentalScanDataset",
        "params": [
            "input_dataset",
            "initial_state",
            "other_arguments",
            "f",
            "output_types",
            "output_shapes",
            "preserve_cardinality",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalSetStatsAggregatorDataset",
        "name": "ExperimentalSetStatsAggregatorDataset",
        "params": [
            "input_dataset",
            "stats_aggregator",
            "tag",
            "counter_prefix",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalSleepDataset",
        "name": "ExperimentalSleepDataset",
        "params": [
            "input_dataset",
            "sleep_microseconds",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalSlidingWindowDataset",
        "name": "ExperimentalSlidingWindowDataset",
        "params": [
            "input_dataset",
            "window_size",
            "window_shift",
            "window_stride",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalSqlDataset",
        "name": "ExperimentalSqlDataset",
        "params": [
            "driver_name",
            "data_source_name",
            "query",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalStatsAggregatorHandle",
        "name": "ExperimentalStatsAggregatorHandle",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalStatsAggregatorSummary",
        "name": "ExperimentalStatsAggregatorSummary",
        "params": [
            "iterator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalTakeWhileDataset",
        "name": "ExperimentalTakeWhileDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "predicate",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalThreadPoolDataset",
        "name": "ExperimentalThreadPoolDataset",
        "params": [
            "input_dataset",
            "thread_pool",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalThreadPoolHandle",
        "name": "ExperimentalThreadPoolHandle",
        "params": [
            "num_threads",
            "display_name",
            "max_intra_op_parallelism",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalUnbatchDataset",
        "name": "ExperimentalUnbatchDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExperimentalUniqueDataset",
        "name": "ExperimentalUniqueDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Expint",
        "name": "Expint",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Expm1",
        "name": "Expm1",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExtractGlimpse",
        "name": "ExtractGlimpse",
        "params": [
            "input",
            "size",
            "offsets",
            "centered",
            "normalized",
            "uniform_noise",
            "noise",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExtractGlimpseV2",
        "name": "ExtractGlimpseV2",
        "params": [
            "input",
            "size",
            "offsets",
            "centered",
            "normalized",
            "uniform_noise",
            "noise",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExtractImagePatches",
        "name": "ExtractImagePatches",
        "params": [
            "images",
            "ksizes",
            "strides",
            "rates",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExtractJpegShape",
        "name": "ExtractJpegShape",
        "params": [
            "contents",
            "output_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ExtractVolumePatches",
        "name": "ExtractVolumePatches",
        "params": [
            "input",
            "ksizes",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FFT",
        "name": "FFT",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FFT2D",
        "name": "FFT2D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FFT3D",
        "name": "FFT3D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FIFOQueue",
        "name": "FIFOQueue",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FIFOQueueV2",
        "name": "FIFOQueueV2",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Fact",
        "name": "Fact",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeParam",
        "name": "FakeParam",
        "params": [
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQuantWithMinMaxArgs",
        "name": "FakeQuantWithMinMaxArgs",
        "params": [
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQuantWithMinMaxArgsGradient",
        "name": "FakeQuantWithMinMaxArgsGradient",
        "params": [
            "gradients",
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQuantWithMinMaxVars",
        "name": "FakeQuantWithMinMaxVars",
        "params": [
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQuantWithMinMaxVarsGradient",
        "name": "FakeQuantWithMinMaxVarsGradient",
        "params": [
            "gradients",
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQuantWithMinMaxVarsPerChannel",
        "name": "FakeQuantWithMinMaxVarsPerChannel",
        "params": [
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQuantWithMinMaxVarsPerChannelGradient",
        "name": "FakeQuantWithMinMaxVarsPerChannelGradient",
        "params": [
            "gradients",
            "inputs",
            "min",
            "max",
            "num_bits",
            "narrow_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FakeQueue",
        "name": "FakeQueue",
        "params": [
            "resource",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Fill",
        "name": "Fill",
        "params": [
            "dims",
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FilterByLastComponentDataset",
        "name": "FilterByLastComponentDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FilterDataset",
        "name": "FilterDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "predicate",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FinalizeDataset",
        "name": "FinalizeDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "has_captured_ref",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Fingerprint",
        "name": "Fingerprint",
        "params": [
            "data",
            "method",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FixedLengthRecordDataset",
        "name": "FixedLengthRecordDataset",
        "params": [
            "filenames",
            "header_bytes",
            "record_bytes",
            "footer_bytes",
            "buffer_size",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FixedLengthRecordDatasetV2",
        "name": "FixedLengthRecordDatasetV2",
        "params": [
            "filenames",
            "header_bytes",
            "record_bytes",
            "footer_bytes",
            "buffer_size",
            "compression_type",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FixedLengthRecordReader",
        "name": "FixedLengthRecordReader",
        "params": [
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "hop_bytes",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FixedLengthRecordReaderV2",
        "name": "FixedLengthRecordReaderV2",
        "params": [
            "record_bytes",
            "header_bytes",
            "footer_bytes",
            "hop_bytes",
            "container",
            "shared_name",
            "encoding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FixedUnigramCandidateSampler",
        "name": "FixedUnigramCandidateSampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "vocab_file",
            "distortion",
            "num_reserved_ids",
            "num_shards",
            "shard",
            "unigrams",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FlatMapDataset",
        "name": "FlatMapDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "f",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Floor",
        "name": "Floor",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FloorDiv",
        "name": "FloorDiv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FloorMod",
        "name": "FloorMod",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FlushSummaryWriter",
        "name": "FlushSummaryWriter",
        "params": [
            "writer",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.For",
        "name": "For",
        "params": [
            "start",
            "limit",
            "delta",
            "input",
            "body",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FractionalAvgPool",
        "name": "FractionalAvgPool",
        "params": [
            "value",
            "pooling_ratio",
            "pseudo_random",
            "overlapping",
            "deterministic",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FractionalAvgPoolGrad",
        "name": "FractionalAvgPoolGrad",
        "params": [
            "orig_input_tensor_shape",
            "out_backprop",
            "row_pooling_sequence",
            "col_pooling_sequence",
            "overlapping",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FractionalMaxPool",
        "name": "FractionalMaxPool",
        "params": [
            "value",
            "pooling_ratio",
            "pseudo_random",
            "overlapping",
            "deterministic",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FractionalMaxPoolGrad",
        "name": "FractionalMaxPoolGrad",
        "params": [
            "orig_input",
            "orig_output",
            "out_backprop",
            "row_pooling_sequence",
            "col_pooling_sequence",
            "overlapping",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FresnelCos",
        "name": "FresnelCos",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FresnelSin",
        "name": "FresnelSin",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedBatchNorm",
        "name": "FusedBatchNorm",
        "params": [
            "x",
            "scale",
            "offset",
            "mean",
            "variance",
            "epsilon",
            "exponential_avg_factor",
            "data_format",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedBatchNormGrad",
        "name": "FusedBatchNormGrad",
        "params": [
            "y_backprop",
            "x",
            "scale",
            "reserve_space_1",
            "reserve_space_2",
            "epsilon",
            "data_format",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedBatchNormGradV2",
        "name": "FusedBatchNormGradV2",
        "params": [
            "y_backprop",
            "x",
            "scale",
            "reserve_space_1",
            "reserve_space_2",
            "epsilon",
            "data_format",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedBatchNormGradV3",
        "name": "FusedBatchNormGradV3",
        "params": [
            "y_backprop",
            "x",
            "scale",
            "reserve_space_1",
            "reserve_space_2",
            "reserve_space_3",
            "epsilon",
            "data_format",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedBatchNormV2",
        "name": "FusedBatchNormV2",
        "params": [
            "x",
            "scale",
            "offset",
            "mean",
            "variance",
            "epsilon",
            "exponential_avg_factor",
            "data_format",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedBatchNormV3",
        "name": "FusedBatchNormV3",
        "params": [
            "x",
            "scale",
            "offset",
            "mean",
            "variance",
            "epsilon",
            "exponential_avg_factor",
            "data_format",
            "is_training",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedPadConv2D",
        "name": "FusedPadConv2D",
        "params": [
            "input",
            "paddings",
            "filter",
            "mode",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.FusedResizeAndPadConv2D",
        "name": "FusedResizeAndPadConv2D",
        "params": [
            "input",
            "size",
            "paddings",
            "filter",
            "mode",
            "strides",
            "padding",
            "resize_align_corners",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GRUBlockCell",
        "name": "GRUBlockCell",
        "params": [
            "x",
            "h_prev",
            "w_ru",
            "w_c",
            "b_ru",
            "b_c",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GRUBlockCellGrad",
        "name": "GRUBlockCellGrad",
        "params": [
            "x",
            "h_prev",
            "w_ru",
            "w_c",
            "b_ru",
            "b_c",
            "r",
            "u",
            "c",
            "d_h",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Gather",
        "name": "Gather",
        "params": [
            "params",
            "indices",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GatherNd",
        "name": "GatherNd",
        "params": [
            "params",
            "indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GatherV2",
        "name": "GatherV2",
        "params": [
            "params",
            "indices",
            "axis",
            "batch_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GenerateBoundingBoxProposals",
        "name": "GenerateBoundingBoxProposals",
        "params": [
            "scores",
            "bbox_deltas",
            "image_info",
            "anchors",
            "nms_threshold",
            "pre_nms_topn",
            "min_size",
            "post_nms_topn",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GenerateVocabRemapping",
        "name": "GenerateVocabRemapping",
        "params": [
            "new_vocab_file",
            "old_vocab_file",
            "new_vocab_offset",
            "num_new_vocab",
            "old_vocab_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GeneratorDataset",
        "name": "GeneratorDataset",
        "params": [
            "init_func_other_args",
            "next_func_other_args",
            "finalize_func_other_args",
            "init_func",
            "next_func",
            "finalize_func",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GetElementAtIndex",
        "name": "GetElementAtIndex",
        "params": [
            "dataset",
            "index",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GetOptions",
        "name": "GetOptions",
        "params": [
            "input_dataset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GetSessionHandle",
        "name": "GetSessionHandle",
        "params": [
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GetSessionHandleV2",
        "name": "GetSessionHandleV2",
        "params": [
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GetSessionTensor",
        "name": "GetSessionTensor",
        "params": [
            "handle",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Greater",
        "name": "Greater",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GreaterEqual",
        "name": "GreaterEqual",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GroupByReducerDataset",
        "name": "GroupByReducerDataset",
        "params": [
            "input_dataset",
            "key_func_other_arguments",
            "init_func_other_arguments",
            "reduce_func_other_arguments",
            "finalize_func_other_arguments",
            "key_func",
            "init_func",
            "reduce_func",
            "finalize_func",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GroupByWindowDataset",
        "name": "GroupByWindowDataset",
        "params": [
            "input_dataset",
            "key_func_other_arguments",
            "reduce_func_other_arguments",
            "window_size_func_other_arguments",
            "key_func",
            "reduce_func",
            "window_size_func",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.GuaranteeConst",
        "name": "GuaranteeConst",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.HSVToRGB",
        "name": "HSVToRGB",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.HashTable",
        "name": "HashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.HashTableV2",
        "name": "HashTableV2",
        "params": [
            "key_dtype",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.HistogramFixedWidth",
        "name": "HistogramFixedWidth",
        "params": [
            "values",
            "value_range",
            "nbins",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.HistogramSummary",
        "name": "HistogramSummary",
        "params": [
            "tag",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IFFT",
        "name": "IFFT",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IFFT2D",
        "name": "IFFT2D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IFFT3D",
        "name": "IFFT3D",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IRFFT",
        "name": "IRFFT",
        "params": [
            "input",
            "fft_length",
            "Treal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IRFFT2D",
        "name": "IRFFT2D",
        "params": [
            "input",
            "fft_length",
            "Treal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IRFFT3D",
        "name": "IRFFT3D",
        "params": [
            "input",
            "fft_length",
            "Treal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Identity",
        "name": "Identity",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IdentityN",
        "name": "IdentityN",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IdentityReader",
        "name": "IdentityReader",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IdentityReaderV2",
        "name": "IdentityReaderV2",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.If",
        "name": "If",
        "params": [
            "cond",
            "input",
            "Tout",
            "then_branch",
            "else_branch",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Igamma",
        "name": "Igamma",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IgammaGradA",
        "name": "IgammaGradA",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Igammac",
        "name": "Igammac",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IgnoreErrorsDataset",
        "name": "IgnoreErrorsDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "log_warning",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Imag",
        "name": "Imag",
        "params": [
            "input",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ImageProjectiveTransformV2",
        "name": "ImageProjectiveTransformV2",
        "params": [
            "images",
            "transforms",
            "output_shape",
            "interpolation",
            "fill_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ImageProjectiveTransformV3",
        "name": "ImageProjectiveTransformV3",
        "params": [
            "images",
            "transforms",
            "output_shape",
            "fill_value",
            "interpolation",
            "fill_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ImageSummary",
        "name": "ImageSummary",
        "params": []
    },
    {
        "full_name": "tensorflow.raw_ops.ImmutableConst",
        "name": "ImmutableConst",
        "params": [
            "dtype",
            "shape",
            "memory_region_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ImportEvent",
        "name": "ImportEvent",
        "params": [
            "writer",
            "event",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InTopK",
        "name": "InTopK",
        "params": [
            "predictions",
            "targets",
            "k",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InTopKV2",
        "name": "InTopKV2",
        "params": [
            "predictions",
            "targets",
            "k",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InfeedDequeue",
        "name": "InfeedDequeue",
        "params": [
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InfeedDequeueTuple",
        "name": "InfeedDequeueTuple",
        "params": [
            "dtypes",
            "shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InfeedEnqueue",
        "name": "InfeedEnqueue",
        "params": [
            "input",
            "shape",
            "layout",
            "device_ordinal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InfeedEnqueuePrelinearizedBuffer",
        "name": "InfeedEnqueuePrelinearizedBuffer",
        "params": [
            "input",
            "device_ordinal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InfeedEnqueueTuple",
        "name": "InfeedEnqueueTuple",
        "params": [
            "inputs",
            "shapes",
            "layouts",
            "device_ordinal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InitializeTable",
        "name": "InitializeTable",
        "params": [
            "table_handle",
            "keys",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InitializeTableFromDataset",
        "name": "InitializeTableFromDataset",
        "params": [
            "table_handle",
            "dataset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InitializeTableFromTextFile",
        "name": "InitializeTableFromTextFile",
        "params": [
            "table_handle",
            "filename",
            "key_index",
            "value_index",
            "vocab_size",
            "delimiter",
            "offset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InitializeTableFromTextFileV2",
        "name": "InitializeTableFromTextFileV2",
        "params": [
            "table_handle",
            "filename",
            "key_index",
            "value_index",
            "vocab_size",
            "delimiter",
            "offset",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InitializeTableV2",
        "name": "InitializeTableV2",
        "params": [
            "table_handle",
            "keys",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InplaceAdd",
        "name": "InplaceAdd",
        "params": [
            "x",
            "i",
            "v",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InplaceSub",
        "name": "InplaceSub",
        "params": [
            "x",
            "i",
            "v",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InplaceUpdate",
        "name": "InplaceUpdate",
        "params": [
            "x",
            "i",
            "v",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InterleaveDataset",
        "name": "InterleaveDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "f",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Inv",
        "name": "Inv",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InvGrad",
        "name": "InvGrad",
        "params": [
            "y",
            "dy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Invert",
        "name": "Invert",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.InvertPermutation",
        "name": "InvertPermutation",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsBoostedTreesEnsembleInitialized",
        "name": "IsBoostedTreesEnsembleInitialized",
        "params": [
            "tree_ensemble_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsBoostedTreesQuantileStreamResourceInitialized",
        "name": "IsBoostedTreesQuantileStreamResourceInitialized",
        "params": [
            "quantile_stream_resource_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsFinite",
        "name": "IsFinite",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsInf",
        "name": "IsInf",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsNan",
        "name": "IsNan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsTPUEmbeddingInitialized",
        "name": "IsTPUEmbeddingInitialized",
        "params": [
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsVariableInitialized",
        "name": "IsVariableInitialized",
        "params": [
            "ref",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IsotonicRegression",
        "name": "IsotonicRegression",
        "params": [
            "input",
            "output_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Iterator",
        "name": "Iterator",
        "params": [
            "shared_name",
            "container",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorFromStringHandle",
        "name": "IteratorFromStringHandle",
        "params": [
            "string_handle",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorFromStringHandleV2",
        "name": "IteratorFromStringHandleV2",
        "params": [
            "string_handle",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorGetDevice",
        "name": "IteratorGetDevice",
        "params": [
            "resource",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorGetNext",
        "name": "IteratorGetNext",
        "params": [
            "iterator",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorGetNextAsOptional",
        "name": "IteratorGetNextAsOptional",
        "params": [
            "iterator",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorGetNextSync",
        "name": "IteratorGetNextSync",
        "params": [
            "iterator",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorToStringHandle",
        "name": "IteratorToStringHandle",
        "params": [
            "resource_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.IteratorV2",
        "name": "IteratorV2",
        "params": [
            "shared_name",
            "container",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.L2Loss",
        "name": "L2Loss",
        "params": [
            "t",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LMDBDataset",
        "name": "LMDBDataset",
        "params": [
            "filenames",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LMDBReader",
        "name": "LMDBReader",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LRN",
        "name": "LRN",
        "params": [
            "input",
            "depth_radius",
            "bias",
            "alpha",
            "beta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LRNGrad",
        "name": "LRNGrad",
        "params": [
            "input_grads",
            "input_image",
            "output_image",
            "depth_radius",
            "bias",
            "alpha",
            "beta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LSTMBlockCell",
        "name": "LSTMBlockCell",
        "params": [
            "x",
            "cs_prev",
            "h_prev",
            "w",
            "wci",
            "wcf",
            "wco",
            "b",
            "forget_bias",
            "cell_clip",
            "use_peephole",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LSTMBlockCellGrad",
        "name": "LSTMBlockCellGrad",
        "params": [
            "x",
            "cs_prev",
            "h_prev",
            "w",
            "wci",
            "wcf",
            "wco",
            "b",
            "i",
            "cs",
            "f",
            "o",
            "ci",
            "co",
            "cs_grad",
            "h_grad",
            "use_peephole",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LatencyStatsDataset",
        "name": "LatencyStatsDataset",
        "params": [
            "input_dataset",
            "tag",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LeakyRelu",
        "name": "LeakyRelu",
        "params": [
            "features",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LeakyReluGrad",
        "name": "LeakyReluGrad",
        "params": [
            "gradients",
            "features",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LearnedUnigramCandidateSampler",
        "name": "LearnedUnigramCandidateSampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LeftShift",
        "name": "LeftShift",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LegacyParallelInterleaveDatasetV2",
        "name": "LegacyParallelInterleaveDatasetV2",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "buffer_output_elements",
            "prefetch_input_elements",
            "f",
            "output_types",
            "output_shapes",
            "deterministic",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Less",
        "name": "Less",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LessEqual",
        "name": "LessEqual",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Lgamma",
        "name": "Lgamma",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LinSpace",
        "name": "LinSpace",
        "params": [
            "start",
            "stop",
            "num",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ListDiff",
        "name": "ListDiff",
        "params": [
            "x",
            "y",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadAndRemapMatrix",
        "name": "LoadAndRemapMatrix",
        "params": [
            "ckpt_path",
            "old_tensor_name",
            "row_remapping",
            "col_remapping",
            "initializing_values",
            "num_rows",
            "num_cols",
            "max_rows_in_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadDataset",
        "name": "LoadDataset",
        "params": [
            "path",
            "reader_func_other_args",
            "output_types",
            "output_shapes",
            "reader_func",
            "compression",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingADAMParameters",
        "name": "LoadTPUEmbeddingADAMParameters",
        "params": [
            "parameters",
            "momenta",
            "velocities",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingAdadeltaParameters",
        "name": "LoadTPUEmbeddingAdadeltaParameters",
        "params": [
            "parameters",
            "accumulators",
            "updates",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingAdagradMomentumParameters",
        "name": "LoadTPUEmbeddingAdagradMomentumParameters",
        "params": [
            "parameters",
            "accumulators",
            "momenta",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingAdagradParameters",
        "name": "LoadTPUEmbeddingAdagradParameters",
        "params": [
            "parameters",
            "accumulators",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingCenteredRMSPropParameters",
        "name": "LoadTPUEmbeddingCenteredRMSPropParameters",
        "params": [
            "parameters",
            "ms",
            "mom",
            "mg",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingFTRLParameters",
        "name": "LoadTPUEmbeddingFTRLParameters",
        "params": [
            "parameters",
            "accumulators",
            "linears",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingFrequencyEstimatorParameters",
        "name": "LoadTPUEmbeddingFrequencyEstimatorParameters",
        "params": [
            "parameters",
            "last_hit_step",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingMDLAdagradLightParameters",
        "name": "LoadTPUEmbeddingMDLAdagradLightParameters",
        "params": [
            "parameters",
            "accumulators",
            "weights",
            "benefits",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingMomentumParameters",
        "name": "LoadTPUEmbeddingMomentumParameters",
        "params": [
            "parameters",
            "momenta",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingProximalAdagradParameters",
        "name": "LoadTPUEmbeddingProximalAdagradParameters",
        "params": [
            "parameters",
            "accumulators",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingProximalYogiParameters",
        "name": "LoadTPUEmbeddingProximalYogiParameters",
        "params": [
            "parameters",
            "v",
            "m",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingRMSPropParameters",
        "name": "LoadTPUEmbeddingRMSPropParameters",
        "params": [
            "parameters",
            "ms",
            "mom",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoadTPUEmbeddingStochasticGradientDescentParameters",
        "name": "LoadTPUEmbeddingStochasticGradientDescentParameters",
        "params": [
            "parameters",
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Log",
        "name": "Log",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Log1p",
        "name": "Log1p",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LogMatrixDeterminant",
        "name": "LogMatrixDeterminant",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LogSoftmax",
        "name": "LogSoftmax",
        "params": [
            "logits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LogUniformCandidateSampler",
        "name": "LogUniformCandidateSampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LogicalAnd",
        "name": "LogicalAnd",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LogicalNot",
        "name": "LogicalNot",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LogicalOr",
        "name": "LogicalOr",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableExport",
        "name": "LookupTableExport",
        "params": [
            "table_handle",
            "Tkeys",
            "Tvalues",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableExportV2",
        "name": "LookupTableExportV2",
        "params": [
            "table_handle",
            "Tkeys",
            "Tvalues",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableFind",
        "name": "LookupTableFind",
        "params": [
            "table_handle",
            "keys",
            "default_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableFindV2",
        "name": "LookupTableFindV2",
        "params": [
            "table_handle",
            "keys",
            "default_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableImport",
        "name": "LookupTableImport",
        "params": [
            "table_handle",
            "keys",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableImportV2",
        "name": "LookupTableImportV2",
        "params": [
            "table_handle",
            "keys",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableInsert",
        "name": "LookupTableInsert",
        "params": [
            "table_handle",
            "keys",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableInsertV2",
        "name": "LookupTableInsertV2",
        "params": [
            "table_handle",
            "keys",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableRemoveV2",
        "name": "LookupTableRemoveV2",
        "params": [
            "table_handle",
            "keys",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableSize",
        "name": "LookupTableSize",
        "params": [
            "table_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LookupTableSizeV2",
        "name": "LookupTableSizeV2",
        "params": [
            "table_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LoopCond",
        "name": "LoopCond",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.LowerBound",
        "name": "LowerBound",
        "params": [
            "sorted_inputs",
            "values",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Lu",
        "name": "Lu",
        "params": [
            "input",
            "output_idx_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MakeIterator",
        "name": "MakeIterator",
        "params": [
            "dataset",
            "iterator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapAndBatchDataset",
        "name": "MapAndBatchDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "batch_size",
            "num_parallel_calls",
            "drop_remainder",
            "f",
            "output_types",
            "output_shapes",
            "preserve_cardinality",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapClear",
        "name": "MapClear",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapDataset",
        "name": "MapDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "f",
            "output_types",
            "output_shapes",
            "use_inter_op_parallelism",
            "preserve_cardinality",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapDefun",
        "name": "MapDefun",
        "params": [
            "arguments",
            "captured_inputs",
            "output_types",
            "output_shapes",
            "f",
            "max_intra_op_parallelism",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapIncompleteSize",
        "name": "MapIncompleteSize",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapPeek",
        "name": "MapPeek",
        "params": [
            "key",
            "indices",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapSize",
        "name": "MapSize",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapStage",
        "name": "MapStage",
        "params": [
            "key",
            "indices",
            "values",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapUnstage",
        "name": "MapUnstage",
        "params": [
            "key",
            "indices",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MapUnstageNoKey",
        "name": "MapUnstageNoKey",
        "params": [
            "indices",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatMul",
        "name": "MatMul",
        "params": [
            "a",
            "b",
            "transpose_a",
            "transpose_b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatchingFiles",
        "name": "MatchingFiles",
        "params": [
            "pattern",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatchingFilesDataset",
        "name": "MatchingFilesDataset",
        "params": [
            "patterns",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixBandPart",
        "name": "MatrixBandPart",
        "params": [
            "input",
            "num_lower",
            "num_upper",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDeterminant",
        "name": "MatrixDeterminant",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDiag",
        "name": "MatrixDiag",
        "params": [
            "diagonal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDiagPart",
        "name": "MatrixDiagPart",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDiagPartV2",
        "name": "MatrixDiagPartV2",
        "params": [
            "input",
            "k",
            "padding_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDiagPartV3",
        "name": "MatrixDiagPartV3",
        "params": [
            "input",
            "k",
            "padding_value",
            "align",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDiagV2",
        "name": "MatrixDiagV2",
        "params": [
            "diagonal",
            "k",
            "num_rows",
            "num_cols",
            "padding_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixDiagV3",
        "name": "MatrixDiagV3",
        "params": [
            "diagonal",
            "k",
            "num_rows",
            "num_cols",
            "padding_value",
            "align",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixExponential",
        "name": "MatrixExponential",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixInverse",
        "name": "MatrixInverse",
        "params": [
            "input",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixLogarithm",
        "name": "MatrixLogarithm",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixSetDiag",
        "name": "MatrixSetDiag",
        "params": [
            "input",
            "diagonal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixSetDiagV2",
        "name": "MatrixSetDiagV2",
        "params": [
            "input",
            "diagonal",
            "k",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixSetDiagV3",
        "name": "MatrixSetDiagV3",
        "params": [
            "input",
            "diagonal",
            "k",
            "align",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixSolve",
        "name": "MatrixSolve",
        "params": [
            "matrix",
            "rhs",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixSolveLs",
        "name": "MatrixSolveLs",
        "params": [
            "matrix",
            "rhs",
            "l2_regularizer",
            "fast",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixSquareRoot",
        "name": "MatrixSquareRoot",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MatrixTriangularSolve",
        "name": "MatrixTriangularSolve",
        "params": [
            "matrix",
            "rhs",
            "lower",
            "adjoint",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Max",
        "name": "Max",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxIntraOpParallelismDataset",
        "name": "MaxIntraOpParallelismDataset",
        "params": [
            "input_dataset",
            "max_intra_op_parallelism",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPool",
        "name": "MaxPool",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "explicit_paddings",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPool3D",
        "name": "MaxPool3D",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPool3DGrad",
        "name": "MaxPool3DGrad",
        "params": [
            "orig_input",
            "orig_output",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPool3DGradGrad",
        "name": "MaxPool3DGradGrad",
        "params": [
            "orig_input",
            "orig_output",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolGrad",
        "name": "MaxPoolGrad",
        "params": [
            "orig_input",
            "orig_output",
            "grad",
            "ksize",
            "strides",
            "padding",
            "explicit_paddings",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolGradGrad",
        "name": "MaxPoolGradGrad",
        "params": [
            "orig_input",
            "orig_output",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolGradGradV2",
        "name": "MaxPoolGradGradV2",
        "params": [
            "orig_input",
            "orig_output",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolGradGradWithArgmax",
        "name": "MaxPoolGradGradWithArgmax",
        "params": [
            "input",
            "grad",
            "argmax",
            "ksize",
            "strides",
            "padding",
            "include_batch_in_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolGradV2",
        "name": "MaxPoolGradV2",
        "params": [
            "orig_input",
            "orig_output",
            "grad",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolGradWithArgmax",
        "name": "MaxPoolGradWithArgmax",
        "params": [
            "input",
            "grad",
            "argmax",
            "ksize",
            "strides",
            "padding",
            "include_batch_in_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolV2",
        "name": "MaxPoolV2",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MaxPoolWithArgmax",
        "name": "MaxPoolWithArgmax",
        "params": [
            "input",
            "ksize",
            "strides",
            "padding",
            "Targmax",
            "include_batch_in_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Maximum",
        "name": "Maximum",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Mean",
        "name": "Mean",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Merge",
        "name": "Merge",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MergeSummary",
        "name": "MergeSummary",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MergeV2Checkpoints",
        "name": "MergeV2Checkpoints",
        "params": [
            "checkpoint_prefixes",
            "destination_prefix",
            "delete_old_dirs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Mfcc",
        "name": "Mfcc",
        "params": [
            "spectrogram",
            "sample_rate",
            "upper_frequency_limit",
            "lower_frequency_limit",
            "filterbank_channel_count",
            "dct_coefficient_count",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Min",
        "name": "Min",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Minimum",
        "name": "Minimum",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MirrorPad",
        "name": "MirrorPad",
        "params": [
            "input",
            "paddings",
            "mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MirrorPadGrad",
        "name": "MirrorPadGrad",
        "params": [
            "input",
            "paddings",
            "mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Mod",
        "name": "Mod",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ModelDataset",
        "name": "ModelDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "algorithm",
            "cpu_budget",
            "ram_budget",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Mul",
        "name": "Mul",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MulNoNan",
        "name": "MulNoNan",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MultiDeviceIterator",
        "name": "MultiDeviceIterator",
        "params": [
            "devices",
            "shared_name",
            "container",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MultiDeviceIteratorFromStringHandle",
        "name": "MultiDeviceIteratorFromStringHandle",
        "params": [
            "string_handle",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MultiDeviceIteratorGetNextFromShard",
        "name": "MultiDeviceIteratorGetNextFromShard",
        "params": [
            "multi_device_iterator",
            "shard_num",
            "incarnation_id",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MultiDeviceIteratorInit",
        "name": "MultiDeviceIteratorInit",
        "params": [
            "dataset",
            "multi_device_iterator",
            "max_buffer_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MultiDeviceIteratorToStringHandle",
        "name": "MultiDeviceIteratorToStringHandle",
        "params": [
            "multi_device_iterator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Multinomial",
        "name": "Multinomial",
        "params": [
            "logits",
            "num_samples",
            "seed",
            "seed2",
            "output_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutableDenseHashTable",
        "name": "MutableDenseHashTable",
        "params": [
            "empty_key",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "value_shape",
            "initial_num_buckets",
            "max_load_factor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutableDenseHashTableV2",
        "name": "MutableDenseHashTableV2",
        "params": [
            "empty_key",
            "deleted_key",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "value_shape",
            "initial_num_buckets",
            "max_load_factor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutableHashTable",
        "name": "MutableHashTable",
        "params": [
            "key_dtype",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutableHashTableOfTensors",
        "name": "MutableHashTableOfTensors",
        "params": [
            "key_dtype",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "value_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutableHashTableOfTensorsV2",
        "name": "MutableHashTableOfTensorsV2",
        "params": [
            "key_dtype",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "value_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutableHashTableV2",
        "name": "MutableHashTableV2",
        "params": [
            "key_dtype",
            "value_dtype",
            "container",
            "shared_name",
            "use_node_name_sharing",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutexLock",
        "name": "MutexLock",
        "params": [
            "mutex",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.MutexV2",
        "name": "MutexV2",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NcclAllReduce",
        "name": "NcclAllReduce",
        "params": [
            "input",
            "reduction",
            "num_devices",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NcclBroadcast",
        "name": "NcclBroadcast",
        "params": [
            "input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NcclReduce",
        "name": "NcclReduce",
        "params": [
            "input",
            "reduction",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Ndtri",
        "name": "Ndtri",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Neg",
        "name": "Neg",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NextAfter",
        "name": "NextAfter",
        "params": [
            "x1",
            "x2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NextIteration",
        "name": "NextIteration",
        "params": [
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NoOp",
        "name": "NoOp",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonDeterministicInts",
        "name": "NonDeterministicInts",
        "params": [
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonMaxSuppression",
        "name": "NonMaxSuppression",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonMaxSuppressionV2",
        "name": "NonMaxSuppressionV2",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonMaxSuppressionV3",
        "name": "NonMaxSuppressionV3",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "score_threshold",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonMaxSuppressionV4",
        "name": "NonMaxSuppressionV4",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "score_threshold",
            "pad_to_max_output_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonMaxSuppressionV5",
        "name": "NonMaxSuppressionV5",
        "params": [
            "boxes",
            "scores",
            "max_output_size",
            "iou_threshold",
            "score_threshold",
            "soft_nms_sigma",
            "pad_to_max_output_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonMaxSuppressionWithOverlaps",
        "name": "NonMaxSuppressionWithOverlaps",
        "params": [
            "overlaps",
            "scores",
            "max_output_size",
            "overlap_threshold",
            "score_threshold",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NonSerializableDataset",
        "name": "NonSerializableDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NotEqual",
        "name": "NotEqual",
        "params": [
            "x",
            "y",
            "incompatible_shape_error",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.NthElement",
        "name": "NthElement",
        "params": [
            "input",
            "n",
            "reverse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OneHot",
        "name": "OneHot",
        "params": [
            "indices",
            "depth",
            "on_value",
            "off_value",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OneShotIterator",
        "name": "OneShotIterator",
        "params": [
            "dataset_factory",
            "output_types",
            "output_shapes",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OnesLike",
        "name": "OnesLike",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptimizeDataset",
        "name": "OptimizeDataset",
        "params": [
            "input_dataset",
            "optimizations",
            "output_types",
            "output_shapes",
            "optimization_configs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptimizeDatasetV2",
        "name": "OptimizeDatasetV2",
        "params": [
            "input_dataset",
            "optimizations_enabled",
            "optimizations_disabled",
            "optimizations_default",
            "output_types",
            "output_shapes",
            "optimization_configs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptionalFromValue",
        "name": "OptionalFromValue",
        "params": [
            "components",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptionalGetValue",
        "name": "OptionalGetValue",
        "params": [
            "optional",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptionalHasValue",
        "name": "OptionalHasValue",
        "params": [
            "optional",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptionalNone",
        "name": "OptionalNone",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OptionsDataset",
        "name": "OptionsDataset",
        "params": [
            "input_dataset",
            "serialized_options",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapClear",
        "name": "OrderedMapClear",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapIncompleteSize",
        "name": "OrderedMapIncompleteSize",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapPeek",
        "name": "OrderedMapPeek",
        "params": [
            "key",
            "indices",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapSize",
        "name": "OrderedMapSize",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapStage",
        "name": "OrderedMapStage",
        "params": [
            "key",
            "indices",
            "values",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapUnstage",
        "name": "OrderedMapUnstage",
        "params": [
            "key",
            "indices",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OrderedMapUnstageNoKey",
        "name": "OrderedMapUnstageNoKey",
        "params": [
            "indices",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OutensorfloweedDequeue",
        "name": "OutfeedDequeue",
        "params": [
            "dtype",
            "shape",
            "device_ordinal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OutensorfloweedDequeueTuple",
        "name": "OutfeedDequeueTuple",
        "params": [
            "dtypes",
            "shapes",
            "device_ordinal",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OutensorfloweedDequeueTupleV2",
        "name": "OutfeedDequeueTupleV2",
        "params": [
            "device_ordinal",
            "dtypes",
            "shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OutensorfloweedDequeueV2",
        "name": "OutfeedDequeueV2",
        "params": [
            "device_ordinal",
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OutensorfloweedEnqueue",
        "name": "OutfeedEnqueue",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.OutensorfloweedEnqueueTuple",
        "name": "OutfeedEnqueueTuple",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Pack",
        "name": "Pack",
        "params": [
            "values",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Pad",
        "name": "Pad",
        "params": [
            "input",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PadV2",
        "name": "PadV2",
        "params": [
            "input",
            "paddings",
            "constant_values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PaddedBatchDataset",
        "name": "PaddedBatchDataset",
        "params": [
            "input_dataset",
            "batch_size",
            "padded_shapes",
            "padding_values",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PaddedBatchDatasetV2",
        "name": "PaddedBatchDatasetV2",
        "params": [
            "input_dataset",
            "batch_size",
            "padded_shapes",
            "padding_values",
            "drop_remainder",
            "output_shapes",
            "parallel_copy",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PaddingFIFOQueue",
        "name": "PaddingFIFOQueue",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PaddingFIFOQueueV2",
        "name": "PaddingFIFOQueueV2",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelBatchDataset",
        "name": "ParallelBatchDataset",
        "params": [
            "input_dataset",
            "batch_size",
            "num_parallel_calls",
            "drop_remainder",
            "output_types",
            "output_shapes",
            "parallel_copy",
            "deterministic",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelConcat",
        "name": "ParallelConcat",
        "params": [
            "values",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelDynamicStitch",
        "name": "ParallelDynamicStitch",
        "params": [
            "indices",
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelFilterDataset",
        "name": "ParallelFilterDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "num_parallel_calls",
            "predicate",
            "output_types",
            "output_shapes",
            "deterministic",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelInterleaveDataset",
        "name": "ParallelInterleaveDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "sloppy",
            "buffer_output_elements",
            "prefetch_input_elements",
            "f",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelInterleaveDatasetV2",
        "name": "ParallelInterleaveDatasetV2",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "num_parallel_calls",
            "f",
            "output_types",
            "output_shapes",
            "sloppy",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelInterleaveDatasetV3",
        "name": "ParallelInterleaveDatasetV3",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "num_parallel_calls",
            "f",
            "output_types",
            "output_shapes",
            "deterministic",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelInterleaveDatasetV4",
        "name": "ParallelInterleaveDatasetV4",
        "params": [
            "input_dataset",
            "other_arguments",
            "cycle_length",
            "block_length",
            "buffer_output_elements",
            "prefetch_input_elements",
            "num_parallel_calls",
            "f",
            "output_types",
            "output_shapes",
            "deterministic",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelMapDataset",
        "name": "ParallelMapDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "num_parallel_calls",
            "f",
            "output_types",
            "output_shapes",
            "use_inter_op_parallelism",
            "sloppy",
            "preserve_cardinality",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParallelMapDatasetV2",
        "name": "ParallelMapDatasetV2",
        "params": [
            "input_dataset",
            "other_arguments",
            "num_parallel_calls",
            "f",
            "output_types",
            "output_shapes",
            "use_inter_op_parallelism",
            "deterministic",
            "preserve_cardinality",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParameterizedTruncatedNormal",
        "name": "ParameterizedTruncatedNormal",
        "params": [
            "shape",
            "means",
            "stdevs",
            "minvals",
            "maxvals",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseExample",
        "name": "ParseExample",
        "params": [
            "serialized",
            "names",
            "sparse_keys",
            "dense_keys",
            "dense_defaults",
            "sparse_types",
            "dense_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseExampleDataset",
        "name": "ParseExampleDataset",
        "params": [
            "input_dataset",
            "num_parallel_calls",
            "dense_defaults",
            "sparse_keys",
            "dense_keys",
            "sparse_types",
            "dense_shapes",
            "output_types",
            "output_shapes",
            "sloppy",
            "ragged_keys",
            "ragged_value_types",
            "ragged_split_types",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseExampleDatasetV2",
        "name": "ParseExampleDatasetV2",
        "params": [
            "input_dataset",
            "num_parallel_calls",
            "dense_defaults",
            "sparse_keys",
            "dense_keys",
            "sparse_types",
            "dense_shapes",
            "output_types",
            "output_shapes",
            "deterministic",
            "ragged_keys",
            "ragged_value_types",
            "ragged_split_types",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseExampleV2",
        "name": "ParseExampleV2",
        "params": [
            "serialized",
            "names",
            "sparse_keys",
            "dense_keys",
            "ragged_keys",
            "dense_defaults",
            "num_sparse",
            "sparse_types",
            "ragged_value_types",
            "ragged_split_types",
            "dense_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseSequenceExample",
        "name": "ParseSequenceExample",
        "params": [
            "serialized",
            "debug_name",
            "context_dense_defaults",
            "feature_list_dense_missing_assumed_empty",
            "context_sparse_keys",
            "context_dense_keys",
            "feature_list_sparse_keys",
            "feature_list_dense_keys",
            "Ncontext_sparse",
            "Ncontext_dense",
            "Nfeature_list_sparse",
            "Nfeature_list_dense",
            "context_sparse_types",
            "feature_list_dense_types",
            "context_dense_shapes",
            "feature_list_sparse_types",
            "feature_list_dense_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseSequenceExampleV2",
        "name": "ParseSequenceExampleV2",
        "params": [
            "serialized",
            "debug_name",
            "context_sparse_keys",
            "context_dense_keys",
            "context_ragged_keys",
            "feature_list_sparse_keys",
            "feature_list_dense_keys",
            "feature_list_ragged_keys",
            "feature_list_dense_missing_assumed_empty",
            "context_dense_defaults",
            "Ncontext_sparse",
            "context_sparse_types",
            "context_ragged_value_types",
            "context_ragged_split_types",
            "context_dense_shapes",
            "Nfeature_list_sparse",
            "Nfeature_list_dense",
            "feature_list_dense_types",
            "feature_list_sparse_types",
            "feature_list_ragged_value_types",
            "feature_list_ragged_split_types",
            "feature_list_dense_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseSingleExample",
        "name": "ParseSingleExample",
        "params": [
            "serialized",
            "dense_defaults",
            "num_sparse",
            "sparse_keys",
            "dense_keys",
            "sparse_types",
            "dense_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseSingleSequenceExample",
        "name": "ParseSingleSequenceExample",
        "params": [
            "serialized",
            "feature_list_dense_missing_assumed_empty",
            "context_sparse_keys",
            "context_dense_keys",
            "feature_list_sparse_keys",
            "feature_list_dense_keys",
            "context_dense_defaults",
            "debug_name",
            "context_sparse_types",
            "feature_list_dense_types",
            "context_dense_shapes",
            "feature_list_sparse_types",
            "feature_list_dense_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ParseTensor",
        "name": "ParseTensor",
        "params": [
            "serialized",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PartitionedCall",
        "name": "PartitionedCall",
        "params": [
            "args",
            "Tout",
            "f",
            "config",
            "config_proto",
            "executor_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Placeholder",
        "name": "Placeholder",
        "params": [
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PlaceholderV2",
        "name": "PlaceholderV2",
        "params": [
            "dtype",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PlaceholderWithDefault",
        "name": "PlaceholderWithDefault",
        "params": [
            "input",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Polygamma",
        "name": "Polygamma",
        "params": [
            "a",
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PopulationCount",
        "name": "PopulationCount",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Pow",
        "name": "Pow",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PrefetchDataset",
        "name": "PrefetchDataset",
        "params": [
            "input_dataset",
            "buffer_size",
            "output_types",
            "output_shapes",
            "slack_period",
            "legacy_autotune",
            "buffer_size_min",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Prelinearize",
        "name": "Prelinearize",
        "params": [
            "input",
            "shape",
            "layout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PrelinearizeTuple",
        "name": "PrelinearizeTuple",
        "params": [
            "inputs",
            "shapes",
            "layouts",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PreventGradient",
        "name": "PreventGradient",
        "params": [
            "input",
            "message",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Print",
        "name": "Print",
        "params": [
            "input",
            "data",
            "message",
            "first_n",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PrintV2",
        "name": "PrintV2",
        "params": [
            "input",
            "output_stream",
            "end",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PriorityQueue",
        "name": "PriorityQueue",
        "params": [
            "shapes",
            "component_types",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PriorityQueueV2",
        "name": "PriorityQueueV2",
        "params": [
            "shapes",
            "component_types",
            "capacity",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PrivateThreadPoolDataset",
        "name": "PrivateThreadPoolDataset",
        "params": [
            "input_dataset",
            "num_threads",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Prod",
        "name": "Prod",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PyFunc",
        "name": "PyFunc",
        "params": [
            "input",
            "token",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.PyFuncStateless",
        "name": "PyFuncStateless",
        "params": [
            "input",
            "token",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Qr",
        "name": "Qr",
        "params": [
            "input",
            "full_matrices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeAndDequantize",
        "name": "QuantizeAndDequantize",
        "params": [
            "input",
            "signed_input",
            "num_bits",
            "range_given",
            "input_min",
            "input_max",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeAndDequantizeV2",
        "name": "QuantizeAndDequantizeV2",
        "params": [
            "input",
            "input_min",
            "input_max",
            "signed_input",
            "num_bits",
            "range_given",
            "round_mode",
            "narrow_range",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeAndDequantizeV3",
        "name": "QuantizeAndDequantizeV3",
        "params": [
            "input",
            "input_min",
            "input_max",
            "num_bits",
            "signed_input",
            "range_given",
            "narrow_range",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeAndDequantizeV4",
        "name": "QuantizeAndDequantizeV4",
        "params": [
            "input",
            "input_min",
            "input_max",
            "signed_input",
            "num_bits",
            "range_given",
            "round_mode",
            "narrow_range",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeAndDequantizeV4Grad",
        "name": "QuantizeAndDequantizeV4Grad",
        "params": [
            "gradients",
            "input",
            "input_min",
            "input_max",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeDownAndShrinkRange",
        "name": "QuantizeDownAndShrinkRange",
        "params": [
            "input",
            "input_min",
            "input_max",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizeV2",
        "name": "QuantizeV2",
        "params": [
            "input",
            "min_range",
            "max_range",
            "T",
            "mode",
            "round_mode",
            "narrow_range",
            "axis",
            "ensure_minimum_range",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedAdd",
        "name": "QuantizedAdd",
        "params": [
            "x",
            "y",
            "min_x",
            "max_x",
            "min_y",
            "max_y",
            "Toutput",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedAvgPool",
        "name": "QuantizedAvgPool",
        "params": [
            "input",
            "min_input",
            "max_input",
            "ksize",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedBatchNormWithGlobalNormalization",
        "name": "QuantizedBatchNormWithGlobalNormalization",
        "params": [
            "t",
            "t_min",
            "t_max",
            "m",
            "m_min",
            "m_max",
            "v",
            "v_min",
            "v_max",
            "beta",
            "beta_min",
            "beta_max",
            "gamma",
            "gamma_min",
            "gamma_max",
            "out_type",
            "variance_epsilon",
            "scale_after_normalization",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedBiasAdd",
        "name": "QuantizedBiasAdd",
        "params": [
            "input",
            "bias",
            "min_input",
            "max_input",
            "min_bias",
            "max_bias",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConcat",
        "name": "QuantizedConcat",
        "params": [
            "concat_dim",
            "values",
            "input_mins",
            "input_maxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2D",
        "name": "QuantizedConv2D",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DAndRelu",
        "name": "QuantizedConv2DAndRelu",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DAndReluAndRequantize",
        "name": "QuantizedConv2DAndReluAndRequantize",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DAndRequantize",
        "name": "QuantizedConv2DAndRequantize",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DPerChannel",
        "name": "QuantizedConv2DPerChannel",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBias",
        "name": "QuantizedConv2DWithBias",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBiasAndRelu",
        "name": "QuantizedConv2DWithBiasAndRelu",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBiasAndReluAndRequantize",
        "name": "QuantizedConv2DWithBiasAndReluAndRequantize",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBiasAndRequantize",
        "name": "QuantizedConv2DWithBiasAndRequantize",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBiasSignedSumAndReluAndRequantize",
        "name": "QuantizedConv2DWithBiasSignedSumAndReluAndRequantize",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "summand",
            "min_summand",
            "max_summand",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBiasSumAndRelu",
        "name": "QuantizedConv2DWithBiasSumAndRelu",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "summand",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedConv2DWithBiasSumAndReluAndRequantize",
        "name": "QuantizedConv2DWithBiasSumAndReluAndRequantize",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "summand",
            "min_summand",
            "max_summand",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedDepthwiseConv2D",
        "name": "QuantizedDepthwiseConv2D",
        "params": [
            "input",
            "filter",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedDepthwiseConv2DWithBias",
        "name": "QuantizedDepthwiseConv2DWithBias",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedDepthwiseConv2DWithBiasAndRelu",
        "name": "QuantizedDepthwiseConv2DWithBiasAndRelu",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize",
        "name": "QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize",
        "params": [
            "input",
            "filter",
            "bias",
            "min_input",
            "max_input",
            "min_filter",
            "max_filter",
            "min_freezed_output",
            "max_freezed_output",
            "strides",
            "padding",
            "out_type",
            "dilations",
            "padding_list",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedInstanceNorm",
        "name": "QuantizedInstanceNorm",
        "params": [
            "x",
            "x_min",
            "x_max",
            "output_range_given",
            "given_y_min",
            "given_y_max",
            "variance_epsilon",
            "min_separation",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMatMul",
        "name": "QuantizedMatMul",
        "params": [
            "a",
            "b",
            "min_a",
            "max_a",
            "min_b",
            "max_b",
            "Toutput",
            "transpose_a",
            "transpose_b",
            "Tactivation",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMatMulWithBias",
        "name": "QuantizedMatMulWithBias",
        "params": [
            "a",
            "b",
            "bias",
            "min_a",
            "max_a",
            "min_b",
            "max_b",
            "Toutput",
            "transpose_a",
            "transpose_b",
            "input_quant_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMatMulWithBiasAndDequantize",
        "name": "QuantizedMatMulWithBiasAndDequantize",
        "params": [
            "a",
            "b",
            "bias",
            "min_a",
            "max_a",
            "min_b",
            "max_b",
            "min_freezed_output",
            "max_freezed_output",
            "Toutput",
            "transpose_a",
            "transpose_b",
            "input_quant_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMatMulWithBiasAndRelu",
        "name": "QuantizedMatMulWithBiasAndRelu",
        "params": [
            "a",
            "b",
            "bias",
            "min_a",
            "max_a",
            "min_b",
            "max_b",
            "Toutput",
            "transpose_a",
            "transpose_b",
            "input_quant_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMatMulWithBiasAndReluAndRequantize",
        "name": "QuantizedMatMulWithBiasAndReluAndRequantize",
        "params": [
            "a",
            "b",
            "bias",
            "min_a",
            "max_a",
            "min_b",
            "max_b",
            "min_freezed_output",
            "max_freezed_output",
            "Toutput",
            "transpose_a",
            "transpose_b",
            "input_quant_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMatMulWithBiasAndRequantize",
        "name": "QuantizedMatMulWithBiasAndRequantize",
        "params": [
            "a",
            "b",
            "bias",
            "min_a",
            "max_a",
            "min_b",
            "max_b",
            "min_freezed_output",
            "max_freezed_output",
            "Toutput",
            "transpose_a",
            "transpose_b",
            "input_quant_mode",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMaxPool",
        "name": "QuantizedMaxPool",
        "params": [
            "input",
            "min_input",
            "max_input",
            "ksize",
            "strides",
            "padding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedMul",
        "name": "QuantizedMul",
        "params": [
            "x",
            "y",
            "min_x",
            "max_x",
            "min_y",
            "max_y",
            "Toutput",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedRelu",
        "name": "QuantizedRelu",
        "params": [
            "features",
            "min_features",
            "max_features",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedRelu6",
        "name": "QuantizedRelu6",
        "params": [
            "features",
            "min_features",
            "max_features",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedReluX",
        "name": "QuantizedReluX",
        "params": [
            "features",
            "max_value",
            "min_features",
            "max_features",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedReshape",
        "name": "QuantizedReshape",
        "params": [
            "tensor",
            "shape",
            "input_min",
            "input_max",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QuantizedResizeBilinear",
        "name": "QuantizedResizeBilinear",
        "params": [
            "images",
            "size",
            "min",
            "max",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueClose",
        "name": "QueueClose",
        "params": [
            "handle",
            "cancel_pending_enqueues",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueCloseV2",
        "name": "QueueCloseV2",
        "params": [
            "handle",
            "cancel_pending_enqueues",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueDequeue",
        "name": "QueueDequeue",
        "params": [
            "handle",
            "component_types",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueDequeueMany",
        "name": "QueueDequeueMany",
        "params": [
            "handle",
            "n",
            "component_types",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueDequeueManyV2",
        "name": "QueueDequeueManyV2",
        "params": [
            "handle",
            "n",
            "component_types",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueDequeueUpTo",
        "name": "QueueDequeueUpTo",
        "params": [
            "handle",
            "n",
            "component_types",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueDequeueUpToV2",
        "name": "QueueDequeueUpToV2",
        "params": [
            "handle",
            "n",
            "component_types",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueDequeueV2",
        "name": "QueueDequeueV2",
        "params": [
            "handle",
            "component_types",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueEnqueue",
        "name": "QueueEnqueue",
        "params": [
            "handle",
            "components",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueEnqueueMany",
        "name": "QueueEnqueueMany",
        "params": [
            "handle",
            "components",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueEnqueueManyV2",
        "name": "QueueEnqueueManyV2",
        "params": [
            "handle",
            "components",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueEnqueueV2",
        "name": "QueueEnqueueV2",
        "params": [
            "handle",
            "components",
            "timeout_ms",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueIsClosed",
        "name": "QueueIsClosed",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueIsClosedV2",
        "name": "QueueIsClosedV2",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueSize",
        "name": "QueueSize",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.QueueSizeV2",
        "name": "QueueSizeV2",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RFFT",
        "name": "RFFT",
        "params": [
            "input",
            "fft_length",
            "Tcomplex",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RFFT2D",
        "name": "RFFT2D",
        "params": [
            "input",
            "fft_length",
            "Tcomplex",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RFFT3D",
        "name": "RFFT3D",
        "params": [
            "input",
            "fft_length",
            "Tcomplex",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RGBToHSV",
        "name": "RGBToHSV",
        "params": [
            "images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedBincount",
        "name": "RaggedBincount",
        "params": [
            "splits",
            "values",
            "size",
            "weights",
            "binary_output",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedCountSparseOutput",
        "name": "RaggedCountSparseOutput",
        "params": [
            "splits",
            "values",
            "weights",
            "binary_output",
            "minlength",
            "maxlength",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedCross",
        "name": "RaggedCross",
        "params": [
            "ragged_values",
            "ragged_row_splits",
            "sparse_indices",
            "sparse_values",
            "sparse_shape",
            "dense_inputs",
            "input_order",
            "hashed_output",
            "num_buckets",
            "hash_key",
            "out_values_type",
            "out_row_splits_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedGather",
        "name": "RaggedGather",
        "params": [
            "params_nested_splits",
            "params_dense_values",
            "indices",
            "OUTPUT_RAGGED_RANK",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedRange",
        "name": "RaggedRange",
        "params": [
            "starts",
            "limits",
            "deltas",
            "Tsplits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedTensorFromVariant",
        "name": "RaggedTensorFromVariant",
        "params": [
            "encoded_ragged",
            "input_ragged_rank",
            "output_ragged_rank",
            "Tvalues",
            "Tsplits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedTensorToSparse",
        "name": "RaggedTensorToSparse",
        "params": [
            "rt_nested_splits",
            "rt_dense_values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedTensorToTensor",
        "name": "RaggedTensorToTensor",
        "params": [
            "shape",
            "values",
            "default_value",
            "row_partition_tensors",
            "row_partition_types",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedTensorToVariant",
        "name": "RaggedTensorToVariant",
        "params": [
            "rt_nested_splits",
            "rt_dense_values",
            "batched_input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RaggedTensorToVariantGradient",
        "name": "RaggedTensorToVariantGradient",
        "params": [
            "encoded_ragged_grad",
            "row_splits",
            "dense_values_shape",
            "Tvalues",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomCrop",
        "name": "RandomCrop",
        "params": [
            "image",
            "size",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomDataset",
        "name": "RandomDataset",
        "params": [
            "seed",
            "seed2",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomGamma",
        "name": "RandomGamma",
        "params": [
            "shape",
            "alpha",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomGammaGrad",
        "name": "RandomGammaGrad",
        "params": [
            "alpha",
            "sample",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomIndexShuffle",
        "name": "RandomIndexShuffle",
        "params": [
            "index",
            "seed",
            "max_index",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomPoisson",
        "name": "RandomPoisson",
        "params": [
            "shape",
            "rate",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomPoissonV2",
        "name": "RandomPoissonV2",
        "params": [
            "shape",
            "rate",
            "seed",
            "seed2",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomShuffle",
        "name": "RandomShuffle",
        "params": [
            "value",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomShuffleQueue",
        "name": "RandomShuffleQueue",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "min_after_dequeue",
            "seed",
            "seed2",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomShuffleQueueV2",
        "name": "RandomShuffleQueueV2",
        "params": [
            "component_types",
            "shapes",
            "capacity",
            "min_after_dequeue",
            "seed",
            "seed2",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomStandardNormal",
        "name": "RandomStandardNormal",
        "params": [
            "shape",
            "dtype",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomUniform",
        "name": "RandomUniform",
        "params": [
            "shape",
            "dtype",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RandomUniformInt",
        "name": "RandomUniformInt",
        "params": [
            "shape",
            "minval",
            "maxval",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Range",
        "name": "Range",
        "params": [
            "start",
            "limit",
            "delta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RangeDataset",
        "name": "RangeDataset",
        "params": [
            "start",
            "stop",
            "step",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Rank",
        "name": "Rank",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReadFile",
        "name": "ReadFile",
        "params": [
            "filename",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReadVariableOp",
        "name": "ReadVariableOp",
        "params": [
            "resource",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReadVariableXlaSplitND",
        "name": "ReadVariableXlaSplitND",
        "params": [
            "resource",
            "T",
            "N",
            "num_splits",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderNumRecordsProduced",
        "name": "ReaderNumRecordsProduced",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderNumRecordsProducedV2",
        "name": "ReaderNumRecordsProducedV2",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderNumWorkUnitsCompleted",
        "name": "ReaderNumWorkUnitsCompleted",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderNumWorkUnitsCompletedV2",
        "name": "ReaderNumWorkUnitsCompletedV2",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderRead",
        "name": "ReaderRead",
        "params": [
            "reader_handle",
            "queue_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderReadUpTo",
        "name": "ReaderReadUpTo",
        "params": [
            "reader_handle",
            "queue_handle",
            "num_records",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderReadUpToV2",
        "name": "ReaderReadUpToV2",
        "params": [
            "reader_handle",
            "queue_handle",
            "num_records",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderReadV2",
        "name": "ReaderReadV2",
        "params": [
            "reader_handle",
            "queue_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderReset",
        "name": "ReaderReset",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderResetV2",
        "name": "ReaderResetV2",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderRestoreState",
        "name": "ReaderRestoreState",
        "params": [
            "reader_handle",
            "state",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderRestoreStateV2",
        "name": "ReaderRestoreStateV2",
        "params": [
            "reader_handle",
            "state",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderSerializeState",
        "name": "ReaderSerializeState",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReaderSerializeStateV2",
        "name": "ReaderSerializeStateV2",
        "params": [
            "reader_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Real",
        "name": "Real",
        "params": [
            "input",
            "Tout",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RealDiv",
        "name": "RealDiv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RebatchDataset",
        "name": "RebatchDataset",
        "params": [
            "input_dataset",
            "num_replicas",
            "output_types",
            "output_shapes",
            "use_fallback",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RebatchDatasetV2",
        "name": "RebatchDatasetV2",
        "params": [
            "input_dataset",
            "batch_sizes",
            "drop_remainder",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Reciprocal",
        "name": "Reciprocal",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReciprocalGrad",
        "name": "ReciprocalGrad",
        "params": [
            "y",
            "dy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RecordInput",
        "name": "RecordInput",
        "params": [
            "file_pattern",
            "file_random_seed",
            "file_shuffle_shift_ratio",
            "file_buffer_size",
            "file_parallelism",
            "batch_size",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Recv",
        "name": "Recv",
        "params": [
            "tensor_type",
            "tensor_name",
            "send_device",
            "send_device_incarnation",
            "recv_device",
            "client_terminated",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RecvTPUEmbeddingActivations",
        "name": "RecvTPUEmbeddingActivations",
        "params": [
            "num_outputs",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReduceDataset",
        "name": "ReduceDataset",
        "params": [
            "input_dataset",
            "initial_state",
            "other_arguments",
            "f",
            "output_types",
            "output_shapes",
            "use_inter_op_parallelism",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReduceJoin",
        "name": "ReduceJoin",
        "params": [
            "inputs",
            "reduction_indices",
            "keep_dims",
            "separator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefEnter",
        "name": "RefEnter",
        "params": [
            "data",
            "frame_name",
            "is_constant",
            "parallel_iterations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefExit",
        "name": "RefExit",
        "params": [
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefIdentity",
        "name": "RefIdentity",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefMerge",
        "name": "RefMerge",
        "params": [
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefNextIteration",
        "name": "RefNextIteration",
        "params": [
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefSelect",
        "name": "RefSelect",
        "params": [
            "index",
            "inputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RefSwitch",
        "name": "RefSwitch",
        "params": [
            "data",
            "pred",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RegexFullMatch",
        "name": "RegexFullMatch",
        "params": [
            "input",
            "pattern",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RegexReplace",
        "name": "RegexReplace",
        "params": [
            "input",
            "pattern",
            "rewrite",
            "replace_global",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RegisterDataset",
        "name": "RegisterDataset",
        "params": [
            "dataset",
            "address",
            "protocol",
            "external_state_policy",
            "element_spec",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Relu",
        "name": "Relu",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Relu6",
        "name": "Relu6",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Relu6Grad",
        "name": "Relu6Grad",
        "params": [
            "gradients",
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReluGrad",
        "name": "ReluGrad",
        "params": [
            "gradients",
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RemoteCall",
        "name": "RemoteCall",
        "params": [
            "target",
            "args",
            "Tout",
            "f",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RepeatDataset",
        "name": "RepeatDataset",
        "params": [
            "input_dataset",
            "count",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RequantizationRange",
        "name": "RequantizationRange",
        "params": [
            "input",
            "input_min",
            "input_max",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RequantizationRangePerChannel",
        "name": "RequantizationRangePerChannel",
        "params": [
            "input",
            "input_min",
            "input_max",
            "clip_value_max",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Requantize",
        "name": "Requantize",
        "params": [
            "input",
            "input_min",
            "input_max",
            "requested_output_min",
            "requested_output_max",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RequantizePerChannel",
        "name": "RequantizePerChannel",
        "params": [
            "input",
            "input_min",
            "input_max",
            "requested_output_min",
            "requested_output_max",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Reshape",
        "name": "Reshape",
        "params": [
            "tensor",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeArea",
        "name": "ResizeArea",
        "params": [
            "images",
            "size",
            "align_corners",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeBicubic",
        "name": "ResizeBicubic",
        "params": [
            "images",
            "size",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeBicubicGrad",
        "name": "ResizeBicubicGrad",
        "params": [
            "grads",
            "original_image",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeBilinear",
        "name": "ResizeBilinear",
        "params": [
            "images",
            "size",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeBilinearGrad",
        "name": "ResizeBilinearGrad",
        "params": [
            "grads",
            "original_image",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeNearestNeighbor",
        "name": "ResizeNearestNeighbor",
        "params": [
            "images",
            "size",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResizeNearestNeighborGrad",
        "name": "ResizeNearestNeighborGrad",
        "params": [
            "grads",
            "size",
            "align_corners",
            "half_pixel_centers",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceAccumulatorApplyGradient",
        "name": "ResourceAccumulatorApplyGradient",
        "params": [
            "handle",
            "local_step",
            "gradient",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceAccumulatorNumAccumulated",
        "name": "ResourceAccumulatorNumAccumulated",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceAccumulatorSetGlobalStep",
        "name": "ResourceAccumulatorSetGlobalStep",
        "params": [
            "handle",
            "new_global_step",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceAccumulatorTakeGradient",
        "name": "ResourceAccumulatorTakeGradient",
        "params": [
            "handle",
            "num_required",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdaMax",
        "name": "ResourceApplyAdaMax",
        "params": [
            "var",
            "m",
            "v",
            "beta1_power",
            "lr",
            "beta1",
            "beta2",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdadelta",
        "name": "ResourceApplyAdadelta",
        "params": [
            "var",
            "accum",
            "accum_update",
            "lr",
            "rho",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdagrad",
        "name": "ResourceApplyAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdagradDA",
        "name": "ResourceApplyAdagradDA",
        "params": [
            "var",
            "gradient_accumulator",
            "gradient_squared_accumulator",
            "grad",
            "lr",
            "l1",
            "l2",
            "global_step",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdagradV2",
        "name": "ResourceApplyAdagradV2",
        "params": [
            "var",
            "accum",
            "lr",
            "epsilon",
            "grad",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdam",
        "name": "ResourceApplyAdam",
        "params": [
            "var",
            "m",
            "v",
            "beta1_power",
            "beta2_power",
            "lr",
            "beta1",
            "beta2",
            "epsilon",
            "grad",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAdamWithAmsgrad",
        "name": "ResourceApplyAdamWithAmsgrad",
        "params": [
            "var",
            "m",
            "v",
            "vhat",
            "beta1_power",
            "beta2_power",
            "lr",
            "beta1",
            "beta2",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyAddSign",
        "name": "ResourceApplyAddSign",
        "params": [
            "var",
            "m",
            "lr",
            "alpha",
            "sign_decay",
            "beta",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyCenteredRMSProp",
        "name": "ResourceApplyCenteredRMSProp",
        "params": [
            "var",
            "mg",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyFtrl",
        "name": "ResourceApplyFtrl",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "lr",
            "l1",
            "l2",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyFtrlV2",
        "name": "ResourceApplyFtrlV2",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "lr",
            "l1",
            "l2",
            "l2_shrinkage",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyGradientDescent",
        "name": "ResourceApplyGradientDescent",
        "params": [
            "var",
            "alpha",
            "delta",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyKerasMomentum",
        "name": "ResourceApplyKerasMomentum",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "momentum",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyMomentum",
        "name": "ResourceApplyMomentum",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "momentum",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyPowerSign",
        "name": "ResourceApplyPowerSign",
        "params": [
            "var",
            "m",
            "lr",
            "logbase",
            "sign_decay",
            "beta",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyProximalAdagrad",
        "name": "ResourceApplyProximalAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "l1",
            "l2",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyProximalGradientDescent",
        "name": "ResourceApplyProximalGradientDescent",
        "params": [
            "var",
            "alpha",
            "l1",
            "l2",
            "delta",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceApplyRMSProp",
        "name": "ResourceApplyRMSProp",
        "params": [
            "var",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceConditionalAccumulator",
        "name": "ResourceConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "container",
            "shared_name",
            "reduction_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceCountUpTo",
        "name": "ResourceCountUpTo",
        "params": [
            "resource",
            "limit",
            "T",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceGather",
        "name": "ResourceGather",
        "params": [
            "resource",
            "indices",
            "dtype",
            "batch_dims",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceGatherNd",
        "name": "ResourceGatherNd",
        "params": [
            "resource",
            "indices",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterAdd",
        "name": "ResourceScatterAdd",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterDiv",
        "name": "ResourceScatterDiv",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterMax",
        "name": "ResourceScatterMax",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterMin",
        "name": "ResourceScatterMin",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterMul",
        "name": "ResourceScatterMul",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterNdAdd",
        "name": "ResourceScatterNdAdd",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterNdMax",
        "name": "ResourceScatterNdMax",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterNdMin",
        "name": "ResourceScatterNdMin",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterNdSub",
        "name": "ResourceScatterNdSub",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterNdUpdate",
        "name": "ResourceScatterNdUpdate",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterSub",
        "name": "ResourceScatterSub",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceScatterUpdate",
        "name": "ResourceScatterUpdate",
        "params": [
            "resource",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyAdadelta",
        "name": "ResourceSparseApplyAdadelta",
        "params": [
            "var",
            "accum",
            "accum_update",
            "lr",
            "rho",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyAdagrad",
        "name": "ResourceSparseApplyAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "indices",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyAdagradDA",
        "name": "ResourceSparseApplyAdagradDA",
        "params": [
            "var",
            "gradient_accumulator",
            "gradient_squared_accumulator",
            "grad",
            "indices",
            "lr",
            "l1",
            "l2",
            "global_step",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyAdagradV2",
        "name": "ResourceSparseApplyAdagradV2",
        "params": [
            "var",
            "accum",
            "lr",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyCenteredRMSProp",
        "name": "ResourceSparseApplyCenteredRMSProp",
        "params": [
            "var",
            "mg",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyFtrl",
        "name": "ResourceSparseApplyFtrl",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "indices",
            "lr",
            "l1",
            "l2",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyFtrlV2",
        "name": "ResourceSparseApplyFtrlV2",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "indices",
            "lr",
            "l1",
            "l2",
            "l2_shrinkage",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyKerasMomentum",
        "name": "ResourceSparseApplyKerasMomentum",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "indices",
            "momentum",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyMomentum",
        "name": "ResourceSparseApplyMomentum",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "indices",
            "momentum",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyProximalAdagrad",
        "name": "ResourceSparseApplyProximalAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "l1",
            "l2",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyProximalGradientDescent",
        "name": "ResourceSparseApplyProximalGradientDescent",
        "params": [
            "var",
            "alpha",
            "l1",
            "l2",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceSparseApplyRMSProp",
        "name": "ResourceSparseApplyRMSProp",
        "params": [
            "var",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ResourceStridedSliceAssign",
        "name": "ResourceStridedSliceAssign",
        "params": [
            "ref",
            "begin",
            "end",
            "strides",
            "value",
            "begin_mask",
            "end_mask",
            "ellipsis_mask",
            "new_axis_mask",
            "shrink_axis_mask",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Restore",
        "name": "Restore",
        "params": [
            "file_pattern",
            "tensor_name",
            "dt",
            "preferred_shard",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RestoreSlice",
        "name": "RestoreSlice",
        "params": [
            "file_pattern",
            "tensor_name",
            "shape_and_slice",
            "dt",
            "preferred_shard",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RestoreV2",
        "name": "RestoreV2",
        "params": [
            "prefix",
            "tensor_names",
            "shape_and_slices",
            "dtypes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingADAMParameters",
        "name": "RetrieveTPUEmbeddingADAMParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingAdadeltaParameters",
        "name": "RetrieveTPUEmbeddingAdadeltaParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingAdagradMomentumParameters",
        "name": "RetrieveTPUEmbeddingAdagradMomentumParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingAdagradParameters",
        "name": "RetrieveTPUEmbeddingAdagradParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingCenteredRMSPropParameters",
        "name": "RetrieveTPUEmbeddingCenteredRMSPropParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingFTRLParameters",
        "name": "RetrieveTPUEmbeddingFTRLParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingFrequencyEstimatorParameters",
        "name": "RetrieveTPUEmbeddingFrequencyEstimatorParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingMDLAdagradLightParameters",
        "name": "RetrieveTPUEmbeddingMDLAdagradLightParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingMomentumParameters",
        "name": "RetrieveTPUEmbeddingMomentumParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingProximalAdagradParameters",
        "name": "RetrieveTPUEmbeddingProximalAdagradParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingProximalYogiParameters",
        "name": "RetrieveTPUEmbeddingProximalYogiParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingRMSPropParameters",
        "name": "RetrieveTPUEmbeddingRMSPropParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RetrieveTPUEmbeddingStochasticGradientDescentParameters",
        "name": "RetrieveTPUEmbeddingStochasticGradientDescentParameters",
        "params": [
            "num_shards",
            "shard_id",
            "table_id",
            "table_name",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Reverse",
        "name": "Reverse",
        "params": [
            "tensor",
            "dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReverseSequence",
        "name": "ReverseSequence",
        "params": [
            "input",
            "seq_lengths",
            "seq_dim",
            "batch_dim",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ReverseV2",
        "name": "ReverseV2",
        "params": [
            "tensor",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RightShift",
        "name": "RightShift",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Rint",
        "name": "Rint",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RngReadAndSkip",
        "name": "RngReadAndSkip",
        "params": [
            "resource",
            "alg",
            "delta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RngSkip",
        "name": "RngSkip",
        "params": [
            "resource",
            "algorithm",
            "delta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Roll",
        "name": "Roll",
        "params": [
            "input",
            "shift",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Round",
        "name": "Round",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Rsqrt",
        "name": "Rsqrt",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.RsqrtGrad",
        "name": "RsqrtGrad",
        "params": [
            "y",
            "dy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SampleDistortedBoundingBox",
        "name": "SampleDistortedBoundingBox",
        "params": [
            "image_size",
            "bounding_boxes",
            "seed",
            "seed2",
            "min_object_covered",
            "aspect_ratio_range",
            "area_range",
            "max_attempts",
            "use_image_if_no_bounding_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SampleDistortedBoundingBoxV2",
        "name": "SampleDistortedBoundingBoxV2",
        "params": [
            "image_size",
            "bounding_boxes",
            "min_object_covered",
            "seed",
            "seed2",
            "aspect_ratio_range",
            "area_range",
            "max_attempts",
            "use_image_if_no_bounding_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SamplingDataset",
        "name": "SamplingDataset",
        "params": [
            "input_dataset",
            "rate",
            "seed",
            "seed2",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Save",
        "name": "Save",
        "params": [
            "filename",
            "tensor_names",
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SaveDataset",
        "name": "SaveDataset",
        "params": [
            "input_dataset",
            "path",
            "shard_func_other_args",
            "shard_func",
            "compression",
            "use_shard_func",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SaveDatasetV2",
        "name": "SaveDatasetV2",
        "params": [
            "input_dataset",
            "path",
            "shard_func_other_args",
            "shard_func",
            "output_types",
            "output_shapes",
            "compression",
            "use_shard_func",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SaveSlices",
        "name": "SaveSlices",
        "params": [
            "filename",
            "tensor_names",
            "shapes_and_slices",
            "data",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SaveV2",
        "name": "SaveV2",
        "params": [
            "prefix",
            "tensor_names",
            "shape_and_slices",
            "tensors",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScalarSummary",
        "name": "ScalarSummary",
        "params": [
            "tags",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScaleAndTranslate",
        "name": "ScaleAndTranslate",
        "params": [
            "images",
            "size",
            "scale",
            "translation",
            "kernel_type",
            "antialias",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScaleAndTranslateGrad",
        "name": "ScaleAndTranslateGrad",
        "params": [
            "grads",
            "original_image",
            "scale",
            "translation",
            "kernel_type",
            "antialias",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScanDataset",
        "name": "ScanDataset",
        "params": [
            "input_dataset",
            "initial_state",
            "other_arguments",
            "f",
            "output_types",
            "output_shapes",
            "preserve_cardinality",
            "use_default_device",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterAdd",
        "name": "ScatterAdd",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterDiv",
        "name": "ScatterDiv",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterMax",
        "name": "ScatterMax",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterMin",
        "name": "ScatterMin",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterMul",
        "name": "ScatterMul",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNd",
        "name": "ScatterNd",
        "params": [
            "indices",
            "updates",
            "shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNdAdd",
        "name": "ScatterNdAdd",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNdMax",
        "name": "ScatterNdMax",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNdMin",
        "name": "ScatterNdMin",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNdNonAliasingAdd",
        "name": "ScatterNdNonAliasingAdd",
        "params": [
            "input",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNdSub",
        "name": "ScatterNdSub",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterNdUpdate",
        "name": "ScatterNdUpdate",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterSub",
        "name": "ScatterSub",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ScatterUpdate",
        "name": "ScatterUpdate",
        "params": [
            "ref",
            "indices",
            "updates",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SdcaFprint",
        "name": "SdcaFprint",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SdcaOptimizer",
        "name": "SdcaOptimizer",
        "params": [
            "sparse_example_indices",
            "sparse_feature_indices",
            "sparse_feature_values",
            "dense_features",
            "example_weights",
            "example_labels",
            "sparse_indices",
            "sparse_weights",
            "dense_weights",
            "example_state_data",
            "loss_type",
            "l1",
            "l2",
            "num_loss_partitions",
            "num_inner_iterations",
            "adaptative",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SdcaOptimizerV2",
        "name": "SdcaOptimizerV2",
        "params": [
            "sparse_example_indices",
            "sparse_feature_indices",
            "sparse_feature_values",
            "dense_features",
            "example_weights",
            "example_labels",
            "sparse_indices",
            "sparse_weights",
            "dense_weights",
            "example_state_data",
            "loss_type",
            "l1",
            "l2",
            "num_loss_partitions",
            "num_inner_iterations",
            "adaptive",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SdcaShrinkL1",
        "name": "SdcaShrinkL1",
        "params": [
            "weights",
            "l1",
            "l2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SegmentMax",
        "name": "SegmentMax",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SegmentMean",
        "name": "SegmentMean",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SegmentMin",
        "name": "SegmentMin",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SegmentProd",
        "name": "SegmentProd",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SegmentSum",
        "name": "SegmentSum",
        "params": [
            "data",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Select",
        "name": "Select",
        "params": [
            "condition",
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SelectV2",
        "name": "SelectV2",
        "params": [
            "condition",
            "t",
            "e",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SelfAdjointEig",
        "name": "SelfAdjointEig",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SelfAdjointEigV2",
        "name": "SelfAdjointEigV2",
        "params": [
            "input",
            "compute_v",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Selu",
        "name": "Selu",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SeluGrad",
        "name": "SeluGrad",
        "params": [
            "gradients",
            "outputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Send",
        "name": "Send",
        "params": [
            "tensor",
            "tensor_name",
            "send_device",
            "send_device_incarnation",
            "recv_device",
            "client_terminated",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SendTPUEmbeddingGradients",
        "name": "SendTPUEmbeddingGradients",
        "params": [
            "inputs",
            "learning_rates",
            "config",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SerializeIterator",
        "name": "SerializeIterator",
        "params": [
            "resource_handle",
            "external_state_policy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SerializeManySparse",
        "name": "SerializeManySparse",
        "params": [
            "sparse_indices",
            "sparse_values",
            "sparse_shape",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SerializeSparse",
        "name": "SerializeSparse",
        "params": [
            "sparse_indices",
            "sparse_values",
            "sparse_shape",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SerializeTensor",
        "name": "SerializeTensor",
        "params": [
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SetSize",
        "name": "SetSize",
        "params": [
            "set_indices",
            "set_values",
            "set_shape",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SetStatsAggregatorDataset",
        "name": "SetStatsAggregatorDataset",
        "params": [
            "input_dataset",
            "stats_aggregator",
            "tag",
            "counter_prefix",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Shape",
        "name": "Shape",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShapeN",
        "name": "ShapeN",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShardDataset",
        "name": "ShardDataset",
        "params": [
            "input_dataset",
            "num_shards",
            "index",
            "output_types",
            "output_shapes",
            "require_non_empty",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShardedFilename",
        "name": "ShardedFilename",
        "params": [
            "basename",
            "shard",
            "num_shards",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShardedFilespec",
        "name": "ShardedFilespec",
        "params": [
            "basename",
            "num_shards",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShuffleAndRepeatDataset",
        "name": "ShuffleAndRepeatDataset",
        "params": [
            "input_dataset",
            "buffer_size",
            "seed",
            "seed2",
            "count",
            "output_types",
            "output_shapes",
            "reshuffle_each_iteration",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShuffleAndRepeatDatasetV2",
        "name": "ShuffleAndRepeatDatasetV2",
        "params": [
            "input_dataset",
            "buffer_size",
            "seed",
            "seed2",
            "count",
            "seed_generator",
            "output_types",
            "output_shapes",
            "reshuffle_each_iteration",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShuffleDataset",
        "name": "ShuffleDataset",
        "params": [
            "input_dataset",
            "buffer_size",
            "seed",
            "seed2",
            "output_types",
            "output_shapes",
            "reshuffle_each_iteration",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShuffleDatasetV2",
        "name": "ShuffleDatasetV2",
        "params": [
            "input_dataset",
            "buffer_size",
            "seed_generator",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShuffleDatasetV3",
        "name": "ShuffleDatasetV3",
        "params": [
            "input_dataset",
            "buffer_size",
            "seed",
            "seed2",
            "seed_generator",
            "output_types",
            "output_shapes",
            "reshuffle_each_iteration",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ShutdownDistributedTPU",
        "name": "ShutdownDistributedTPU",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sigmoid",
        "name": "Sigmoid",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SigmoidGrad",
        "name": "SigmoidGrad",
        "params": [
            "y",
            "dy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sign",
        "name": "Sign",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sin",
        "name": "Sin",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sinh",
        "name": "Sinh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Size",
        "name": "Size",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SkipDataset",
        "name": "SkipDataset",
        "params": [
            "input_dataset",
            "count",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SleepDataset",
        "name": "SleepDataset",
        "params": [
            "input_dataset",
            "sleep_microseconds",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Slice",
        "name": "Slice",
        "params": [
            "input",
            "begin",
            "size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SlidingWindowDataset",
        "name": "SlidingWindowDataset",
        "params": [
            "input_dataset",
            "window_size",
            "window_shift",
            "window_stride",
            "output_types",
            "output_shapes",
            "drop_remainder",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Snapshot",
        "name": "Snapshot",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SnapshotDataset",
        "name": "SnapshotDataset",
        "params": [
            "input_dataset",
            "path",
            "output_types",
            "output_shapes",
            "compression",
            "reader_path_prefix",
            "writer_path_prefix",
            "shard_size_bytes",
            "pending_snapshot_expiry_seconds",
            "num_reader_threads",
            "reader_buffer_size",
            "num_writer_threads",
            "writer_buffer_size",
            "shuffle_on_read",
            "seed",
            "seed2",
            "mode",
            "snapshot_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SnapshotDatasetReader",
        "name": "SnapshotDatasetReader",
        "params": [
            "shard_dir",
            "start_index",
            "output_types",
            "output_shapes",
            "version",
            "compression",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SnapshotDatasetV2",
        "name": "SnapshotDatasetV2",
        "params": [
            "input_dataset",
            "path",
            "reader_func_other_args",
            "shard_func_other_args",
            "output_types",
            "output_shapes",
            "reader_func",
            "shard_func",
            "compression",
            "reader_prefix",
            "writer_prefix",
            "hash_valid",
            "hash",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SnapshotNestedDatasetReader",
        "name": "SnapshotNestedDatasetReader",
        "params": [
            "inputs",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SobolSample",
        "name": "SobolSample",
        "params": [
            "dim",
            "num_results",
            "skip",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Softmax",
        "name": "Softmax",
        "params": [
            "logits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SoftmaxCrossEntropyWithLogits",
        "name": "SoftmaxCrossEntropyWithLogits",
        "params": [
            "features",
            "labels",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Softplus",
        "name": "Softplus",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SoftplusGrad",
        "name": "SoftplusGrad",
        "params": [
            "gradients",
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Softsign",
        "name": "Softsign",
        "params": [
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SoftsignGrad",
        "name": "SoftsignGrad",
        "params": [
            "gradients",
            "features",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SpaceToBatch",
        "name": "SpaceToBatch",
        "params": [
            "input",
            "paddings",
            "block_size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SpaceToBatchND",
        "name": "SpaceToBatchND",
        "params": [
            "input",
            "block_shape",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SpaceToDepth",
        "name": "SpaceToDepth",
        "params": [
            "input",
            "block_size",
            "data_format",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseAccumulatorApplyGradient",
        "name": "SparseAccumulatorApplyGradient",
        "params": [
            "handle",
            "local_step",
            "gradient_indices",
            "gradient_values",
            "gradient_shape",
            "has_known_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseAccumulatorTakeGradient",
        "name": "SparseAccumulatorTakeGradient",
        "params": [
            "handle",
            "num_required",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseAdd",
        "name": "SparseAdd",
        "params": [
            "a_indices",
            "a_values",
            "a_shape",
            "b_indices",
            "b_values",
            "b_shape",
            "thresh",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseAddGrad",
        "name": "SparseAddGrad",
        "params": [
            "backprop_val_grad",
            "a_indices",
            "b_indices",
            "sum_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyAdadelta",
        "name": "SparseApplyAdadelta",
        "params": [
            "var",
            "accum",
            "accum_update",
            "lr",
            "rho",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyAdagrad",
        "name": "SparseApplyAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "indices",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyAdagradDA",
        "name": "SparseApplyAdagradDA",
        "params": [
            "var",
            "gradient_accumulator",
            "gradient_squared_accumulator",
            "grad",
            "indices",
            "lr",
            "l1",
            "l2",
            "global_step",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyAdagradV2",
        "name": "SparseApplyAdagradV2",
        "params": [
            "var",
            "accum",
            "lr",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "update_slots",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyCenteredRMSProp",
        "name": "SparseApplyCenteredRMSProp",
        "params": [
            "var",
            "mg",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyFtrl",
        "name": "SparseApplyFtrl",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "indices",
            "lr",
            "l1",
            "l2",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyFtrlV2",
        "name": "SparseApplyFtrlV2",
        "params": [
            "var",
            "accum",
            "linear",
            "grad",
            "indices",
            "lr",
            "l1",
            "l2",
            "l2_shrinkage",
            "lr_power",
            "use_locking",
            "multiply_linear_by_lr",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyMomentum",
        "name": "SparseApplyMomentum",
        "params": [
            "var",
            "accum",
            "lr",
            "grad",
            "indices",
            "momentum",
            "use_locking",
            "use_nesterov",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyProximalAdagrad",
        "name": "SparseApplyProximalAdagrad",
        "params": [
            "var",
            "accum",
            "lr",
            "l1",
            "l2",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyProximalGradientDescent",
        "name": "SparseApplyProximalGradientDescent",
        "params": [
            "var",
            "alpha",
            "l1",
            "l2",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseApplyRMSProp",
        "name": "SparseApplyRMSProp",
        "params": [
            "var",
            "ms",
            "mom",
            "lr",
            "rho",
            "momentum",
            "epsilon",
            "grad",
            "indices",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseBincount",
        "name": "SparseBincount",
        "params": [
            "indices",
            "values",
            "dense_shape",
            "size",
            "weights",
            "binary_output",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseConcat",
        "name": "SparseConcat",
        "params": [
            "indices",
            "values",
            "shapes",
            "concat_dim",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseConditionalAccumulator",
        "name": "SparseConditionalAccumulator",
        "params": [
            "dtype",
            "shape",
            "container",
            "shared_name",
            "reduction_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseCountSparseOutput",
        "name": "SparseCountSparseOutput",
        "params": [
            "indices",
            "values",
            "dense_shape",
            "weights",
            "binary_output",
            "minlength",
            "maxlength",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseCross",
        "name": "SparseCross",
        "params": [
            "indices",
            "values",
            "shapes",
            "dense_inputs",
            "hashed_output",
            "num_buckets",
            "hash_key",
            "out_type",
            "internal_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseCrossHashed",
        "name": "SparseCrossHashed",
        "params": [
            "indices",
            "values",
            "shapes",
            "dense_inputs",
            "num_buckets",
            "strong_hash",
            "salt",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseCrossV2",
        "name": "SparseCrossV2",
        "params": [
            "indices",
            "values",
            "shapes",
            "dense_inputs",
            "sep",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseDenseCwiseAdd",
        "name": "SparseDenseCwiseAdd",
        "params": [
            "sp_indices",
            "sp_values",
            "sp_shape",
            "dense",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseDenseCwiseDiv",
        "name": "SparseDenseCwiseDiv",
        "params": [
            "sp_indices",
            "sp_values",
            "sp_shape",
            "dense",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseDenseCwiseMul",
        "name": "SparseDenseCwiseMul",
        "params": [
            "sp_indices",
            "sp_values",
            "sp_shape",
            "dense",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseFillEmptyRows",
        "name": "SparseFillEmptyRows",
        "params": [
            "indices",
            "values",
            "dense_shape",
            "default_value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseFillEmptyRowsGrad",
        "name": "SparseFillEmptyRowsGrad",
        "params": [
            "reverse_index_map",
            "grad_values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatMul",
        "name": "SparseMatMul",
        "params": [
            "a",
            "b",
            "transpose_a",
            "transpose_b",
            "a_is_sparse",
            "b_is_sparse",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixAdd",
        "name": "SparseMatrixAdd",
        "params": [
            "a",
            "b",
            "alpha",
            "beta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixMatMul",
        "name": "SparseMatrixMatMul",
        "params": [
            "a",
            "b",
            "transpose_a",
            "transpose_b",
            "adjoint_a",
            "adjoint_b",
            "transpose_output",
            "conjugate_output",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixMul",
        "name": "SparseMatrixMul",
        "params": [
            "a",
            "b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixNNZ",
        "name": "SparseMatrixNNZ",
        "params": [
            "sparse_matrix",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixOrderingAMD",
        "name": "SparseMatrixOrderingAMD",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixSoftmax",
        "name": "SparseMatrixSoftmax",
        "params": [
            "logits",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixSoftmaxGrad",
        "name": "SparseMatrixSoftmaxGrad",
        "params": [
            "softmax",
            "grad_softmax",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixSparseCholesky",
        "name": "SparseMatrixSparseCholesky",
        "params": [
            "input",
            "permutation",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixSparseMatMul",
        "name": "SparseMatrixSparseMatMul",
        "params": [
            "a",
            "b",
            "type",
            "transpose_a",
            "transpose_b",
            "adjoint_a",
            "adjoint_b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixTranspose",
        "name": "SparseMatrixTranspose",
        "params": [
            "input",
            "type",
            "conjugate",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseMatrixZeros",
        "name": "SparseMatrixZeros",
        "params": [
            "dense_shape",
            "type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseReduceMax",
        "name": "SparseReduceMax",
        "params": [
            "input_indices",
            "input_values",
            "input_shape",
            "reduction_axes",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseReduceMaxSparse",
        "name": "SparseReduceMaxSparse",
        "params": [
            "input_indices",
            "input_values",
            "input_shape",
            "reduction_axes",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseReduceSum",
        "name": "SparseReduceSum",
        "params": [
            "input_indices",
            "input_values",
            "input_shape",
            "reduction_axes",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseReduceSumSparse",
        "name": "SparseReduceSumSparse",
        "params": [
            "input_indices",
            "input_values",
            "input_shape",
            "reduction_axes",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseReorder",
        "name": "SparseReorder",
        "params": [
            "input_indices",
            "input_values",
            "input_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseReshape",
        "name": "SparseReshape",
        "params": [
            "input_indices",
            "input_shape",
            "new_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentMean",
        "name": "SparseSegmentMean",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentMeanGrad",
        "name": "SparseSegmentMeanGrad",
        "params": [
            "grad",
            "indices",
            "segment_ids",
            "output_dim0",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentMeanWithNumSegments",
        "name": "SparseSegmentMeanWithNumSegments",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentSqrtN",
        "name": "SparseSegmentSqrtN",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentSqrtNGrad",
        "name": "SparseSegmentSqrtNGrad",
        "params": [
            "grad",
            "indices",
            "segment_ids",
            "output_dim0",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentSqrtNWithNumSegments",
        "name": "SparseSegmentSqrtNWithNumSegments",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentSum",
        "name": "SparseSegmentSum",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentSumGrad",
        "name": "SparseSegmentSumGrad",
        "params": [
            "grad",
            "indices",
            "segment_ids",
            "output_dim0",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSegmentSumWithNumSegments",
        "name": "SparseSegmentSumWithNumSegments",
        "params": [
            "data",
            "indices",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSlice",
        "name": "SparseSlice",
        "params": [
            "indices",
            "values",
            "shape",
            "start",
            "size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSliceGrad",
        "name": "SparseSliceGrad",
        "params": [
            "backprop_val_grad",
            "input_indices",
            "input_start",
            "output_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSoftmax",
        "name": "SparseSoftmax",
        "params": [
            "sp_indices",
            "sp_values",
            "sp_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSoftmaxCrossEntropyWithLogits",
        "name": "SparseSoftmaxCrossEntropyWithLogits",
        "params": [
            "features",
            "labels",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSparseMaximum",
        "name": "SparseSparseMaximum",
        "params": [
            "a_indices",
            "a_values",
            "a_shape",
            "b_indices",
            "b_values",
            "b_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSparseMinimum",
        "name": "SparseSparseMinimum",
        "params": [
            "a_indices",
            "a_values",
            "a_shape",
            "b_indices",
            "b_values",
            "b_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseSplit",
        "name": "SparseSplit",
        "params": [
            "split_dim",
            "indices",
            "values",
            "shape",
            "num_split",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseTensorDenseAdd",
        "name": "SparseTensorDenseAdd",
        "params": [
            "a_indices",
            "a_values",
            "a_shape",
            "b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseTensorDenseMatMul",
        "name": "SparseTensorDenseMatMul",
        "params": [
            "a_indices",
            "a_values",
            "a_shape",
            "b",
            "adjoint_a",
            "adjoint_b",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseTensorSliceDataset",
        "name": "SparseTensorSliceDataset",
        "params": [
            "indices",
            "values",
            "dense_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseTensorToCSRSparseMatrix",
        "name": "SparseTensorToCSRSparseMatrix",
        "params": [
            "indices",
            "values",
            "dense_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseToDense",
        "name": "SparseToDense",
        "params": [
            "sparse_indices",
            "output_shape",
            "sparse_values",
            "default_value",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SparseToSparseSetOperation",
        "name": "SparseToSparseSetOperation",
        "params": [
            "set1_indices",
            "set1_values",
            "set1_shape",
            "set2_indices",
            "set2_values",
            "set2_shape",
            "set_operation",
            "validate_indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Spence",
        "name": "Spence",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Split",
        "name": "Split",
        "params": [
            "axis",
            "value",
            "num_split",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SplitV",
        "name": "SplitV",
        "params": [
            "value",
            "size_splits",
            "axis",
            "num_split",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SqlDataset",
        "name": "SqlDataset",
        "params": [
            "driver_name",
            "data_source_name",
            "query",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sqrt",
        "name": "Sqrt",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SqrtGrad",
        "name": "SqrtGrad",
        "params": [
            "y",
            "dy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Square",
        "name": "Square",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SquaredDifference",
        "name": "SquaredDifference",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Squeeze",
        "name": "Squeeze",
        "params": [
            "input",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Stack",
        "name": "Stack",
        "params": [
            "elem_type",
            "stack_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackClose",
        "name": "StackClose",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackCloseV2",
        "name": "StackCloseV2",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackPop",
        "name": "StackPop",
        "params": [
            "handle",
            "elem_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackPopV2",
        "name": "StackPopV2",
        "params": [
            "handle",
            "elem_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackPush",
        "name": "StackPush",
        "params": [
            "handle",
            "elem",
            "swap_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackPushV2",
        "name": "StackPushV2",
        "params": [
            "handle",
            "elem",
            "swap_memory",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StackV2",
        "name": "StackV2",
        "params": [
            "max_size",
            "elem_type",
            "stack_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Stage",
        "name": "Stage",
        "params": [
            "values",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StageClear",
        "name": "StageClear",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StagePeek",
        "name": "StagePeek",
        "params": [
            "index",
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StageSize",
        "name": "StageSize",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulPartitionedCall",
        "name": "StatefulPartitionedCall",
        "params": [
            "args",
            "Tout",
            "f",
            "config",
            "config_proto",
            "executor_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulRandomBinomial",
        "name": "StatefulRandomBinomial",
        "params": [
            "resource",
            "algorithm",
            "shape",
            "counts",
            "probs",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulStandardNormal",
        "name": "StatefulStandardNormal",
        "params": [
            "resource",
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulStandardNormalV2",
        "name": "StatefulStandardNormalV2",
        "params": [
            "resource",
            "algorithm",
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulTruncatedNormal",
        "name": "StatefulTruncatedNormal",
        "params": [
            "resource",
            "algorithm",
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulUniform",
        "name": "StatefulUniform",
        "params": [
            "resource",
            "algorithm",
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulUniformFullInt",
        "name": "StatefulUniformFullInt",
        "params": [
            "resource",
            "algorithm",
            "shape",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatefulUniformInt",
        "name": "StatefulUniformInt",
        "params": [
            "resource",
            "algorithm",
            "shape",
            "minval",
            "maxval",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessCase",
        "name": "StatelessCase",
        "params": [
            "branch_index",
            "input",
            "Tout",
            "branches",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessIf",
        "name": "StatelessIf",
        "params": [
            "cond",
            "input",
            "Tout",
            "then_branch",
            "else_branch",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessMultinomial",
        "name": "StatelessMultinomial",
        "params": [
            "logits",
            "num_samples",
            "seed",
            "output_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessParameterizedTruncatedNormal",
        "name": "StatelessParameterizedTruncatedNormal",
        "params": [
            "shape",
            "seed",
            "means",
            "stddevs",
            "minvals",
            "maxvals",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomBinomial",
        "name": "StatelessRandomBinomial",
        "params": [
            "shape",
            "seed",
            "counts",
            "probs",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomGammaV2",
        "name": "StatelessRandomGammaV2",
        "params": [
            "shape",
            "seed",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomGetAlg",
        "name": "StatelessRandomGetAlg",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomGetKeyCounter",
        "name": "StatelessRandomGetKeyCounter",
        "params": [
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomGetKeyCounterAlg",
        "name": "StatelessRandomGetKeyCounterAlg",
        "params": [
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomNormal",
        "name": "StatelessRandomNormal",
        "params": [
            "shape",
            "seed",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomNormalV2",
        "name": "StatelessRandomNormalV2",
        "params": [
            "shape",
            "key",
            "counter",
            "alg",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomPoisson",
        "name": "StatelessRandomPoisson",
        "params": [
            "shape",
            "seed",
            "lam",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomUniform",
        "name": "StatelessRandomUniform",
        "params": [
            "shape",
            "seed",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomUniformFullInt",
        "name": "StatelessRandomUniformFullInt",
        "params": [
            "shape",
            "seed",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomUniformFullIntV2",
        "name": "StatelessRandomUniformFullIntV2",
        "params": [
            "shape",
            "key",
            "counter",
            "alg",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomUniformInt",
        "name": "StatelessRandomUniformInt",
        "params": [
            "shape",
            "seed",
            "minval",
            "maxval",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomUniformIntV2",
        "name": "StatelessRandomUniformIntV2",
        "params": [
            "shape",
            "key",
            "counter",
            "alg",
            "minval",
            "maxval",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessRandomUniformV2",
        "name": "StatelessRandomUniformV2",
        "params": [
            "shape",
            "key",
            "counter",
            "alg",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessSampleDistortedBoundingBox",
        "name": "StatelessSampleDistortedBoundingBox",
        "params": [
            "image_size",
            "bounding_boxes",
            "min_object_covered",
            "seed",
            "aspect_ratio_range",
            "area_range",
            "max_attempts",
            "use_image_if_no_bounding_boxes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessTruncatedNormal",
        "name": "StatelessTruncatedNormal",
        "params": [
            "shape",
            "seed",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessTruncatedNormalV2",
        "name": "StatelessTruncatedNormalV2",
        "params": [
            "shape",
            "key",
            "counter",
            "alg",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatelessWhile",
        "name": "StatelessWhile",
        "params": [
            "input",
            "cond",
            "body",
            "output_shapes",
            "parallel_iterations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StaticRegexFullMatch",
        "name": "StaticRegexFullMatch",
        "params": [
            "input",
            "pattern",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StaticRegexReplace",
        "name": "StaticRegexReplace",
        "params": [
            "input",
            "pattern",
            "rewrite",
            "replace_global",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatsAggregatorHandle",
        "name": "StatsAggregatorHandle",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatsAggregatorHandleV2",
        "name": "StatsAggregatorHandleV2",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatsAggregatorSetSummaryWriter",
        "name": "StatsAggregatorSetSummaryWriter",
        "params": [
            "stats_aggregator",
            "summary",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StatsAggregatorSummary",
        "name": "StatsAggregatorSummary",
        "params": [
            "iterator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StopGradient",
        "name": "StopGradient",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StridedSlice",
        "name": "StridedSlice",
        "params": [
            "input",
            "begin",
            "end",
            "strides",
            "begin_mask",
            "end_mask",
            "ellipsis_mask",
            "new_axis_mask",
            "shrink_axis_mask",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StridedSliceAssign",
        "name": "StridedSliceAssign",
        "params": [
            "ref",
            "begin",
            "end",
            "strides",
            "value",
            "begin_mask",
            "end_mask",
            "ellipsis_mask",
            "new_axis_mask",
            "shrink_axis_mask",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StridedSliceGrad",
        "name": "StridedSliceGrad",
        "params": [
            "shape",
            "begin",
            "end",
            "strides",
            "dy",
            "begin_mask",
            "end_mask",
            "ellipsis_mask",
            "new_axis_mask",
            "shrink_axis_mask",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringFormat",
        "name": "StringFormat",
        "params": [
            "inputs",
            "template",
            "placeholder",
            "summarize",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringJoin",
        "name": "StringJoin",
        "params": [
            "inputs",
            "separator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringLength",
        "name": "StringLength",
        "params": [
            "input",
            "unit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringLower",
        "name": "StringLower",
        "params": [
            "input",
            "encoding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringNGrams",
        "name": "StringNGrams",
        "params": [
            "data",
            "data_splits",
            "separator",
            "ngram_widths",
            "left_pad",
            "right_pad",
            "pad_width",
            "preserve_short_sequences",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringSplit",
        "name": "StringSplit",
        "params": [
            "input",
            "delimiter",
            "skip_empty",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringSplitV2",
        "name": "StringSplitV2",
        "params": [
            "input",
            "sep",
            "maxsplit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringStrip",
        "name": "StringStrip",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringToHashBucket",
        "name": "StringToHashBucket",
        "params": [
            "string_tensor",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringToHashBucketFast",
        "name": "StringToHashBucketFast",
        "params": [
            "input",
            "num_buckets",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringToHashBucketStrong",
        "name": "StringToHashBucketStrong",
        "params": [
            "input",
            "num_buckets",
            "key",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringToNumber",
        "name": "StringToNumber",
        "params": [
            "string_tensor",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.StringUpper",
        "name": "StringUpper",
        "params": [
            "input",
            "encoding",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sub",
        "name": "Sub",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Substr",
        "name": "Substr",
        "params": [
            "input",
            "pos",
            "len",
            "unit",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Sum",
        "name": "Sum",
        "params": [
            "input",
            "axis",
            "keep_dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SummaryWriter",
        "name": "SummaryWriter",
        "params": [
            "shared_name",
            "container",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Svd",
        "name": "Svd",
        "params": [
            "input",
            "compute_uv",
            "full_matrices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Switch",
        "name": "Switch",
        "params": [
            "data",
            "pred",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.SymbolicGradient",
        "name": "SymbolicGradient",
        "params": [
            "input",
            "Tout",
            "f",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TFRecordDataset",
        "name": "TFRecordDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TFRecordReader",
        "name": "TFRecordReader",
        "params": [
            "container",
            "shared_name",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TFRecordReaderV2",
        "name": "TFRecordReaderV2",
        "params": [
            "container",
            "shared_name",
            "compression_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUCompilationResult",
        "name": "TPUCompilationResult",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUEmbeddingActivations",
        "name": "TPUEmbeddingActivations",
        "params": [
            "embedding_variable",
            "sliced_activations",
            "table_id",
            "lookup_id",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUOrdinalSelector",
        "name": "TPUOrdinalSelector",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUPartitionedCall",
        "name": "TPUPartitionedCall",
        "params": [
            "args",
            "device_ordinal",
            "Tout",
            "f",
            "autotuner_thresh",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUPartitionedInput",
        "name": "TPUPartitionedInput",
        "params": [
            "inputs",
            "partition_dim",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUPartitionedOutput",
        "name": "TPUPartitionedOutput",
        "params": [
            "inputs",
            "num_splits",
            "partition_dim",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUReplicateMetadata",
        "name": "TPUReplicateMetadata",
        "params": [
            "num_replicas",
            "num_cores_per_replica",
            "topology",
            "use_tpu",
            "device_assignment",
            "computation_shape",
            "host_compute_core",
            "padding_map",
            "step_marker_location",
            "allow_soft_placement",
            "use_spmd_for_xla_partitioning",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUReplicatedInput",
        "name": "TPUReplicatedInput",
        "params": [
            "inputs",
            "is_mirrored_variable",
            "index",
            "is_packed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TPUReplicatedOutput",
        "name": "TPUReplicatedOutput",
        "params": [
            "input",
            "num_replicas",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TakeDataset",
        "name": "TakeDataset",
        "params": [
            "input_dataset",
            "count",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TakeManySparseFromTensorsMap",
        "name": "TakeManySparseFromTensorsMap",
        "params": [
            "sparse_handles",
            "dtype",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TakeWhileDataset",
        "name": "TakeWhileDataset",
        "params": [
            "input_dataset",
            "other_arguments",
            "predicate",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Tan",
        "name": "Tan",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Tanh",
        "name": "Tanh",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TanhGrad",
        "name": "TanhGrad",
        "params": [
            "y",
            "dy",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TemporaryVariable",
        "name": "TemporaryVariable",
        "params": [
            "shape",
            "dtype",
            "var_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArray",
        "name": "TensorArray",
        "params": [
            "size",
            "dtype",
            "dynamic_size",
            "clear_after_read",
            "tensor_array_name",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayClose",
        "name": "TensorArrayClose",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayCloseV2",
        "name": "TensorArrayCloseV2",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayCloseV3",
        "name": "TensorArrayCloseV3",
        "params": [
            "handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayConcat",
        "name": "TensorArrayConcat",
        "params": [
            "handle",
            "flow_in",
            "dtype",
            "element_shape_except0",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayConcatV2",
        "name": "TensorArrayConcatV2",
        "params": [
            "handle",
            "flow_in",
            "dtype",
            "element_shape_except0",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayConcatV3",
        "name": "TensorArrayConcatV3",
        "params": [
            "handle",
            "flow_in",
            "dtype",
            "element_shape_except0",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGather",
        "name": "TensorArrayGather",
        "params": [
            "handle",
            "indices",
            "flow_in",
            "dtype",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGatherV2",
        "name": "TensorArrayGatherV2",
        "params": [
            "handle",
            "indices",
            "flow_in",
            "dtype",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGatherV3",
        "name": "TensorArrayGatherV3",
        "params": [
            "handle",
            "indices",
            "flow_in",
            "dtype",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGrad",
        "name": "TensorArrayGrad",
        "params": [
            "handle",
            "flow_in",
            "source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGradV2",
        "name": "TensorArrayGradV2",
        "params": [
            "handle",
            "flow_in",
            "source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGradV3",
        "name": "TensorArrayGradV3",
        "params": [
            "handle",
            "flow_in",
            "source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayGradWithShape",
        "name": "TensorArrayGradWithShape",
        "params": [
            "handle",
            "flow_in",
            "shape_to_prepend",
            "source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayPack",
        "name": "TensorArrayPack",
        "params": [
            "handle",
            "flow_in",
            "dtype",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayRead",
        "name": "TensorArrayRead",
        "params": [
            "handle",
            "index",
            "flow_in",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayReadV2",
        "name": "TensorArrayReadV2",
        "params": [
            "handle",
            "index",
            "flow_in",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayReadV3",
        "name": "TensorArrayReadV3",
        "params": [
            "handle",
            "index",
            "flow_in",
            "dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayScatter",
        "name": "TensorArrayScatter",
        "params": [
            "handle",
            "indices",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayScatterV2",
        "name": "TensorArrayScatterV2",
        "params": [
            "handle",
            "indices",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayScatterV3",
        "name": "TensorArrayScatterV3",
        "params": [
            "handle",
            "indices",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArraySize",
        "name": "TensorArraySize",
        "params": [
            "handle",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArraySizeV2",
        "name": "TensorArraySizeV2",
        "params": [
            "handle",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArraySizeV3",
        "name": "TensorArraySizeV3",
        "params": [
            "handle",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArraySplit",
        "name": "TensorArraySplit",
        "params": [
            "handle",
            "value",
            "lengths",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArraySplitV2",
        "name": "TensorArraySplitV2",
        "params": [
            "handle",
            "value",
            "lengths",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArraySplitV3",
        "name": "TensorArraySplitV3",
        "params": [
            "handle",
            "value",
            "lengths",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayUnpack",
        "name": "TensorArrayUnpack",
        "params": [
            "handle",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayV2",
        "name": "TensorArrayV2",
        "params": [
            "size",
            "dtype",
            "element_shape",
            "dynamic_size",
            "clear_after_read",
            "tensor_array_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayV3",
        "name": "TensorArrayV3",
        "params": [
            "size",
            "dtype",
            "element_shape",
            "dynamic_size",
            "clear_after_read",
            "identical_element_shapes",
            "tensor_array_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayWrite",
        "name": "TensorArrayWrite",
        "params": [
            "handle",
            "index",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayWriteV2",
        "name": "TensorArrayWriteV2",
        "params": [
            "handle",
            "index",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorArrayWriteV3",
        "name": "TensorArrayWriteV3",
        "params": [
            "handle",
            "index",
            "value",
            "flow_in",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorDataset",
        "name": "TensorDataset",
        "params": [
            "components",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListConcat",
        "name": "TensorListConcat",
        "params": [
            "input_handle",
            "element_dtype",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListConcatLists",
        "name": "TensorListConcatLists",
        "params": [
            "input_a",
            "input_b",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListConcatV2",
        "name": "TensorListConcatV2",
        "params": [
            "input_handle",
            "element_shape",
            "leading_dims",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListElementShape",
        "name": "TensorListElementShape",
        "params": [
            "input_handle",
            "shape_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListFromTensor",
        "name": "TensorListFromTensor",
        "params": [
            "tensor",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListGather",
        "name": "TensorListGather",
        "params": [
            "input_handle",
            "indices",
            "element_shape",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListGetItem",
        "name": "TensorListGetItem",
        "params": [
            "input_handle",
            "index",
            "element_shape",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListLength",
        "name": "TensorListLength",
        "params": [
            "input_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListPopBack",
        "name": "TensorListPopBack",
        "params": [
            "input_handle",
            "element_shape",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListPushBack",
        "name": "TensorListPushBack",
        "params": [
            "input_handle",
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListPushBackBatch",
        "name": "TensorListPushBackBatch",
        "params": [
            "input_handles",
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListReserve",
        "name": "TensorListReserve",
        "params": [
            "element_shape",
            "num_elements",
            "element_dtype",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListResize",
        "name": "TensorListResize",
        "params": [
            "input_handle",
            "size",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListScatter",
        "name": "TensorListScatter",
        "params": [
            "tensor",
            "indices",
            "element_shape",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListScatterIntoExistingList",
        "name": "TensorListScatterIntoExistingList",
        "params": [
            "input_handle",
            "tensor",
            "indices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListScatterV2",
        "name": "TensorListScatterV2",
        "params": [
            "tensor",
            "indices",
            "element_shape",
            "num_elements",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListSetItem",
        "name": "TensorListSetItem",
        "params": [
            "input_handle",
            "index",
            "item",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListSplit",
        "name": "TensorListSplit",
        "params": [
            "tensor",
            "element_shape",
            "lengths",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorListStack",
        "name": "TensorListStack",
        "params": [
            "input_handle",
            "element_shape",
            "element_dtype",
            "num_elements",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorScatterAdd",
        "name": "TensorScatterAdd",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorScatterMax",
        "name": "TensorScatterMax",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorScatterMin",
        "name": "TensorScatterMin",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorScatterSub",
        "name": "TensorScatterSub",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorScatterUpdate",
        "name": "TensorScatterUpdate",
        "params": [
            "tensor",
            "indices",
            "updates",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorSliceDataset",
        "name": "TensorSliceDataset",
        "params": [
            "components",
            "output_shapes",
            "is_files",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorStridedSliceUpdate",
        "name": "TensorStridedSliceUpdate",
        "params": [
            "input",
            "begin",
            "end",
            "strides",
            "value",
            "begin_mask",
            "end_mask",
            "ellipsis_mask",
            "new_axis_mask",
            "shrink_axis_mask",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorSummary",
        "name": "TensorSummary",
        "params": [
            "tensor",
            "description",
            "labels",
            "display_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TensorSummaryV2",
        "name": "TensorSummaryV2",
        "params": [
            "tag",
            "tensor",
            "serialized_summary_metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TextLineDataset",
        "name": "TextLineDataset",
        "params": [
            "filenames",
            "compression_type",
            "buffer_size",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TextLineReader",
        "name": "TextLineReader",
        "params": [
            "skip_header_lines",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TextLineReaderV2",
        "name": "TextLineReaderV2",
        "params": [
            "skip_header_lines",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ThreadPoolDataset",
        "name": "ThreadPoolDataset",
        "params": [
            "input_dataset",
            "thread_pool",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ThreadPoolHandle",
        "name": "ThreadPoolHandle",
        "params": [
            "num_threads",
            "display_name",
            "max_intra_op_parallelism",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ThreadUnsafeUnigramCandidateSampler",
        "name": "ThreadUnsafeUnigramCandidateSampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Tile",
        "name": "Tile",
        "params": [
            "input",
            "multiples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TileGrad",
        "name": "TileGrad",
        "params": [
            "input",
            "multiples",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Timestamp",
        "name": "Timestamp",
        "params": [
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ToBool",
        "name": "ToBool",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TopK",
        "name": "TopK",
        "params": [
            "input",
            "k",
            "sorted",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TopKV2",
        "name": "TopKV2",
        "params": [
            "input",
            "k",
            "sorted",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Transpose",
        "name": "Transpose",
        "params": [
            "x",
            "perm",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TridiagonalMatMul",
        "name": "TridiagonalMatMul",
        "params": [
            "superdiag",
            "maindiag",
            "subdiag",
            "rhs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TridiagonalSolve",
        "name": "TridiagonalSolve",
        "params": [
            "diagonals",
            "rhs",
            "partial_pivoting",
            "perturb_singular",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TruncateDiv",
        "name": "TruncateDiv",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TruncateMod",
        "name": "TruncateMod",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.TruncatedNormal",
        "name": "TruncatedNormal",
        "params": [
            "shape",
            "dtype",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Unbatch",
        "name": "Unbatch",
        "params": [
            "batched_tensor",
            "batch_index",
            "id",
            "timeout_micros",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnbatchDataset",
        "name": "UnbatchDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnbatchGrad",
        "name": "UnbatchGrad",
        "params": [
            "original_input",
            "batch_index",
            "grad",
            "id",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UncompressElement",
        "name": "UncompressElement",
        "params": [
            "compressed",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnicodeDecode",
        "name": "UnicodeDecode",
        "params": [
            "input",
            "input_encoding",
            "errors",
            "replacement_char",
            "replace_control_characters",
            "Tsplits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnicodeDecodeWithOffsets",
        "name": "UnicodeDecodeWithOffsets",
        "params": [
            "input",
            "input_encoding",
            "errors",
            "replacement_char",
            "replace_control_characters",
            "Tsplits",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnicodeEncode",
        "name": "UnicodeEncode",
        "params": [
            "input_values",
            "input_splits",
            "output_encoding",
            "errors",
            "replacement_char",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnicodeScript",
        "name": "UnicodeScript",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnicodeTranscode",
        "name": "UnicodeTranscode",
        "params": [
            "input",
            "input_encoding",
            "output_encoding",
            "errors",
            "replacement_char",
            "replace_control_characters",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UniformCandidateSampler",
        "name": "UniformCandidateSampler",
        "params": [
            "true_classes",
            "num_true",
            "num_sampled",
            "unique",
            "range_max",
            "seed",
            "seed2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Unique",
        "name": "Unique",
        "params": [
            "x",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UniqueDataset",
        "name": "UniqueDataset",
        "params": [
            "input_dataset",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UniqueV2",
        "name": "UniqueV2",
        "params": [
            "x",
            "axis",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UniqueWithCounts",
        "name": "UniqueWithCounts",
        "params": [
            "x",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UniqueWithCountsV2",
        "name": "UniqueWithCountsV2",
        "params": [
            "x",
            "axis",
            "out_idx",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Unpack",
        "name": "Unpack",
        "params": [
            "value",
            "num",
            "axis",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnravelIndex",
        "name": "UnravelIndex",
        "params": [
            "indices",
            "dims",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnsortedSegmentJoin",
        "name": "UnsortedSegmentJoin",
        "params": [
            "inputs",
            "segment_ids",
            "num_segments",
            "separator",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnsortedSegmentMax",
        "name": "UnsortedSegmentMax",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnsortedSegmentMin",
        "name": "UnsortedSegmentMin",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnsortedSegmentProd",
        "name": "UnsortedSegmentProd",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnsortedSegmentSum",
        "name": "UnsortedSegmentSum",
        "params": [
            "data",
            "segment_ids",
            "num_segments",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Unstage",
        "name": "Unstage",
        "params": [
            "dtypes",
            "capacity",
            "memory_limit",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UnwrapDatasetVariant",
        "name": "UnwrapDatasetVariant",
        "params": [
            "input_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.UpperBound",
        "name": "UpperBound",
        "params": [
            "sorted_inputs",
            "values",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.VarHandleOp",
        "name": "VarHandleOp",
        "params": [
            "dtype",
            "shape",
            "container",
            "shared_name",
            "allowed_devices",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.VarIsInitializedOp",
        "name": "VarIsInitializedOp",
        "params": [
            "resource",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Variable",
        "name": "Variable",
        "params": [
            "shape",
            "dtype",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.VariableShape",
        "name": "VariableShape",
        "params": [
            "input",
            "out_type",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.VariableV2",
        "name": "VariableV2",
        "params": [
            "shape",
            "dtype",
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Where",
        "name": "Where",
        "params": [
            "condition",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.While",
        "name": "While",
        "params": [
            "input",
            "cond",
            "body",
            "output_shapes",
            "parallel_iterations",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WholeFileReader",
        "name": "WholeFileReader",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WholeFileReaderV2",
        "name": "WholeFileReaderV2",
        "params": [
            "container",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WindowDataset",
        "name": "WindowDataset",
        "params": [
            "input_dataset",
            "size",
            "shift",
            "stride",
            "drop_remainder",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WindowOp",
        "name": "WindowOp",
        "params": [
            "inputs",
            "output_types",
            "output_shapes",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WorkerHeartbeat",
        "name": "WorkerHeartbeat",
        "params": [
            "request",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WrapDatasetVariant",
        "name": "WrapDatasetVariant",
        "params": [
            "input_handle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteAudioSummary",
        "name": "WriteAudioSummary",
        "params": [
            "writer",
            "step",
            "tag",
            "tensor",
            "sample_rate",
            "max_outputs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteFile",
        "name": "WriteFile",
        "params": [
            "filename",
            "contents",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteGraphSummary",
        "name": "WriteGraphSummary",
        "params": [
            "writer",
            "step",
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteHistogramSummary",
        "name": "WriteHistogramSummary",
        "params": [
            "writer",
            "step",
            "tag",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteImageSummary",
        "name": "WriteImageSummary",
        "params": [
            "writer",
            "step",
            "tag",
            "tensor",
            "bad_color",
            "max_images",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteRawProtoSummary",
        "name": "WriteRawProtoSummary",
        "params": [
            "writer",
            "step",
            "tensor",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteScalarSummary",
        "name": "WriteScalarSummary",
        "params": [
            "writer",
            "step",
            "tag",
            "value",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.WriteSummary",
        "name": "WriteSummary",
        "params": [
            "writer",
            "step",
            "tensor",
            "tag",
            "summary_metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Xdivy",
        "name": "Xdivy",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.XlaConcatND",
        "name": "XlaConcatND",
        "params": [
            "inputs",
            "num_concats",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.XlaSplitND",
        "name": "XlaSplitND",
        "params": [
            "input",
            "N",
            "num_splits",
            "paddings",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Xlog1py",
        "name": "Xlog1py",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Xlogy",
        "name": "Xlogy",
        "params": [
            "x",
            "y",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ZerosLike",
        "name": "ZerosLike",
        "params": [
            "x",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.Zeta",
        "name": "Zeta",
        "params": [
            "x",
            "q",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.raw_ops.ZipDataset",
        "name": "ZipDataset",
        "params": [
            "input_datasets",
            "output_types",
            "output_shapes",
            "metadata",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.resource_loader.get_data_files_path",
        "name": "get_data_files_path",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.resource_loader.get_path_to_datafile",
        "name": "get_path_to_datafile",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.resource_loader.get_root_dir_with_all_resources",
        "name": "get_root_dir_with_all_resources",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.resource_loader.load_resource",
        "name": "load_resource",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.resource_loader.readahead_file_path",
        "name": "readahead_file_path",
        "params": [
            "path",
            "readahead"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.Builder",
        "name": "Builder",
        "params": [
            "export_dir"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.build_signature_def",
        "name": "build_signature_def",
        "params": [
            "inputs",
            "outputs",
            "method_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.build_tensor_info",
        "name": "build_tensor_info",
        "params": [
            "tensor"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.classification_signature_def",
        "name": "classification_signature_def",
        "params": [
            "examples",
            "classes",
            "scores"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.contains_saved_model",
        "name": "contains_saved_model",
        "params": [
            "export_dir"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.get_tensor_from_tensor_info",
        "name": "get_tensor_from_tensor_info",
        "params": [
            "tensor_info",
            "graph",
            "import_scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.is_valid_signature",
        "name": "is_valid_signature",
        "params": [
            "signature_def"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.load",
        "name": "load",
        "params": [
            "sess",
            "tags",
            "export_dir",
            "import_scope",
            null
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.main_op_with_restore",
        "name": "main_op_with_restore",
        "params": [
            "restore_op_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.predict_signature_def",
        "name": "predict_signature_def",
        "params": [
            "inputs",
            "outputs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.regression_signature_def",
        "name": "regression_signature_def",
        "params": [
            "examples",
            "predictions"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.simple_save",
        "name": "simple_save",
        "params": [
            "session",
            "export_dir",
            "inputs",
            "outputs",
            "legacy_init_op"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.strings.length",
        "name": "length",
        "params": [
            "input",
            "name",
            "unit"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.strings.split",
        "name": "split",
        "params": [
            "input",
            "sep",
            "maxsplit",
            "result_type",
            "source",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.strings.substr",
        "name": "substr",
        "params": [
            "input",
            "pos",
            "len",
            "name",
            "unit"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.FileWriter",
        "name": "FileWriter",
        "params": [
            "logdir",
            "graph",
            "max_queue",
            "flush_secs",
            "graph_def",
            "filename_suffix",
            "session"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.FileWriterCache",
        "name": "FileWriterCache",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.summary.SummaryDescription",
        "name": "SummaryDescription",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.summary.TaggedRunMetadata",
        "name": "TaggedRunMetadata",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.summary.all_v2_summary_ops",
        "name": "all_v2_summary_ops",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.summary.audio",
        "name": "audio",
        "params": [
            "name",
            "tensor",
            "sample_rate",
            "max_outputs",
            "collections",
            "family"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.get_summary_description",
        "name": "get_summary_description",
        "params": [
            "node_def"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.histogram",
        "name": "histogram",
        "params": [
            "name",
            "values",
            "collections",
            "family"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.image",
        "name": "image",
        "params": [
            "name",
            "tensor",
            "max_outputs",
            "collections",
            "family"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.initialize",
        "name": "initialize",
        "params": [
            "graph",
            "session"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.merge",
        "name": "merge",
        "params": [
            "inputs",
            "collections",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.merge_all",
        "name": "merge_all",
        "params": [
            "key",
            "scope",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.scalar",
        "name": "scalar",
        "params": [
            "name",
            "tensor",
            "collections",
            "family"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.tensor_summary",
        "name": "tensor_summary",
        "params": [
            "name",
            "tensor",
            "summary_description",
            "collections",
            "summary_metadata",
            "family",
            "display_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.summary.text",
        "name": "text",
        "params": [
            "name",
            "tensor",
            "collections"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.test.StubOutForTesting",
        "name": "StubOutForTesting",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.test.assert_equal_graph_def",
        "name": "assert_equal_graph_def",
        "params": [
            "actual",
            "expected",
            "checkpoint_v2",
            "hash_table_shared_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.test.compute_gradient",
        "name": "compute_gradient",
        "params": [
            "x",
            "x_shape",
            "y",
            "y_shape",
            "x_init_value",
            "delta",
            "init_targets",
            "extra_feed_dict"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.test.compute_gradient_error",
        "name": "compute_gradient_error",
        "params": [
            "x",
            "x_shape",
            "y",
            "y_shape",
            "x_init_value",
            "delta",
            "init_targets",
            "extra_feed_dict"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.test.get_temp_dir",
        "name": "get_temp_dir",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.test.test_src_dir_path",
        "name": "test_src_dir_path",
        "params": [
            "relative_path"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.CrossShardOptimizer",
        "name": "CrossShardOptimizer",
        "params": [
            "opt",
            "reduction",
            "name",
            "group_assignment"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.PaddingSpec",
        "name": "PaddingSpec",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.batch_parallel",
        "name": "batch_parallel",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.bfloat16_scope",
        "name": "bfloat16_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.core",
        "name": "core",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.cross_replica_sum",
        "name": "cross_replica_sum",
        "params": [
            "x",
            "group_assignment",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.initialize_system",
        "name": "initialize_system",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.outside_compilation",
        "name": "outside_compilation",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.replicate",
        "name": "replicate",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.rewrite",
        "name": "rewrite",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.shard",
        "name": "shard",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.shutdown_system",
        "name": "shutdown_system",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.train.AdadeltaOptimizer",
        "name": "AdadeltaOptimizer",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.AdagradDAOptimizer",
        "name": "AdagradDAOptimizer",
        "params": [
            "learning_rate",
            "global_step",
            "initial_gradient_squared_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.AdagradOptimizer",
        "name": "AdagradOptimizer",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.AdamOptimizer",
        "name": "AdamOptimizer",
        "params": [
            "learning_rate",
            "beta1",
            "beta2",
            "epsilon",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.Checkpoint",
        "name": "Checkpoint",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.ChiefSessionCreator",
        "name": "ChiefSessionCreator",
        "params": [
            "scaffold",
            "master",
            "config",
            "checkpoint_dir",
            "checkpoint_filename_with_path"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.FtrlOptimizer",
        "name": "FtrlOptimizer",
        "params": [
            "learning_rate",
            "learning_rate_power",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name",
            "accum_name",
            "linear_name",
            "l2_shrinkage_regularization_strength",
            "beta"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.GradientDescentOptimizer",
        "name": "GradientDescentOptimizer",
        "params": [
            "learning_rate",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.LooperThread",
        "name": "LooperThread",
        "params": [
            "coord",
            "timer_interval_secs",
            "target",
            "args",
            "kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.MomentumOptimizer",
        "name": "MomentumOptimizer",
        "params": [
            "learning_rate",
            "momentum",
            "use_locking",
            "name",
            "use_nesterov"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.MonitoredSession",
        "name": "MonitoredSession",
        "params": [
            "session_creator",
            "hooks",
            "stop_grace_period_secs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.Optimizer",
        "name": "Optimizer",
        "params": [
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.ProximalAdagradOptimizer",
        "name": "ProximalAdagradOptimizer",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.ProximalGradientDescentOptimizer",
        "name": "ProximalGradientDescentOptimizer",
        "params": [
            "learning_rate",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.QueueRunner",
        "name": "QueueRunner",
        "params": [
            "queue",
            "enqueue_ops",
            "close_op",
            "cancel_op",
            "queue_closed_exception_types",
            "queue_runner_def",
            "import_scope"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.RMSPropOptimizer",
        "name": "RMSPropOptimizer",
        "params": [
            "learning_rate",
            "decay",
            "momentum",
            "epsilon",
            "use_locking",
            "centered",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.Saver",
        "name": "Saver",
        "params": [
            "var_list",
            "reshape",
            "sharded",
            "max_to_keep",
            "keep_checkpoint_every_n_hours",
            "name",
            "restore_sequentially",
            "saver_def",
            "builder",
            "defer_build",
            "allow_empty",
            "write_version",
            "pad_step_number",
            "save_relative_paths",
            "filename"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.SaverDef",
        "name": "SaverDef",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.train.Scaffold",
        "name": "Scaffold",
        "params": [
            "init_op",
            "init_feed_dict",
            "init_fn",
            "ready_op",
            "ready_for_local_init_op",
            "local_init_op",
            "summary_op",
            "saver",
            "copy_from_scaffold",
            "local_init_feed_dict"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.SessionCreator",
        "name": "SessionCreator",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.train.SessionManager",
        "name": "SessionManager",
        "params": [
            "local_init_op",
            "ready_op",
            "ready_for_local_init_op",
            "graph",
            "recovery_wait_secs",
            "local_init_run_options",
            "local_init_feed_dict"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.SingularMonitoredSession",
        "name": "SingularMonitoredSession",
        "params": [
            "hooks",
            "scaffold",
            "master",
            "config",
            "checkpoint_dir",
            "stop_grace_period_secs",
            "checkpoint_filename_with_path"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.Supervisor",
        "name": "Supervisor",
        "params": [
            "graph",
            "ready_op",
            "ready_for_local_init_op",
            "is_chief",
            "init_op",
            "init_feed_dict",
            "local_init_op",
            "logdir",
            "summary_op",
            "saver",
            "global_step",
            "save_summaries_secs",
            "save_model_secs",
            "recovery_wait_secs",
            "stop_grace_secs",
            "checkpoint_basename",
            "session_manager",
            "summary_writer",
            "init_fn",
            "local_init_run_options"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.SyncReplicasOptimizer",
        "name": "SyncReplicasOptimizer",
        "params": [
            "opt",
            "replicas_to_aggregate",
            "total_num_replicas",
            "variable_averages",
            "variables_to_average",
            "use_locking",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.WorkerSessionCreator",
        "name": "WorkerSessionCreator",
        "params": [
            "scaffold",
            "master",
            "config",
            "max_wait_secs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.MonitoredTrainingSession",
        "name": "MonitoredTrainingSession",
        "params": [
            "master",
            "is_chief",
            "checkpoint_dir",
            "scaffold",
            "hooks",
            "chief_only_hooks",
            "save_checkpoint_secs",
            "save_summaries_steps",
            "save_summaries_secs",
            "config",
            "stop_grace_period_secs",
            "log_step_count_steps",
            "max_wait_secs",
            "save_checkpoint_steps",
            "summary_dir",
            "save_graph_def"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.NewCheckpointReader",
        "name": "NewCheckpointReader",
        "params": [
            "filepattern"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.add_queue_runner",
        "name": "add_queue_runner",
        "params": [
            "qr",
            "collection"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.assert_global_step",
        "name": "assert_global_step",
        "params": [
            "global_step_tensor"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.basic_train_loop",
        "name": "basic_train_loop",
        "params": [
            "supervisor",
            "train_step_fn",
            "args",
            "kwargs",
            "master"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.batch",
        "name": "batch",
        "params": [
            "tensors",
            "batch_size",
            "num_threads",
            "capacity",
            "enqueue_many",
            "shapes",
            "dynamic_pad",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.batch_join",
        "name": "batch_join",
        "params": [
            "tensors_list",
            "batch_size",
            "capacity",
            "enqueue_many",
            "shapes",
            "dynamic_pad",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.checkpoint_exists",
        "name": "checkpoint_exists",
        "params": [
            "checkpoint_prefix"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.cosine_decay",
        "name": "cosine_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.cosine_decay_restarts",
        "name": "cosine_decay_restarts",
        "params": [
            "learning_rate",
            "global_step",
            "first_decay_steps",
            "t_mul",
            "m_mul",
            "alpha",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.create_global_step",
        "name": "create_global_step",
        "params": [
            "graph"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.do_quantize_training_on_graphdef",
        "name": "do_quantize_training_on_graphdef",
        "params": [
            "input_graph",
            "num_bits"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.exponential_decay",
        "name": "exponential_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.export_meta_graph",
        "name": "export_meta_graph",
        "params": [
            "filename",
            "meta_info_def",
            "graph_def",
            "saver_def",
            "collection_list",
            "as_text",
            "graph",
            "export_scope",
            "clear_devices",
            "clear_extraneous_savers",
            "strip_default_attrs",
            "save_debug_info",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.generate_checkpoint_state_proto",
        "name": "generate_checkpoint_state_proto",
        "params": [
            "save_dir",
            "model_checkpoint_path",
            "all_model_checkpoint_paths",
            "all_model_checkpoint_timestamps",
            "last_preserved_timestamp"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.get_checkpoint_mtimes",
        "name": "get_checkpoint_mtimes",
        "params": [
            "checkpoint_prefixes"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.get_global_step",
        "name": "get_global_step",
        "params": [
            "graph"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.get_or_create_global_step",
        "name": "get_or_create_global_step",
        "params": [
            "graph"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.global_step",
        "name": "global_step",
        "params": [
            "sess",
            "global_step_tensor"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.import_meta_graph",
        "name": "import_meta_graph",
        "params": [
            "meta_graph_or_file",
            "clear_devices",
            "import_scope",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.init_from_checkpoint",
        "name": "init_from_checkpoint",
        "params": [
            "ckpt_dir_or_file",
            "assignment_map"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.input_producer",
        "name": "input_producer",
        "params": [
            "input_tensor",
            "element_shape",
            "num_epochs",
            "shuffle",
            "seed",
            "capacity",
            "shared_name",
            "summary_name",
            "name",
            "cancel_op"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.inverse_time_decay",
        "name": "inverse_time_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.limit_epochs",
        "name": "limit_epochs",
        "params": [
            "tensor",
            "num_epochs",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.linear_cosine_decay",
        "name": "linear_cosine_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "num_periods",
            "alpha",
            "beta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.maybe_batch",
        "name": "maybe_batch",
        "params": [
            "tensors",
            "keep_input",
            "batch_size",
            "num_threads",
            "capacity",
            "enqueue_many",
            "shapes",
            "dynamic_pad",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.maybe_batch_join",
        "name": "maybe_batch_join",
        "params": [
            "tensors_list",
            "keep_input",
            "batch_size",
            "capacity",
            "enqueue_many",
            "shapes",
            "dynamic_pad",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.maybe_shuffle_batch",
        "name": "maybe_shuffle_batch",
        "params": [
            "tensors",
            "batch_size",
            "capacity",
            "min_after_dequeue",
            "keep_input",
            "num_threads",
            "seed",
            "enqueue_many",
            "shapes",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.maybe_shuffle_batch_join",
        "name": "maybe_shuffle_batch_join",
        "params": [
            "tensors_list",
            "batch_size",
            "capacity",
            "min_after_dequeue",
            "keep_input",
            "seed",
            "enqueue_many",
            "shapes",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.natural_exp_decay",
        "name": "natural_exp_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.noisy_linear_cosine_decay",
        "name": "noisy_linear_cosine_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "initial_variance",
            "variance_decay",
            "num_periods",
            "alpha",
            "beta",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.piecewise_constant",
        "name": "piecewise_constant",
        "params": [
            "x",
            "boundaries",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.polynomial_decay",
        "name": "polynomial_decay",
        "params": [
            "learning_rate",
            "global_step",
            "decay_steps",
            "end_learning_rate",
            "power",
            "cycle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.range_input_producer",
        "name": "range_input_producer",
        "params": [
            "limit",
            "num_epochs",
            "shuffle",
            "seed",
            "capacity",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.remove_checkpoint",
        "name": "remove_checkpoint",
        "params": [
            "checkpoint_prefix",
            "checkpoint_format_version",
            "meta_graph_suffix"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.replica_device_setter",
        "name": "replica_device_setter",
        "params": [
            "ps_tasks",
            "ps_device",
            "worker_device",
            "merge_devices",
            "cluster",
            "ps_ops",
            "ps_strategy"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.sdca_fprint",
        "name": "sdca_fprint",
        "params": [
            "input",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.sdca_optimizer",
        "name": "sdca_optimizer",
        "params": [
            "sparse_example_indices",
            "sparse_feature_indices",
            "sparse_feature_values",
            "dense_features",
            "example_weights",
            "example_labels",
            "sparse_indices",
            "sparse_weights",
            "dense_weights",
            "example_state_data",
            "loss_type",
            "l1",
            "l2",
            "num_loss_partitions",
            "num_inner_iterations",
            "adaptative",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.sdca_shrink_l1",
        "name": "sdca_shrink_l1",
        "params": [
            "weights",
            "l1",
            "l2",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.shuffle_batch",
        "name": "shuffle_batch",
        "params": [
            "tensors",
            "batch_size",
            "capacity",
            "min_after_dequeue",
            "num_threads",
            "seed",
            "enqueue_many",
            "shapes",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.shuffle_batch_join",
        "name": "shuffle_batch_join",
        "params": [
            "tensors_list",
            "batch_size",
            "capacity",
            "min_after_dequeue",
            "seed",
            "enqueue_many",
            "shapes",
            "allow_smaller_final_batch",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.slice_input_producer",
        "name": "slice_input_producer",
        "params": [
            "tensor_list",
            "num_epochs",
            "shuffle",
            "seed",
            "capacity",
            "shared_name",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.start_queue_runners",
        "name": "start_queue_runners",
        "params": [
            "sess",
            "coord",
            "daemon",
            "start",
            "collection"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.string_input_producer",
        "name": "string_input_producer",
        "params": [
            "string_tensor",
            "num_epochs",
            "shuffle",
            "seed",
            "capacity",
            "shared_name",
            "name",
            "cancel_op"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.summary_iterator",
        "name": "summary_iterator",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.update_checkpoint_state",
        "name": "update_checkpoint_state",
        "params": [
            "save_dir",
            "model_checkpoint_path",
            "all_model_checkpoint_paths",
            "latest_filename",
            "all_model_checkpoint_timestamps",
            "last_preserved_timestamp"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.train.warm_start",
        "name": "warm_start",
        "params": [
            "ckpt_to_initialize_from",
            "vars_to_warm_start",
            "var_name_to_vocab_info",
            "var_name_to_prev_var_name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.user_ops.my_fact",
        "name": "my_fact",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.service.DispatchServer",
        "name": "DispatchServer",
        "params": [
            "config",
            "start"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.service.DispatcherConfig",
        "name": "DispatcherConfig",
        "params": [
            "port",
            "protocol",
            "work_dir",
            "fault_tolerant_mode",
            "worker_addresses",
            "job_gc_check_interval_ms",
            "job_gc_timeout_ms"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.service.ShardingPolicy",
        "name": "ShardingPolicy",
        "params": []
    },
    {
        "full_name": "tensorflow.data.experimental.service.WorkerConfig",
        "name": "WorkerConfig",
        "params": [
            "dispatcher_address",
            "worker_address",
            "port",
            "protocol",
            "heartbeat_interval_ms",
            "dispatcher_timeout_ms"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.service.WorkerServer",
        "name": "WorkerServer",
        "params": [
            "config",
            "start"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.service.distribute",
        "name": "distribute",
        "params": [
            "processing_mode",
            "service",
            "job_name",
            "consumer_index",
            "num_consumers",
            "max_outstanding_requests",
            "data_transfer_protocol",
            "compression",
            "target_workers"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.service.from_dataset_id",
        "name": "from_dataset_id",
        "params": [
            "processing_mode",
            "service",
            "dataset_id",
            "element_spec",
            "job_name",
            "consumer_index",
            "num_consumers",
            "max_outstanding_requests",
            "data_transfer_protocol",
            "target_workers"
        ]
    },
    {
        "full_name": "tensorflow.data.experimental.service.register_dataset",
        "name": "register_dataset",
        "params": [
            "service",
            "dataset",
            "compression"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.partitioners.FixedShardsPartitioner",
        "name": "FixedShardsPartitioner",
        "params": [
            "num_shards"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.partitioners.MaxSizePartitioner",
        "name": "MaxSizePartitioner",
        "params": [
            "max_shard_bytes",
            "max_shards",
            "bytes_per_string"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.partitioners.MinSizePartitioner",
        "name": "MinSizePartitioner",
        "params": [
            "min_shard_bytes",
            "max_shards",
            "bytes_per_string"
        ]
    },
    {
        "full_name": "tensorflow.distribute.experimental.partitioners.Partitioner",
        "name": "Partitioner",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.experimental.rpc.Client",
        "name": "Client",
        "params": []
    },
    {
        "full_name": "tensorflow.distribute.experimental.rpc.Server",
        "name": "Server",
        "params": []
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.poisson",
        "name": "poisson",
        "params": [
            "lam",
            "size"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.rand",
        "name": "rand",
        "params": [
            "*size"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.randint",
        "name": "randint",
        "params": [
            "low",
            "high",
            "size",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.randn",
        "name": "randn",
        "params": [
            "*args"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.random",
        "name": "random",
        "params": [
            "size"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.seed",
        "name": "seed",
        "params": [
            "s"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.standard_normal",
        "name": "standard_normal",
        "params": [
            "size"
        ]
    },
    {
        "full_name": "tensorflow.experimental.numpy.random.uniform",
        "name": "uniform",
        "params": [
            "low",
            "high",
            "size"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.densenet.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.densenet.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.efficientnet_v2.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.imagenet_utils.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.imagenet_utils.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format",
            "mode"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.inception_resnet_v2.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.inception_resnet_v2.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.inception_v3.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.inception_v3.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet_v2.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet_v2.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet_v3.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.mobilenet_v3.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.nasnet.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.nasnet.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.regnet.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet50.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet50.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_rs.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_v2.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.resnet_v2.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.vgg16.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.vgg16.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.vgg19.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.vgg19.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.xception.decode_predictions",
        "name": "decode_predictions",
        "params": [
            "preds",
            "top"
        ]
    },
    {
        "full_name": "tensorflow.keras.applications.xception.preprocess_input",
        "name": "preprocess_input",
        "params": [
            "x",
            "data_format"
        ]
    },
    {
        "full_name": "tensorflow.keras.backend.experimental.disable_tensorflow_random_generator",
        "name": "disable_tf_random_generator",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.experimental.enable_tensorflow_random_generator",
        "name": "enable_tf_random_generator",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.backend.experimental.is_tensorflow_random_generator_enabled",
        "name": "is_tf_random_generator_enabled",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.callbacks.experimental.BackupAndRestore",
        "name": "BackupAndRestore",
        "params": [
            "*args",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.boston_housing.load_data",
        "name": "load_data",
        "params": [
            "path",
            "test_split",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.cifar10.load_data",
        "name": "load_data",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.datasets.cifar100.load_data",
        "name": "load_data",
        "params": [
            "label_mode"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.fashion_mnist.load_data",
        "name": "load_data",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.datasets.imdb.get_word_index",
        "name": "get_word_index",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.imdb.load_data",
        "name": "load_data",
        "params": [
            "path",
            "num_words",
            "skip_top",
            "maxlen",
            "seed",
            "start_char",
            "oov_char",
            "index_from",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.mnist.load_data",
        "name": "load_data",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.reuters.get_word_index",
        "name": "get_word_index",
        "params": [
            "path"
        ]
    },
    {
        "full_name": "tensorflow.keras.datasets.reuters.load_data",
        "name": "load_data",
        "params": [
            "path",
            "num_words",
            "skip_top",
            "maxlen",
            "test_split",
            "seed",
            "start_char",
            "oov_char",
            "index_from",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.LayoutMap",
        "name": "LayoutMap",
        "params": [
            "mesh"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.layout_map_scope",
        "name": "layout_map_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.layers.experimental.EinsumDense",
        "name": "EinsumDense",
        "params": [
            "equation",
            "output_shape",
            "activation",
            "bias_axes",
            "kernel_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "bias_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.experimental.RandomFourierFeatures",
        "name": "RandomFourierFeatures",
        "params": [
            "output_dim",
            "kernel_initializer",
            "scale",
            "trainable",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.experimental.SyncBatchNormalization",
        "name": "SyncBatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Adadelta",
        "name": "Adadelta",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Adagrad",
        "name": "Adagrad",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "epsilon",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Adam",
        "name": "Adam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "amsgrad",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.AdamW",
        "name": "AdamW",
        "params": [
            "learning_rate",
            "weight_decay",
            "beta_1",
            "beta_2",
            "epsilon",
            "amsgrad",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Adamax",
        "name": "Adamax",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Ftrl",
        "name": "Ftrl",
        "params": [
            "learning_rate",
            "learning_rate_power",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "l2_shrinkage_regularization_strength",
            "beta",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Nadam",
        "name": "Nadam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.Optimizer",
        "name": "Optimizer",
        "params": [
            "name",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.RMSprop",
        "name": "RMSprop",
        "params": [
            "learning_rate",
            "rho",
            "momentum",
            "epsilon",
            "centered",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.experimental.SGD",
        "name": "SGD",
        "params": [
            "learning_rate",
            "momentum",
            "nesterov",
            "amsgrad",
            "clipnorm",
            "clipvalue",
            "global_clipnorm",
            "use_ema",
            "ema_momentum",
            "ema_overwrite_frequency",
            "jit_compile",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Adadelta",
        "name": "Adadelta",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Adagrad",
        "name": "Adagrad",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Adam",
        "name": "Adam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "amsgrad",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Adamax",
        "name": "Adamax",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Ftrl",
        "name": "Ftrl",
        "params": [
            "learning_rate",
            "learning_rate_power",
            "initial_accumulator_value",
            "l1_regularization_strength",
            "l2_regularization_strength",
            "name",
            "l2_shrinkage_regularization_strength",
            "beta",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Nadam",
        "name": "Nadam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.Optimizer",
        "name": "Optimizer",
        "params": [
            "name",
            "gradient_aggregator",
            "gradient_transformers",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.RMSprop",
        "name": "RMSprop",
        "params": [
            "learning_rate",
            "rho",
            "momentum",
            "epsilon",
            "centered",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.legacy.SGD",
        "name": "SGD",
        "params": [
            "learning_rate",
            "momentum",
            "nesterov",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.ExponentialDecay",
        "name": "ExponentialDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.InverseTimeDecay",
        "name": "InverseTimeDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "decay_rate",
            "staircase",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
        "name": "LearningRateSchedule",
        "params": []
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.PiecewiseConstantDecay",
        "name": "PiecewiseConstantDecay",
        "params": [
            "boundaries",
            "values",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.PolynomialDecay",
        "name": "PolynomialDecay",
        "params": [
            "initial_learning_rate",
            "decay_steps",
            "end_learning_rate",
            "power",
            "cycle",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.deserialize",
        "name": "deserialize",
        "params": [
            "config",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.keras.optimizers.schedules.serialize",
        "name": "serialize",
        "params": [
            "learning_rate_schedule"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.DirectoryIterator",
        "name": "DirectoryIterator",
        "params": [
            "directory",
            "image_data_generator",
            "target_size",
            "color_mode",
            "classes",
            "class_mode",
            "batch_size",
            "shuffle",
            "seed",
            "data_format",
            "save_to_dir",
            "save_prefix",
            "save_format",
            "follow_links",
            "subset",
            "interpolation",
            "keep_aspect_ratio",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.ImageDataGenerator",
        "name": "ImageDataGenerator",
        "params": [
            "featurewise_center",
            "samplewise_center",
            "featurewise_std_normalization",
            "samplewise_std_normalization",
            "zca_whitening",
            "zca_epsilon",
            "rotation_range",
            "width_shift_range",
            "height_shift_range",
            "brightness_range",
            "shear_range",
            "zoom_range",
            "channel_shift_range",
            "fill_mode",
            "cval",
            "horizontal_flip",
            "vertical_flip",
            "rescale",
            "preprocessing_function",
            "data_format",
            "validation_split",
            "interpolation_order",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.Iterator",
        "name": "Iterator",
        "params": [
            "n",
            "batch_size",
            "shuffle",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.NumpyArrayIterator",
        "name": "NumpyArrayIterator",
        "params": [
            "x",
            "y",
            "image_data_generator",
            "batch_size",
            "shuffle",
            "sample_weight",
            "seed",
            "data_format",
            "save_to_dir",
            "save_prefix",
            "save_format",
            "subset",
            "ignore_class_split",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.apply_affine_transform",
        "name": "apply_affine_transform",
        "params": [
            "x",
            "theta",
            "tx",
            "ty",
            "shear",
            "zx",
            "zy",
            "row_axis",
            "col_axis",
            "channel_axis",
            "fill_mode",
            "cval",
            "order"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.apply_brightness_shift",
        "name": "apply_brightness_shift",
        "params": [
            "x",
            "brightness",
            "scale"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.apply_channel_shift",
        "name": "apply_channel_shift",
        "params": [
            "x",
            "intensity",
            "channel_axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.random_brightness",
        "name": "random_brightness",
        "params": [
            "x",
            "brightness_range",
            "scale"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.random_channel_shift",
        "name": "random_channel_shift",
        "params": [
            "x",
            "intensity_range",
            "channel_axis"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.random_rotation",
        "name": "random_rotation",
        "params": [
            "x",
            "rg",
            "row_axis",
            "col_axis",
            "channel_axis",
            "fill_mode",
            "cval",
            "interpolation_order"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.random_shear",
        "name": "random_shear",
        "params": [
            "x",
            "intensity",
            "row_axis",
            "col_axis",
            "channel_axis",
            "fill_mode",
            "cval",
            "interpolation_order"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.random_shift",
        "name": "random_shift",
        "params": [
            "x",
            "wrg",
            "hrg",
            "row_axis",
            "col_axis",
            "channel_axis",
            "fill_mode",
            "cval",
            "interpolation_order"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.random_zoom",
        "name": "random_zoom",
        "params": [
            "x",
            "zoom_range",
            "row_axis",
            "col_axis",
            "channel_axis",
            "fill_mode",
            "cval",
            "interpolation_order"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.image.smart_resize",
        "name": "smart_resize",
        "params": [
            "x",
            "size",
            "interpolation"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.sequence.TimeseriesGenerator",
        "name": "TimeseriesGenerator",
        "params": [
            "data",
            "targets",
            "length",
            "sampling_rate",
            "stride",
            "start_index",
            "end_index",
            "shuffle",
            "reverse",
            "batch_size"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.sequence.make_sampling_table",
        "name": "make_sampling_table",
        "params": [
            "size",
            "sampling_factor"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.sequence.skipgrams",
        "name": "skipgrams",
        "params": [
            "sequence",
            "vocabulary_size",
            "window_size",
            "negative_samples",
            "shuffle",
            "categorical",
            "sampling_table",
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.text.Tokenizer",
        "name": "Tokenizer",
        "params": [
            "num_words",
            "filters",
            "lower",
            "split",
            "char_level",
            "oov_token",
            "analyzer",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.text.hashing_trick",
        "name": "hashing_trick",
        "params": [
            "text",
            "n",
            "hash_function",
            "filters",
            "lower",
            "split",
            "analyzer"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.text.one_hot",
        "name": "one_hot",
        "params": [
            "input_text",
            "n",
            "filters",
            "lower",
            "split",
            "analyzer"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.text.text_to_word_sequence",
        "name": "text_to_word_sequence",
        "params": [
            "input_text",
            "filters",
            "lower",
            "split"
        ]
    },
    {
        "full_name": "tensorflow.keras.preprocessing.text.tokenizer_from_json",
        "name": "tokenizer_from_json",
        "params": [
            "json_string"
        ]
    },
    {
        "full_name": "tensorflow.keras.utils.experimental.DatasetCreator",
        "name": "DatasetCreator",
        "params": [
            "dataset_fn",
            "input_options"
        ]
    },
    {
        "full_name": "tensorflow.lite.experimental.authoring.compatible",
        "name": "compatible",
        "params": [
            "target",
            "converter_target_spec",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.client.monitor",
        "name": "monitor",
        "params": [
            "service_addr",
            "duration_ms",
            "level"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.client.trace",
        "name": "trace",
        "params": [
            "service_addr",
            "logdir",
            "duration_ms",
            "worker_list",
            "num_tracing_attempts",
            "options"
        ]
    },
    {
        "full_name": "tensorflow.profiler.experimental.server.start",
        "name": "start",
        "params": [
            "port"
        ]
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.Adagrad",
        "name": "Adagrad",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.AdagradMomentum",
        "name": "AdagradMomentum",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.Adam",
        "name": "Adam",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.FTRL",
        "name": "FTRL",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.FeatureConfig",
        "name": "FeatureConfig",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.SGD",
        "name": "SGD",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.TPUEmbedding",
        "name": "TPUEmbedding",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.TPUEmbeddingForServing",
        "name": "TPUEmbeddingForServing",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.TPUEmbeddingV0",
        "name": "TPUEmbeddingV0",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.TableConfig",
        "name": "TableConfig",
        "params": []
    },
    {
        "full_name": "tensorflow.tpu.experimental.embedding.serving_embedding_lookup",
        "name": "serving_embedding_lookup",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.CsvDataset",
        "name": "CsvDataset",
        "params": [
            "filenames",
            "record_defaults",
            "compression_type",
            "buffer_size",
            "header",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "select_cols",
            "exclude_cols"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.RandomDataset",
        "name": "RandomDataset",
        "params": [
            "seed",
            "name"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.SqlDataset",
        "name": "SqlDataset",
        "params": [
            "driver_name",
            "data_source_name",
            "query",
            "output_types"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.Counter",
        "name": "Counter",
        "params": [
            "start",
            "step",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.RaggedTensorStructure",
        "name": "RaggedTensorStructure",
        "params": [
            "dtype",
            "shape",
            "ragged_rank"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.SparseTensorStructure",
        "name": "SparseTensorStructure",
        "params": [
            "dtype",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.TensorArrayStructure",
        "name": "TensorArrayStructure",
        "params": [
            "dtype",
            "element_shape",
            "dynamic_size",
            "infer_shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.TensorStructure",
        "name": "TensorStructure",
        "params": [
            "dtype",
            "shape"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.choose_from_datasets",
        "name": "choose_from_datasets",
        "params": [
            "datasets",
            "choice_dataset",
            "stop_on_empty_dataset"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.make_batched_features_dataset",
        "name": "make_batched_features_dataset",
        "params": [
            "file_pattern",
            "batch_size",
            "features",
            "reader",
            "label_key",
            "reader_args",
            "num_epochs",
            "shuffle",
            "shuffle_buffer_size",
            "shuffle_seed",
            "prefetch_buffer_size",
            "reader_num_threads",
            "parser_num_threads",
            "sloppy_ordering",
            "drop_final_batch"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.make_csv_dataset",
        "name": "make_csv_dataset",
        "params": [
            "file_pattern",
            "batch_size",
            "column_names",
            "column_defaults",
            "label_name",
            "select_columns",
            "field_delim",
            "use_quote_delim",
            "na_value",
            "header",
            "num_epochs",
            "shuffle",
            "shuffle_buffer_size",
            "shuffle_seed",
            "prefetch_buffer_size",
            "num_parallel_reads",
            "sloppy",
            "num_rows_for_inference",
            "compression_type",
            "ignore_errors"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.map_and_batch_with_legacy_function",
        "name": "map_and_batch_with_legacy_function",
        "params": [
            "map_func",
            "batch_size",
            "num_parallel_batches",
            "drop_remainder",
            "num_parallel_calls"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.data.experimental.sample_from_datasets",
        "name": "sample_from_datasets",
        "params": [
            "datasets",
            "weights",
            "seed",
            "stop_on_empty_dataset"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.experimental.CentralStorageStrategy",
        "name": "CentralStorageStrategy",
        "params": [
            "compute_devices",
            "parameter_device"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.experimental.MultiWorkerMirroredStrategy",
        "name": "MultiWorkerMirroredStrategy",
        "params": [
            "communication",
            "cluster_resolver"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.experimental.ParameterServerStrategy",
        "name": "ParameterServerStrategy",
        "params": [
            "cluster_resolver"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.distribute.experimental.TPUStrategy",
        "name": "TPUStrategy",
        "params": [
            "tpu_cluster_resolver",
            "steps_per_run",
            "device_assignment"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.experimental.KMeans",
        "name": "KMeans",
        "params": [
            "num_clusters",
            "model_dir",
            "initial_clusters",
            "distance_metric",
            "seed",
            "use_mini_batch",
            "mini_batch_steps_per_iteration",
            "kmeans_plus_plus_num_retries",
            "relative_tolerance",
            "config",
            "feature_columns"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.experimental.dnn_logit_fn_builder",
        "name": "dnn_logit_fn_builder",
        "params": [
            "units",
            "hidden_units",
            "feature_columns",
            "activation_fn",
            "dropout",
            "input_layer_partitioner",
            "batch_norm"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.experimental.linear_logit_fn_builder",
        "name": "linear_logit_fn_builder",
        "params": [
            "units",
            "feature_columns",
            "sparse_combiner"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.inputs.numpy_input_fn",
        "name": "numpy_input_fn",
        "params": [
            "x",
            "y",
            "batch_size",
            "num_epochs",
            "shuffle",
            "queue_capacity",
            "num_threads"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.inputs.pandas_input_fn",
        "name": "pandas_input_fn",
        "params": [
            "x",
            "y",
            "batch_size",
            "num_epochs",
            "shuffle",
            "queue_capacity",
            "num_threads",
            "target_column"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.tpu.InputPipelineConfig",
        "name": "InputPipelineConfig",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.tpu.RunConfig",
        "name": "RunConfig",
        "params": [
            "tpu_config",
            "evaluation_master",
            "master",
            "cluster",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.tpu.TPUConfig",
        "name": "TPUConfig",
        "params": [
            "iterations_per_loop",
            "num_shards",
            "num_cores_per_replica",
            "per_host_input_for_training",
            "tpu_job_name",
            "initial_infeed_sleep_secs",
            "input_partition_dims",
            "eval_training_input_configuration",
            "experimental_host_call_every_n_steps",
            "experimental_allow_per_host_v2_parallel_get_next",
            "experimental_feed_hook"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.tpu.TPUEstimator",
        "name": "TPUEstimator",
        "params": [
            "model_fn",
            "model_dir",
            "config",
            "params",
            "use_tpu",
            "train_batch_size",
            "eval_batch_size",
            "predict_batch_size",
            "batch_axis",
            "eval_on_tpu",
            "export_to_tpu",
            "export_to_cpu",
            "warm_start_from",
            "embedding_config_spec",
            "export_saved_model_api_version"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.tpu.TPUEstimatorSpec",
        "name": "TPUEstimatorSpec",
        "params": [
            "mode",
            "predictions",
            "loss",
            "train_op",
            "eval_metrics",
            "export_outputs",
            "scaffold_fn",
            "host_call",
            "training_hooks",
            "evaluation_hooks",
            "prediction_hooks"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.backend.get_session",
        "name": "get_session",
        "params": [
            "op_input_list"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.backend.set_session",
        "name": "set_session",
        "params": [
            "session"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.callbacks.TensorBoard",
        "name": "TensorBoard",
        "params": [
            "log_dir",
            "histogram_freq",
            "batch_size",
            "write_graph",
            "write_grads",
            "write_images",
            "embeddings_freq",
            "embeddings_layer_names",
            "embeddings_metadata",
            "embeddings_data",
            "update_freq",
            "profile_batch"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.estimator.model_to_estimator",
        "name": "model_to_estimator",
        "params": [
            "keras_model",
            "keras_model_path",
            "custom_objects",
            "model_dir",
            "config",
            "checkpoint_format",
            "metric_names_map",
            "export_outputs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.experimental.export_saved_model",
        "name": "export_saved_model",
        "params": [
            "model",
            "saved_model_path",
            "custom_objects",
            "as_text",
            "input_signature",
            "serving_only"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.experimental.load_from_saved_model",
        "name": "load_from_saved_model",
        "params": [
            "saved_model_path",
            "custom_objects"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.RandomNormal",
        "name": "RandomNormal",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.RandomUniform",
        "name": "RandomUniform",
        "params": [
            "minval",
            "maxval",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.TruncatedNormal",
        "name": "TruncatedNormal",
        "params": [
            "mean",
            "stddev",
            "seed",
            "dtype"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.he_normal",
        "name": "he_normal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.he_uniform",
        "name": "he_uniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.lecun_normal",
        "name": "lecun_normal",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.initializers.lecun_uniform",
        "name": "lecun_uniform",
        "params": [
            "seed"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.BatchNormalization",
        "name": "BatchNormalization",
        "params": [
            "axis",
            "momentum",
            "epsilon",
            "center",
            "scale",
            "beta_initializer",
            "gamma_initializer",
            "moving_mean_initializer",
            "moving_variance_initializer",
            "beta_regularizer",
            "gamma_regularizer",
            "beta_constraint",
            "gamma_constraint",
            "renorm",
            "renorm_clipping",
            "renorm_momentum",
            "fused",
            "trainable",
            "virtual_batch_size",
            "adjustment",
            "name",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.CuDNNGRU",
        "name": "CuDNNGRU",
        "params": [
            "units",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.CuDNNLSTM",
        "name": "CuDNNLSTM",
        "params": [
            "units",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.DenseFeatures",
        "name": "DenseFeatures",
        "params": [
            "feature_columns",
            "trainable",
            "name",
            "partitioner",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.GRU",
        "name": "GRU",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.GRUCell",
        "name": "GRUCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "reset_after",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.LSTM",
        "name": "LSTM",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "activity_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "return_sequences",
            "return_state",
            "go_backwards",
            "stateful",
            "unroll",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.LSTMCell",
        "name": "LSTMCell",
        "params": [
            "units",
            "activation",
            "recurrent_activation",
            "use_bias",
            "kernel_initializer",
            "recurrent_initializer",
            "bias_initializer",
            "unit_forget_bias",
            "kernel_regularizer",
            "recurrent_regularizer",
            "bias_regularizer",
            "kernel_constraint",
            "recurrent_constraint",
            "bias_constraint",
            "dropout",
            "recurrent_dropout",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.disable_v2_dtype_behavior",
        "name": "disable_v2_dtype_behavior",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.keras.layers.enable_v2_dtype_behavior",
        "name": "enable_v2_dtype_behavior",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.keras.utils.DeterministicRandomTestTool",
        "name": "DeterministicRandomTestTool",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.keras.utils.get_or_create_layer",
        "name": "get_or_create_layer",
        "params": [
            "name",
            "create_layer_method"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.keras.utils.track_tensorflow1_style_variables",
        "name": "track_tf1_style_variables",
        "params": [
            "method"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.layers.experimental.keras_style_scope",
        "name": "keras_style_scope",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.layers.experimental.set_keras_style",
        "name": "set_keras_style",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.lite.experimental.convert_op_hints_to_stubs",
        "name": "convert_op_hints_to_stubs",
        "params": [
            "session",
            "graph_def",
            "write_callback"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.BasicLSTMCell",
        "name": "BasicLSTMCell",
        "params": [
            "num_units",
            "forget_bias",
            "state_is_tuple",
            "activation",
            "reuse",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.BasicRNNCell",
        "name": "BasicRNNCell",
        "params": [
            "num_units",
            "activation",
            "reuse",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.DeviceWrapper",
        "name": "DeviceWrapper",
        "params": [
            "cell",
            "device",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.DropoutWrapper",
        "name": "DropoutWrapper",
        "params": [
            "cell",
            "input_keep_prob",
            "output_keep_prob",
            "state_keep_prob",
            "variational_recurrent",
            "input_size",
            "dtype",
            "seed",
            "dropout_state_filter_visitor",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.GRUCell",
        "name": "GRUCell",
        "params": [
            "num_units",
            "activation",
            "reuse",
            "kernel_initializer",
            "bias_initializer",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.LSTMCell",
        "name": "LSTMCell",
        "params": [
            "num_units",
            "use_peepholes",
            "cell_clip",
            "initializer",
            "num_proj",
            "proj_clip",
            "num_unit_shards",
            "num_proj_shards",
            "forget_bias",
            "state_is_tuple",
            "activation",
            "reuse",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.LSTMStateTuple",
        "name": "LSTMStateTuple",
        "params": [
            "c",
            "h"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.MultiRNNCell",
        "name": "MultiRNNCell",
        "params": [
            "cells",
            "state_is_tuple"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.RNNCell",
        "name": "RNNCell",
        "params": [
            "trainable",
            "name",
            "dtype",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.nn.rnn_cell.ResidualWrapper",
        "name": "ResidualWrapper",
        "params": [
            "cell",
            "residual_fn",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.main_op.main_op",
        "name": "main_op",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.saved_model.signature_def_utils.MethodNameUpdater",
        "name": "MethodNameUpdater",
        "params": [
            "export_dir"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.experimental.AdagradParameters",
        "name": "AdagradParameters",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.experimental.AdamParameters",
        "name": "AdamParameters",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.experimental.FtrlParameters",
        "name": "FtrlParameters",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.experimental.StochasticGradientDescentParameters",
        "name": "StochasticGradientDescentParameters",
        "params": []
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.experimental.embedding_column",
        "name": "embedding_column",
        "params": [
            "categorical_column",
            "dimension",
            "combiner",
            "initializer",
            "max_sequence_length",
            "learning_rate_fn",
            "embedding_lookup_device",
            "tensor_core_shape",
            "use_safe_embedding_lookup"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.tpu.experimental.shared_embedding_columns",
        "name": "shared_embedding_columns",
        "params": [
            "categorical_columns",
            "dimension",
            "combiner",
            "initializer",
            "shared_embedding_collection_name",
            "max_sequence_lengths",
            "learning_rate_fn",
            "embedding_lookup_device",
            "tensor_core_shape",
            "use_safe_embedding_lookup"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.optimizers.Adadelta",
        "name": "Adadelta",
        "params": [
            "learning_rate",
            "rho",
            "epsilon",
            "gradients_clip_option",
            "ema_option",
            "name",
            "mesh"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.optimizers.Adagrad",
        "name": "Adagrad",
        "params": [
            "learning_rate",
            "initial_accumulator_value",
            "epsilon",
            "gradients_clip_option",
            "ema_option",
            "name",
            "mesh"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.optimizers.Adam",
        "name": "Adam",
        "params": [
            "learning_rate",
            "beta_1",
            "beta_2",
            "epsilon",
            "amsgrad",
            "gradients_clip_option",
            "ema_option",
            "name",
            "mesh"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.optimizers.RMSprop",
        "name": "RMSprop",
        "params": [
            "learning_rate",
            "rho",
            "momentum",
            "epsilon",
            "centered",
            "gradients_clip_option",
            "ema_option",
            "jit_compile",
            "name",
            "mesh"
        ]
    },
    {
        "full_name": "tensorflow.keras.dtensor.experimental.optimizers.SGD",
        "name": "SGD",
        "params": [
            "learning_rate",
            "momentum",
            "nesterov",
            "amsgrad",
            "gradients_clip_option",
            "ema_option",
            "jit_compile",
            "name",
            "mesh"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.experimental.preprocessing.HashedCrossing",
        "name": "HashedCrossing",
        "params": [
            "num_bins",
            "output_mode",
            "sparse",
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.keras.layers.experimental.preprocessing.PreprocessingLayer",
        "name": "PreprocessingLayer",
        "params": [
            "**kwargs"
        ]
    },
    {
        "full_name": "tensorflow.compat.v1.estimator.tpu.experimental.EmbeddingConfigSpec",
        "name": "EmbeddingConfigSpec",
        "params": [
            "feature_columns",
            "optimization_parameters",
            "clipping_limit",
            "pipeline_execution_with_tensor_core",
            "experimental_gradient_multiplier_fn",
            "feature_to_config_dict",
            "table_to_config_dict",
            "partition_strategy",
            "profile_data_directory"
        ]
    }
]